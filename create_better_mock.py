#!/usr/bin/env python3
"""
Solution simple pour créer des vidéos mock sans dépendances lourdes
"""
import os
import shutil
from pathlib import Path

def create_minimal_mock_video(output_path, duration=10):
    """Créer une vidéo MP4 minimale mais valide"""
    
    # Données d'un fichier MP4 minimal mais valide (noir, 1 seconde)
    # Ce fichier sera ensuite dupliqué pour simuler la durée demandée
    mp4_minimal = bytes([
        0x00, 0x00, 0x00, 0x20, 0x66, 0x74, 0x79, 0x70, 0x69, 0x73, 0x6F, 0x6D, 0x00, 0x00, 0x02, 0x00,
        0x69, 0x73, 0x6F, 0x6D, 0x69, 0x73, 0x6F, 0x32, 0x61, 0x76, 0x63, 0x31, 0x6D, 0x70, 0x34, 0x31,
        0x00, 0x00, 0x02, 0x68, 0x6D, 0x6F, 0x6F, 0x76, 0x00, 0x00, 0x00, 0x6C, 0x6D, 0x76, 0x68, 0x64,
        0x00, 0x00, 0x00, 0x00, 0xD4, 0x8A, 0x06, 0x40, 0xD4, 0x8A, 0x06, 0x40, 0x00, 0x00, 0x03, 0xE8,
        0x00, 0x00, 0x03, 0xE8, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0xF4, 0x74, 0x72, 0x61, 0x6B, 0x00, 0x00, 0x00, 0x5C,
        0x74, 0x6B, 0x68, 0x64, 0x00, 0x00, 0x00, 0x07, 0xD4, 0x8A, 0x06, 0x40, 0xD4, 0x8A, 0x06, 0x40,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
        0x05, 0x00, 0x00, 0x00, 0x02, 0xD0, 0x00, 0x00
    ])
    
    # Créer le fichier
    with open(output_path, 'wb') as f:
        f.write(mp4_minimal)
        # Répéter les données pour simuler la durée (approche simpliste)
        for _ in range(duration - 1):
            f.write(mp4_minimal[-100:])  # Ajouter quelques données pour la durée
    
    print(f"✅ Vidéo mock minimale créée: {output_path} ({os.path.getsize(output_path)} bytes)")

def find_and_copy_existing_video(output_path):
    """Chercher une vidéo existante et la copier"""
    cache_dir = Path("saas/cache/crewai_animations")
    
    # Chercher des vidéos existantes de bonne taille
    existing_videos = []
    for video_file in cache_dir.glob("*.mp4"):
        if video_file.stat().st_size > 100000:  # Au moins 100KB
            existing_videos.append(video_file)
    
    if existing_videos:
        # Prendre la plus récente
        source_video = max(existing_videos, key=lambda x: x.stat().st_mtime)
        shutil.copy2(source_video, output_path)
        print(f"✅ Vidéo copiée: {source_video} -> {output_path} ({os.path.getsize(output_path)} bytes)")
        return True
    
    return False

def create_better_mock_video(text, duration, output_path):
    """Créer une meilleure vidéo mock"""
    
    # Méthode 1: Copier une vidéo existante
    if find_and_copy_existing_video(output_path):
        return
    
    # Méthode 2: Créer un fichier minimal
    create_minimal_mock_video(output_path, duration)

if __name__ == "__main__":
    # Test
    output_path = Path("saas/cache/crewai_animations/better_mock_video.mp4")
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    create_better_mock_video(
        "Un petit chat découvre un jardin magique",
        10,
        output_path
    )
    
    print(f"🎥 Vidéo mock améliorée: {output_path}")
    print(f"📐 Taille finale: {output_path.stat().st_size} bytes")
