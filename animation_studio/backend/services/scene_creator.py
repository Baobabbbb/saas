import json
import math
from typing import List
from openai import AsyncOpenAI
from config import config
from models.schemas import StoryIdea, Scene

class SceneCreator:
    """Service de cr√©ation de sc√®nes d√©taill√©es pour l'animation"""
    
    def __init__(self):
        self.client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)
    
    def calculate_scene_distribution(self, total_duration: int) -> List[int]:
        """
        Calcule la distribution optimale des sc√®nes pour Wan 2.5
        Wan 2.5 limite: clips de 5s ou 10s uniquement
        """
        return config.get_clip_durations(total_duration)

    def create_scene_system_prompt(self) -> str:
        """Prompt syst√®me optimis√© pour Wan 2.5 avec coh√©rence narrative"""
        return f"""‚úÖ G√©n√©rateur de Sc√®nes pour Dessins Anim√©s Wan 2.5 (Alibaba)

R√¥le: Tu es un sc√©nariste expert en animations pour enfants qui cr√©e des sc√®nes coh√©rentes et narratives pour Wan 2.5, le mod√®le de g√©n√©ration vid√©o d'Alibaba.

üéØ OBJECTIF PRINCIPAL: COH√âRENCE NARRATIVE
- Chaque sc√®ne doit s'encha√Æner naturellement avec la pr√©c√©dente
- Les personnages doivent √™tre reconnaissables d'une sc√®ne √† l'autre
- L'environnement doit rester coh√©rent tout au long de l'histoire
- L'histoire doit avoir un d√©but, un milieu et une fin clairs

üé® STYLE WAN 2.5 OPTIMIS√â:
- Style: {config.WAN25_PROMPT_STYLE}
- Format: clips de 10 secondes maximum
- Audio: int√©gr√© automatiquement (lip-sync et effets sonores)
- R√©solution: HD 720p/1080p
- Public: enfants de 3-8 ans

üìù √âL√âMENTS OBLIGATOIRES PAR SC√àNE:
1. PERSONNAGES: D√©crire clairement les personnages (apparence, v√™tements, expressions)
2. ACTION: Mouvement ou action pr√©cise en cours
3. ENVIRONNEMENT: D√©cor d√©taill√© et coh√©rent
4. CAM√âRA: Angle et mouvement cin√©matographique
5. √âMOTION: √âtat √©motionnel des personnages
6. CONTINUIT√â: R√©f√©rence √† la sc√®ne pr√©c√©dente pour encha√Ænement fluide

üé¨ STRUCTURE NARRATIVE (adapt√©e √† la dur√©e):
- D√âBUT (1-2 premi√®res sc√®nes): Introduction du personnage et du contexte
- MILIEU (sc√®nes centrales): D√©veloppement de l'action, probl√®me ou d√©couverte
- FIN (2 derni√®res sc√®nes): R√©solution positive et conclusion satisfaisante

üö´ √Ä √âVITER ABSOLUMENT:
- Personnages qui changent d'apparence entre les sc√®nes
- Environnements incoh√©rents (ex: for√™t ‚Üí d√©sert sans transition)
- Actions statiques ou personnages immobiles
- Sc√®nes sans lien narratif avec les autres
- Violence, peur, contenu inappropri√© pour enfants

‚úÖ BONNES PRATIQUES WAN 2.5:
- Utiliser des descriptions visuelles pr√©cises
- Mentionner les couleurs vives et contrast√©es
- D√©crire les expressions faciales des personnages
- Inclure des mouvements fluides et naturels
- Cr√©er des transitions logiques entre sc√®nes

FORMAT DE SORTIE:
json
{{
  "Idea": "L'id√©e principale de l'histoire",
  "Environment": "L'environnement g√©n√©ral coh√©rent",
  "Sound": "Description audio globale",
  "Scene 1": "Description d√©taill√©e avec personnages, action, environnement",
  "Scene 2": "Suite logique avec continuit√© visuelle et narrative",
  "Scene N": "Conclusion satisfaisante de l'histoire"
}}"""

    async def create_scenes_from_idea(self, story_idea: StoryIdea, duration: int) -> List[Scene]:
        """Cr√©e des sc√®nes d√©taill√©es √† partir d'une id√©e d'histoire"""
        
        scene_durations = self.calculate_scene_distribution(duration)
        num_scenes = len(scene_durations)
        
        system_prompt = self.create_scene_system_prompt()
        
        user_prompt = f"""Cr√©e {num_scenes} sc√®nes cin√©matographiques d√©taill√©es bas√©es sur cette id√©e d'histoire:

ID√âE: {story_idea.idea}
ENVIRONNEMENT: {story_idea.environment}
SON: {story_idea.sound}
DUR√âE TOTALE: {duration} secondes
DUR√âES DES SC√àNES: {scene_durations} secondes chacune

L'histoire doit √™tre divis√©e en {num_scenes} sc√®nes coh√©rentes qui racontent l'histoire compl√®te:
- D√©but engageant (sc√®nes 1-2)
- D√©veloppement/action (sc√®nes milieu) 
- Conclusion satisfaisante (derni√®res sc√®nes)

Chaque sc√®ne doit:
- √ätre optimis√©e pour Wan 2.5 (Alibaba) avec coh√©rence visuelle
- Maintenir les M√äMES personnages reconnaissables tout au long
- Garder le M√äME environnement coh√©rent (pas de changements brusques)
- Inclure mouvements fluides et expressions faciales
- S'encha√Æner naturellement avec la sc√®ne pr√©c√©dente
- Dur√©e: exactement {scene_durations} secondes par sc√®ne
- Public: enfants 3-8 ans, contenu joyeux et positif

IMPORTANT COH√âRENCE:
- Scene 1: Introduction claire du/des personnage(s) principal(aux) avec description pr√©cise
- Sc√®nes suivantes: R√âUTILISER ces m√™mes personnages, ne PAS en cr√©er de nouveaux
- Environnement: Rester dans le m√™me lieu ou faire des transitions logiques
- Continuit√©: Chaque sc√®ne continue l'histoire de la pr√©c√©dente

Respecte exactement le format JSON demand√© avec Scene 1, Scene 2, etc."""

        try:
            response = await self.client.chat.completions.create(
                model=config.TEXT_MODEL,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.8,  # Cr√©ativit√© contr√¥l√©e
                max_tokens=2000
            )
            
            # Parser la r√©ponse JSON
            content = response.choices[0].message.content.strip()
            
            # Nettoyer le JSON
            if content.startswith("```json"):
                content = content[7:]
            if content.endswith("```"):
                content = content[:-3]
            
            scenes_data = json.loads(content)
            
            # Extraire les sc√®nes
            scenes = []
            for i in range(num_scenes):
                scene_key = f"Scene {i + 1}"
                if scene_key in scenes_data:
                    # Coercer la description en texte si l'IA renvoie un objet
                    raw_value = scenes_data[scene_key]
                    description_text = self._coerce_scene_text(raw_value)

                    # Cr√©er le prompt optimis√© pour Wan 2.5
                    optimized_prompt = self.optimize_prompt_for_wan25(
                        description_text,
                        story_idea,
                        i + 1
                    )
                    
                    # Extraire personnages et actions pour la sc√®ne
                    characters, action, environment = self._parse_scene_elements(description_text, story_idea)
                    
                    scene = Scene(
                        scene_number=i + 1,
                        description=description_text,
                        duration=scene_durations[i],
                        prompt=optimized_prompt,
                        characters=characters,
                        action=action,
                        environment=environment,
                        audio_description=story_idea.sound
                    )
                    scenes.append(scene)
            
            return scenes
            
        except json.JSONDecodeError as e:
            # Fallback avec sc√®nes g√©n√©riques
            return self.create_fallback_scenes(story_idea, scene_durations)
        
        except Exception as e:
            raise Exception(f"Erreur lors de la cr√©ation des sc√®nes: {str(e)}")

    def _coerce_scene_text(self, value) -> str:
        """Transforme une valeur de sc√®ne (str ou dict) en description texte exploitable."""
        if isinstance(value, str):
            return value.strip()
        if isinstance(value, dict):
            # Chercher un champ descriptif fr√©quent
            for key in ["Description", "description", "scene", "text", "content", "prompt"]:
                v = value.get(key)
                if isinstance(v, str) and v.strip():
                    return v.strip()
            # Sinon concat√©ner les valeurs textuelles
            parts = [str(v).strip() for v in value.values() if isinstance(v, str) and v.strip()]
            if parts:
                return ". ".join(parts)
            # Dernier recours: JSON brut
            return json.dumps(value, ensure_ascii=False)
        # Types inattendus
        return str(value)

    def optimize_prompt_for_wan25(self, scene_description: str, story_idea: StoryIdea, scene_number: int) -> str:
        """
        Optimise le prompt pour Wan 2.5 avec coh√©rence narrative maximale
        Format inspir√© de zseedance.json mais adapt√© pour Wan 2.5
        """
        
        # Style Wan 2.5 optimis√©
        style_prefix = f"STYLE: {config.WAN25_PROMPT_STYLE}"
        
        # Th√®me g√©n√©ral pour coh√©rence
        theme = f"STORY THEME: {story_idea.idea}"
        
        # Description de la sc√®ne avec num√©ro pour continuit√©
        scene_info = f"SCENE {scene_number}: {scene_description}"
        
        # Environnement coh√©rent
        environment_info = f"ENVIRONMENT: {story_idea.environment}, consistent visual style"
        
        # Audio sync hint pour Wan 2.5
        audio_hint = f"AUDIO: {story_idea.sound}, synchronized sound effects"
        
        # Continuit√© visuelle
        continuity = "CONTINUITY: maintain same characters and setting from previous scenes"
        
        # Assemblage optimis√© pour Wan 2.5
        final_prompt = f"{style_prefix} | {theme} | {scene_info} | {environment_info} | {audio_hint} | {continuity}"
        
        return final_prompt
    
    def _parse_scene_elements(self, scene_description: str, story_idea: StoryIdea) -> tuple:
        """
        Extrait les √©l√©ments cl√©s de la sc√®ne pour coh√©rence
        Returns: (characters, action, environment)
        """
        # Personnages par d√©faut bas√©s sur l'id√©e
        characters = "animated character from the story"
        
        # Action extraite de la description
        action = scene_description[:100] if len(scene_description) > 100 else scene_description
        
        # Environnement de l'histoire
        environment = story_idea.environment
        
        return characters, action, environment

    def create_fallback_scenes(self, story_idea: StoryIdea, scene_durations: List[int]) -> List[Scene]:
        """Cr√©e des sc√®nes de fallback en cas d'erreur"""
        scenes = []
        
        # Sc√®nes g√©n√©riques bas√©es sur l'id√©e
        scene_templates = [
            "Introduction du personnage principal dans l'environnement color√©",
            "Le personnage d√©couvre quelque chose d'int√©ressant et s'approche",
            "Action principale de l'histoire avec mouvements dynamiques",
            "R√©solution positive avec apprentissage ou d√©couverte",
            "Conclusion joyeuse avec personnage satisfait"
        ]
        
        for i, duration in enumerate(scene_durations):
            template = scene_templates[min(i, len(scene_templates) - 1)]
            
            scene = Scene(
                scene_number=i + 1,
                description=f"{template} - {story_idea.idea}",
                duration=duration,
                prompt=self.optimize_prompt_for_wan25(
                    template,
                    story_idea,
                    i + 1
                ),
                characters="main character",
                action=template,
                environment=story_idea.environment,
                audio_description=story_idea.sound
            )
            scenes.append(scene)
        
        return scenes

    def extract_scenes_from_text(self, text: str) -> List[str]:
        """Extrait les descriptions de sc√®nes d'un texte (m√©thode utilitaire du workflow n8n)"""
        scenes = []
        
        # Recherche de patterns "Scene X:" ou "Sc√®ne X:"
        import re
        scene_pattern = r'(?:Scene|Sc√®ne)\s*(\d+):\s*(.+?)(?=(?:Scene|Sc√®ne)\s*\d+:|$)'
        matches = re.findall(scene_pattern, text, re.DOTALL | re.IGNORECASE)
        
        for match in matches:
            scene_text = match[1].strip()
            if scene_text:
                scenes.append(scene_text)
        
        return scenes 