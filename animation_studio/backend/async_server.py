from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
import asyncio
import uuid
import random
import time

app = FastAPI(title="Animation Studio - Async Generation API")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Models pour les requ√™tes
class AnimationRequest(BaseModel):
    theme: str
    duration: int

class GenerationStatus(BaseModel):
    animation_id: str
    status: str
    progress: int
    current_step: str
    result: dict = None
    error: str = None

# Stockage en m√©moire des t√¢ches de g√©n√©ration
generation_tasks = {}

@app.get("/health")
async def health():
    return {"status": "healthy", "ai_services": "connected"}

@app.get("/themes")
async def get_themes():
    return {
        "themes": {
            "space": {
                "name": "Espace", 
                "description": "Aventures spatiales extraordinaires",
                "icon": "üöÄ",
                "elements": "Fus√©es, √©toiles, plan√®tes magiques"
            },
            "nature": {
                "name": "Nature", 
                "description": "For√™ts enchant√©es et animaux merveilleux",
                "icon": "üå≤",
                "elements": "Arbres, fleurs, rivi√®res cristallines"
            },
            "adventure": {
                "name": "Aventure", 
                "description": "Qu√™tes h√©ro√Øques et tr√©sors cach√©s",
                "icon": "‚öîÔ∏è",
                "elements": "H√©ros, tr√©sors, ch√¢teaux myst√©rieux"
            },
            "animals": {
                "name": "Animaux", 
                "description": "Petites cr√©atures adorables et rigolotes",
                "icon": "ü¶ä",
                "elements": "Animaux mignons, jeux, amiti√©"
            },
            "magic": {
                "name": "Magie", 
                "description": "Monde fantastique rempli de merveilles",
                "icon": "‚ú®",
                "elements": "Sorciers, potions, sorts magiques"
            },
            "friendship": {
                "name": "Amiti√©", 
                "description": "Belles histoires d'amiti√© et de partage",
                "icon": "üíñ",
                "elements": "Amis, partage, moments joyeux"
            }
        },
        "durations": [30, 60, 120, 180, 240, 300],
        "default_duration": 30
    }

@app.post("/generate")
async def generate_animation(request: AnimationRequest):
    """D√©marrer la g√©n√©ration d'une animation avec progression r√©aliste"""
    
    animation_id = str(uuid.uuid4())
    
    # Initialiser le status
    generation_tasks[animation_id] = GenerationStatus(
        animation_id=animation_id,
        status="starting",
        progress=0,
        current_step="üöÄ Initialisation du syst√®me d'IA..."
    )
    
    # Lancer la g√©n√©ration en arri√®re-plan
    asyncio.create_task(simulate_real_generation(animation_id, request.theme, request.duration))
    
    return {"animation_id": animation_id, "status": "started"}

@app.get("/status/{animation_id}")
async def get_generation_status(animation_id: str):
    """Obtenir le statut de g√©n√©ration d'une animation"""
    if animation_id not in generation_tasks:
        raise HTTPException(status_code=404, detail="Animation ID non trouv√©")
    
    return generation_tasks[animation_id]

async def simulate_real_generation(animation_id: str, theme: str, duration: int):
    """Simulation r√©aliste du processus de g√©n√©ration avec vraie temporisation"""
    try:
        task = generation_tasks[animation_id]
        
        # √âtape 1: G√©n√©ration de l'id√©e (simulation OpenAI)
        task.current_step = "üß† G√©n√©ration de l'id√©e cr√©ative avec OpenAI..."
        task.progress = 5
        await asyncio.sleep(3)  # Simulation temps r√©el OpenAI
        
        task.current_step = "üìù Analyse du th√®me et cr√©ation de l'histoire..."
        task.progress = 15
        await asyncio.sleep(2)
        
        # √âtape 2: Cr√©ation des sc√®nes
        task.current_step = "üé¨ D√©composition en sc√®nes cin√©matographiques..."
        task.progress = 25
        await asyncio.sleep(3)
        
        task.current_step = "üé≠ Optimisation des transitions et dialogues..."
        task.progress = 35
        await asyncio.sleep(2)
        
        # √âtape 3: G√©n√©ration des clips vid√©o (simulation Wavespeed AI)
        scene_count = max(2, duration // 15)  # Plus de sc√®nes pour les vid√©os longues
        for i in range(scene_count):
            task.current_step = f"üé• G√©n√©ration du clip {i+1}/{scene_count} avec Wavespeed AI..."
            task.progress = 35 + (i * 25 // scene_count)
            await asyncio.sleep(4 + random.randint(1, 3))  # Simulation temps r√©el de g√©n√©ration vid√©o
        
        # √âtape 4: G√©n√©ration de l'audio (simulation FAL AI)
        task.current_step = "üéµ Cr√©ation de la musique de fond avec FAL AI..."
        task.progress = 70
        await asyncio.sleep(5)
        
        task.current_step = "üîä G√©n√©ration des effets sonores..."
        task.progress = 80
        await asyncio.sleep(3)
        
        # √âtape 5: Assemblage final (simulation FFmpeg)
        task.current_step = "üéûÔ∏è Assemblage des clips avec FFmpeg..."
        task.progress = 90
        await asyncio.sleep(4)
        
        task.current_step = "üé® Finalisation et optimisation..."
        task.progress = 95
        await asyncio.sleep(2)
        
        task.current_step = "üì§ Upload et g√©n√©ration du lien de t√©l√©chargement..."
        task.progress = 98
        await asyncio.sleep(2)
        
        # Finalisation avec vraies donn√©es
        themes_info = {
            "space": {"story": "Un petit astronaute d√©couvre une plan√®te magique peupl√©e d'aliens sympathiques", "emoji": "üöÄ", "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"},
            "nature": {"story": "Une petite graine devient un arbre g√©ant qui prot√®ge la for√™t", "emoji": "üå≤", "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4"},
            "adventure": {"story": "Un jeune h√©ros part √† la recherche du tr√©sor perdu dans un ch√¢teau enchant√©", "emoji": "‚öîÔ∏è", "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4"},
            "animals": {"story": "Des animaux de la for√™t organisent une grande f√™te d'amiti√©", "emoji": "ü¶ä", "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/WeAreGoingOnBullhunt.mp4"},
            "magic": {"story": "Un apprenti sorcier apprend ses premiers sorts magiques", "emoji": "‚ú®", "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4"},
            "friendship": {"story": "Deux amis diff√©rents apprennent l'importance de l'entraide", "emoji": "üíñ", "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"}
        }
        
        theme_info = themes_info.get(theme, themes_info["space"])
        
        task.current_step = "‚ú® Animation termin√©e avec succ√®s !"
        task.progress = 100
        task.status = "completed"
        task.result = {
            "final_video_url": theme_info["video"],
            "story_idea": {
                "idea": theme_info["story"],
                "caption": f"Animation {theme} cr√©√©e avec l'IA ! #animation #{theme}",
                "environment": f"Un univers color√© de {theme}",
                "sound": "Musique originale et effets sonores"
            },
            "scenes_count": scene_count,
            "clips_count": scene_count,
            "generation_time": 45 + random.randint(10, 30),
            "theme": theme,
            "duration": duration,
            "ai_models_used": ["OpenAI GPT-4", "Wavespeed SeedANce v1 Pro", "FAL mmaudio-v2", "FFmpeg Compose"]
        }
        
        print(f"‚úÖ Animation {animation_id} g√©n√©r√©e avec succ√®s - Th√®me: {theme}, Dur√©e: {duration}s")
        
    except Exception as e:
        task.status = "error"
        task.error = f"Erreur lors de la g√©n√©ration: {str(e)}"
        task.current_step = "‚ùå Erreur de g√©n√©ration"
        print(f"‚ùå Erreur g√©n√©ration {animation_id}: {e}")

@app.post("/generate-quick")
async def generate_quick_demo(theme: str, duration: int):
    """Version de d√©monstration rapide (pour les tests)"""
    return {
        "animation_id": "demo-123",
        "status": "completed",
        "final_video_url": "https://sample-videos.com/zip/10/mp4/SampleVideo_360x240_5mb.mp4",
        "processing_time": 60,
        "story_idea": {
            "idea": f"Une aventure magique dans l'univers {theme}",
            "caption": f"Animation {theme} cr√©√©e avec l'IA ! #animation #{theme}",
            "environment": f"Un monde color√© de {theme}",
            "sound": "Musique douce et effets sonores m√©lodieux"
        }
    }

if __name__ == "__main__":
    print("üöÄ Animation Studio - G√©n√©ration Asynchrone R√©aliste")
    print("ü§ñ Simulation: OpenAI + Wavespeed + FAL + FFmpeg")
    print("üé¨ Pr√™t √† g√©n√©rer des animations sur le port 8009...")
    uvicorn.run(app, host="0.0.0.0", port=8009) 