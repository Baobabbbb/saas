#!/usr/bin/env python3
"""
Serveur de VRAIE g√©n√©ration UNIQUEMENT
AUCUN fallback - AUCUNE vid√©o pr√©cr√©√©e
SEULEMENT de vraies g√©n√©rations avec vos APIs
"""

import asyncio
import time
import uuid
import os
import aiohttp
import json
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import uvicorn

# Charger le fichier .env
load_dotenv()

# Configuration OBLIGATOIRE depuis .env
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WAVESPEED_API_KEY = os.getenv("WAVESPEED_API_KEY") 
TEXT_MODEL = os.getenv("TEXT_MODEL", "gpt-4o-mini")
CARTOON_STYLE = os.getenv("CARTOON_STYLE", "2D cartoon animation, Disney style")

print(f"üîë V√âRIFICATION DES APIS OBLIGATOIRES:")
print(f"üìù OpenAI: {'‚úÖ PR√âSENTE' if OPENAI_API_KEY else '‚ùå MANQUANTE'}")
print(f"üé• Wavespeed: {'‚úÖ PR√âSENTE' if WAVESPEED_API_KEY else '‚ùå MANQUANTE'}")

# ARR√äT si pas de cl√©s
if not OPENAI_API_KEY or not WAVESPEED_API_KEY:
    print("üí• ERREUR FATALE: Cl√©s API manquantes!")
    print("üîß V√©rifiez votre fichier .env")
    exit(1)

print("‚úÖ TOUTES LES APIS SONT PR√äTES POUR LA VRAIE G√âN√âRATION!")

# FastAPI app
app = FastAPI(title="Animation Studio - VRAIE G√âN√âRATION UNIQUEMENT")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Storage des t√¢ches
generation_tasks = {}

@app.get("/health")
async def health():
    return {
        "status": "healthy",
        "real_generation_only": True,
        "no_fallback": True,
        "apis_ready": True
    }

@app.get("/themes")
async def get_themes():
    return {
        "themes": [
            {
                "id": "space",
                "name": "Espace",
                "icon": "üöÄ",
                "description": "Aventures cosmiques et exploration spatiale"
            },
            {
                "id": "ocean",
                "name": "Oc√©an", 
                "icon": "üåä",
                "description": "Monde sous-marin et cr√©atures marines"
            },
            {
                "id": "forest",
                "name": "For√™t",
                "icon": "üå≤",
                "description": "Animaux de la for√™t et nature magique"
            },
            {
                "id": "magic",
                "name": "Magie",
                "icon": "‚ú®",
                "description": "Monde fantastique avec f√©es et sorciers"
            }
        ]
    }

@app.post("/generate")
async def generate_animation(request: dict):
    """VRAIE g√©n√©ration UNIQUEMENT - AUCUN fallback autoris√©"""
    
    theme = request.get("theme", "space")
    duration = request.get("duration", 30)
    
    animation_id = str(uuid.uuid4())
    
    print(f"üé¨ D√âMARRAGE VRAIE G√âN√âRATION: {animation_id}")
    print(f"üéØ Th√®me: {theme} | Dur√©e: {duration}s")
    print(f"üö´ AUCUN FALLBACK - VRAIE G√âN√âRATION OBLIGATOIRE")
    
    # Initialiser le statut
    generation_tasks[animation_id] = {
        "animation_id": animation_id,
        "status": "starting",
        "progress": 0,
        "current_step": "üöÄ Initialisation VRAIE g√©n√©ration...",
        "result": None,
        "error": None,
        "theme": theme,
        "duration": duration,
        "real_generation_only": True
    }
    
    # Lancer la VRAIE g√©n√©ration
    asyncio.create_task(pure_ai_generation(animation_id, theme, duration))
    
    return {"animation_id": animation_id, "status": "started", "real_generation": True}

@app.get("/status/{animation_id}")
async def get_status(animation_id: str):
    """R√©cup√©rer le statut d'une VRAIE g√©n√©ration"""
    
    if animation_id not in generation_tasks:
        raise HTTPException(status_code=404, detail="Animation non trouv√©e")
    
    task = generation_tasks[animation_id]
    return {
        "animation_id": animation_id,
        "status": task["status"],
        "progress": task["progress"],
        "current_step": task["current_step"],
        "result": task["result"],
        "error": task["error"],
        "real_generation": True
    }

async def pure_ai_generation(animation_id: str, theme: str, duration: int):
    """PURE g√©n√©ration AI - AUCUN fallback"""
    
    task = generation_tasks[animation_id]
    
    try:
        print(f"üß† √âTAPE 1: G√©n√©ration histoire avec OpenAI...")
        task["current_step"] = "üß† Cr√©ation histoire avec OpenAI GPT-4..."
        task["progress"] = 10
        task["status"] = "generating"
        
        # VRAIE g√©n√©ration histoire avec OpenAI
        story = await generate_story_with_openai_real(theme, duration)
        print(f"‚úÖ Histoire g√©n√©r√©e: {story['title']}")
        
        print(f"üé• √âTAPE 2: G√©n√©ration vid√©o avec Wavespeed...")
        task["current_step"] = "üé• G√©n√©ration vid√©o avec Wavespeed SeedANce..."
        task["progress"] = 50
        
        # VRAIE g√©n√©ration vid√©o avec Wavespeed
        video_url = await generate_video_with_wavespeed_real(story, theme)
        print(f"‚úÖ VRAIE vid√©o g√©n√©r√©e: {video_url}")
        
        # Finalisation
        task["current_step"] = "‚úÖ VRAIE animation termin√©e!"
        task["progress"] = 100
        task["status"] = "completed"
        task["result"] = {
            "final_video_url": video_url,
            "story": story,
            "theme": theme,
            "duration": duration,
            "generated_with_real_ai": True,
            "no_fallback_used": True
        }
        
        print(f"üéâ VRAIE ANIMATION {animation_id} TERMIN√âE!")
        
    except Exception as e:
        print(f"üí• ERREUR VRAIE G√âN√âRATION: {e}")
        task["status"] = "error"
        task["error"] = f"ERREUR g√©n√©ration r√©elle: {str(e)}"
        task["current_step"] = "‚ùå √âchec g√©n√©ration r√©elle"

async def generate_story_with_openai_real(theme: str, duration: int):
    """VRAIE g√©n√©ration histoire avec OpenAI API"""
    
    theme_prompts = {
        "space": "aventure spatiale avec des astronautes enfants et des plan√®tes color√©es",
        "ocean": "exploration sous-marine avec des poissons magiques et des sir√®nes",
        "forest": "aventure dans une for√™t enchant√©e avec des animaux parlants",
        "magic": "monde magique avec des f√©es, des licornes et de la magie"
    }
    
    prompt = f"""Cr√©e une histoire courte pour enfants de {duration} secondes sur le th√®me: {theme_prompts.get(theme, theme)}.

L'histoire doit √™tre:
- Parfaite pour un dessin anim√© Disney
- Positive et √©ducative
- Adapt√©e aux enfants (3-8 ans)

R√©ponds UNIQUEMENT avec ce format JSON:
{{
    "title": "Titre de l'histoire",
    "main_character": "Nom du personnage principal",
    "story_summary": "R√©sum√© en 2 phrases",
    "visual_scene": "Description visuelle d√©taill√©e pour animation"
}}"""
    
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    
    data = {
        "model": TEXT_MODEL,
        "messages": [
            {"role": "system", "content": "Tu es un cr√©ateur d'histoires Disney. R√©ponds UNIQUEMENT en JSON valide."},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 300,
        "temperature": 0.8
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post("https://api.openai.com/v1/chat/completions", 
                               headers=headers, json=data) as response:
            if response.status == 200:
                result = await response.json()
                content = result["choices"][0]["message"]["content"]
                
                try:
                    # Parser le JSON de OpenAI
                    import re
                    json_match = re.search(r'\{.*\}', content, re.DOTALL)
                    if json_match:
                        story_data = json.loads(json_match.group())
                        print(f"üìñ Histoire OpenAI: {story_data.get('title', 'Sans titre')}")
                        return story_data
                except Exception as parse_error:
                    print(f"‚ö†Ô∏è Erreur parsing OpenAI: {parse_error}")
                
                # Si parsing √©choue, structure manuelle
                return {
                    "title": f"Aventure Magique {theme.title()}",
                    "main_character": "H√©ros Courageux",
                    "story_summary": f"Une aventure merveilleuse dans le monde {theme}",
                    "visual_scene": f"{CARTOON_STYLE}, enfant h√©ros dans un monde {theme}, color√©, magique"
                }
            else:
                raise Exception(f"Erreur OpenAI: {response.status}")

async def generate_video_with_wavespeed_real(story: dict, theme: str):
    """VRAIE g√©n√©ration vid√©o avec Wavespeed - AUCUN fallback"""
    
    # Cr√©er prompt optimis√© pour SeedANce
    visual_scene = story.get("visual_scene", f"Animation {theme}")
    video_prompt = f"{visual_scene}, {CARTOON_STYLE}, high quality, smooth animation, colorful, children friendly"
    
    headers = {
        "Authorization": f"Bearer {WAVESPEED_API_KEY}",
        "Content-Type": "application/json"
    }
    
    # Configuration exacte selon zseedance.json
    data = {
        "aspect_ratio": "9:16",
        "duration": 10,
        "prompt": video_prompt[:500]  # Limiter la taille du prompt
    }
    
    print(f"üåê APPEL WAVESPEED API...")
    print(f"üìù Prompt: {video_prompt[:100]}...")
    
    async with aiohttp.ClientSession() as session:
        try:
            # Appel API Wavespeed SeedANce
            async with session.post(
                "https://api.wavespeed.ai/api/v3/bytedance/seedance-v1-pro-t2v-480p",
                headers=headers, 
                json=data,
                timeout=aiohttp.ClientTimeout(total=60)
            ) as response:
                
                response_text = await response.text()
                print(f"üìä Wavespeed Response: {response.status}")
                print(f"üìÑ Response: {response_text[:200]}...")
                
                if response.status == 200:
                    result = await response.json()
                    prediction_id = result.get("data", {}).get("id") or result.get("id")
                    
                    if prediction_id:
                        print(f"üéØ ID de pr√©diction Wavespeed: {prediction_id}")
                        
                        # Polling pour r√©cup√©rer le r√©sultat
                        video_url = await wait_for_wavespeed_result(session, prediction_id, headers)
                        return video_url
                    else:
                        raise Exception("Pas d'ID de pr√©diction Wavespeed")
                else:
                    raise Exception(f"Erreur Wavespeed {response.status}: {response_text}")
                    
        except Exception as e:
            print(f"üí• ERREUR APPEL WAVESPEED: {e}")
            raise Exception(f"√âchec g√©n√©ration Wavespeed: {e}")

async def wait_for_wavespeed_result(session, prediction_id: str, headers: dict):
    """Attendre le r√©sultat de Wavespeed"""
    
    print(f"‚è≥ Attente r√©sultat Wavespeed {prediction_id}...")
    
    for attempt in range(60):  # 5 minutes max
        await asyncio.sleep(5)
        
        try:
            async with session.get(
                f"https://api.wavespeed.ai/api/v3/predictions/{prediction_id}/result",
                headers=headers,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    status = result.get("status")
                    
                    print(f"üìà Wavespeed Status {attempt}: {status}")
                    
                    if status == "completed":
                        outputs = result.get("data", {}).get("outputs", [])
                        if outputs and outputs[0]:
                            video_url = outputs[0]
                            print(f"üé¨ VRAIE VID√âO G√âN√âR√âE: {video_url}")
                            return video_url
                        else:
                            raise Exception("Pas d'output vid√©o dans la r√©ponse")
                            
                    elif status == "failed":
                        error_msg = result.get("error", "G√©n√©ration √©chou√©e")
                        raise Exception(f"G√©n√©ration Wavespeed √©chou√©e: {error_msg}")
                        
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur check status {attempt}: {e}")
            continue
    
    raise Exception("Timeout Wavespeed - g√©n√©ration trop longue")

if __name__ == "__main__":
    print("üé¨ ANIMATION STUDIO - VRAIE G√âN√âRATION UNIQUEMENT")
    print("üö´ AUCUN FALLBACK - AUCUNE VID√âO PR√âCR√â√âE")
    print("‚úÖ UNIQUEMENT VOS APIS R√âELLES")
    print("üìç URL: http://localhost:8012")
    
    uvicorn.run(app, host="0.0.0.0", port=8012, log_level="info") 