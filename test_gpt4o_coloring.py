"""
Script de test pour le nouveau syst√®me de coloriages GPT-4o-mini + DALL-E 3
"""
import asyncio
import os
from pathlib import Path
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Importer le service
import sys
sys.path.insert(0, str(Path(__file__).parent / "saas"))
from services.coloring_generator_gpt4o import ColoringGeneratorGPT4o


async def test_theme_generation():
    """Test de g√©n√©ration par th√®me"""
    print("\n" + "="*60)
    print("üé® TEST 1 : G√©n√©ration par th√®me")
    print("="*60)
    
    generator = ColoringGeneratorGPT4o()
    
    # Test avec le th√®me "dinosaures"
    print("\nüìù G√©n√©ration d'un coloriage sur le th√®me 'dinosaures'...")
    result = await generator.generate_coloring_from_theme("dinosaures")
    
    if result.get("success"):
        print("‚úÖ G√©n√©ration r√©ussie !")
        print(f"   - Th√®me : {result.get('theme')}")
        print(f"   - Images : {result.get('total_images')}")
        print(f"   - URL : {result['images'][0]['image_url']}")
        print(f"   - Mod√®le : {result['metadata']['model']}")
    else:
        print(f"‚ùå √âchec : {result.get('error')}")
    
    return result.get("success")


async def test_photo_conversion():
    """Test de conversion de photo (si une photo de test existe)"""
    print("\n" + "="*60)
    print("üì∏ TEST 2 : Conversion de photo")
    print("="*60)
    
    # Chercher une photo de test
    test_photos = [
        Path("static/uploads/coloring").glob("*.jpg"),
        Path("static/uploads/coloring").glob("*.png"),
        Path("static/uploads/coloring").glob("*.jpeg"),
    ]
    
    photo_path = None
    for pattern in test_photos:
        for photo in pattern:
            photo_path = photo
            break
        if photo_path:
            break
    
    if not photo_path:
        print("‚ö†Ô∏è Aucune photo de test trouv√©e dans static/uploads/coloring/")
        print("   Vous pouvez tester manuellement en uploadant une photo via l'interface web")
        return True  # Pas d'√©chec, juste pas de test
    
    print(f"\nüìù Conversion de la photo : {photo_path.name}")
    
    generator = ColoringGeneratorGPT4o()
    result = await generator.generate_coloring_from_photo(str(photo_path))
    
    if result.get("success"):
        print("‚úÖ Conversion r√©ussie !")
        print(f"   - Photo source : {result.get('source_photo')}")
        print(f"   - Description : {result.get('description')[:100]}...")
        print(f"   - Images : {result.get('total_images')}")
        print(f"   - URL : {result['images'][0]['image_url']}")
        print(f"   - Mod√®le : {result['metadata']['model']}")
    else:
        print(f"‚ùå √âchec : {result.get('error')}")
    
    return result.get("success")


async def test_api_keys():
    """Test de la configuration des cl√©s API"""
    print("\n" + "="*60)
    print("üîë TEST 0 : V√©rification des cl√©s API")
    print("="*60)
    
    openai_key = os.getenv("OPENAI_API_KEY")
    base_url = os.getenv("BASE_URL")
    
    if not openai_key:
        print("‚ùå OPENAI_API_KEY non trouv√©e dans .env")
        return False
    
    print(f"‚úÖ OPENAI_API_KEY : {openai_key[:15]}...")
    print(f"‚úÖ BASE_URL : {base_url or 'https://herbbie.com (d√©faut)'}")
    
    return True


async def main():
    """Fonction principale de test"""
    print("\n" + "="*60)
    print("üöÄ TEST DU SYST√àME DE COLORIAGES GPT-4o-mini")
    print("="*60)
    
    # Test 0 : Cl√©s API
    if not await test_api_keys():
        print("\n‚ùå Tests interrompus : cl√©s API manquantes")
        return
    
    # Test 1 : G√©n√©ration par th√®me
    test1_success = await test_theme_generation()
    
    # Test 2 : Conversion de photo
    test2_success = await test_photo_conversion()
    
    # R√©sum√©
    print("\n" + "="*60)
    print("üìä R√âSUM√â DES TESTS")
    print("="*60)
    print(f"Test 1 (Th√®me) : {'‚úÖ R√âUSSI' if test1_success else '‚ùå √âCHOU√â'}")
    print(f"Test 2 (Photo) : {'‚úÖ R√âUSSI' if test2_success else '‚ö†Ô∏è NON TEST√â'}")
    
    if test1_success:
        print("\nüéâ Le syst√®me de coloriages GPT-4o-mini fonctionne correctement !")
    else:
        print("\n‚ö†Ô∏è Des probl√®mes ont √©t√© d√©tect√©s. V√©rifiez les logs ci-dessus.")


if __name__ == "__main__":
    asyncio.run(main())
