from fastapi import FastAPI, HTTPException, UploadFile, File, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import Optional
from unidecode import unidecode
import traceback
import os
import json
import time
from fastapi import Form

from dotenv import load_dotenv
import openai
from openai import AsyncOpenAI

from schemas.animation import AnimationRequest, AnimationResponse, AnimationStatusResponse, AnimationStatus
from datetime import datetime
from services.tts import generate_speech
from services.stt import transcribe_audio
from services.runway_story import runway_story_service
from services.runway_gen4_new import runway_gen4_service
# from services.integrated_animation_service import integrated_animation_service  # Temporairement d√©sactiv√©
from services.coloring_generator import ColoringGenerator
from utils.translate import translate_text

# --- Chargement .env ---
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
TEXT_MODEL = os.getenv("TEXT_MODEL", "gpt-4o-mini")

app = FastAPI(title="API Dessins Anim√©s", version="1.0", description="API pour g√©n√©rer des dessins anim√©s avec Runway Gen-4 Turbo")
app.mount("/static", StaticFiles(directory="static"), name="static")

# CORS avec support UTF-8
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://localhost:5174", "http://localhost:5175", "http://localhost:5177"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware pour afficher les erreurs
@app.middleware("http")
async def log_exceptions(request: Request, call_next):
    try:
        return await call_next(request)
    except Exception:
        print("üî• Exception occurred during request:")
        traceback.print_exc()
        raise

# === ROUTE DE DIAGNOSTIC ===

@app.get("/diagnostic")
async def diagnostic():
    """Route de diagnostic pour v√©rifier la configuration des cl√©s API"""
    openai_key = os.getenv("OPENAI_API_KEY")
    stability_key = os.getenv("STABILITY_API_KEY")
    fal_key = os.getenv("FAL_API_KEY")
    
    return {
        "openai_configured": openai_key is not None and not openai_key.startswith("sk-votre"),
        "stability_configured": stability_key is not None and not stability_key.startswith("sk-votre"),
        "fal_configured": fal_key is not None and not fal_key.startswith("votre-cle"),
        "text_model": TEXT_MODEL,
        "openai_key_preview": f"{openai_key[:10]}..." if openai_key else "Non configur√©e",
        "stability_key_preview": f"{stability_key[:10]}..." if stability_key else "Non configur√©e",
        "fal_key_preview": f"{fal_key[:10]}..." if fal_key else "Non configur√©e"
    }

# === ENDPOINTS VALID√âS ===

@app.post("/tts")
async def tts_endpoint(data: dict):
    try:
        text = data["text"]
        path = generate_speech(text)
        return {"audio_path": path}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/stt")
async def stt_endpoint(file: UploadFile = File(...)):
    try:
        temp_path = f"static/{file.filename}"
        with open(temp_path, "wb") as f:
            f.write(await file.read())
        transcription = transcribe_audio(temp_path)
        return {"transcription": transcription}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# --- Comptine ---
class RhymeRequest(BaseModel):
    rhyme_type: str
    custom_request: Optional[str] = None

@app.post("/generate_rhyme/")
async def generate_rhyme(request: RhymeRequest):
    try:
        # V√©rifier la cl√© API
        openai_key = os.getenv("OPENAI_API_KEY")
        if not openai_key or openai_key.startswith("sk-votre"):
            raise HTTPException(
                status_code=400, 
                detail="‚ùå Cl√© API OpenAI non configur√©e. Veuillez configurer OPENAI_API_KEY dans le fichier .env"
            )
        
        prompt = f"√âcris une comptine courte, joyeuse et rythm√©e pour enfants sur le th√®me : {request.rhyme_type}.\n"
        if request.custom_request:
            prompt += f"Demande sp√©cifique : {request.custom_request}\n"
        prompt += """La comptine doit √™tre en fran√ßais, adapt√©e aux enfants de 3 √† 8 ans, avec des rimes simples et un rythme enjou√©.

IMPORTANT : G√©n√®re aussi un titre court et attractif pour cette comptine (maximum 4-5 mots), qui plaira aux enfants de 3-8 ans. Le titre doit √™tre simple et joyeux.

Format de r√©ponse attendu :
TITRE: [titre de la comptine]
COMPTINE: [texte de la comptine]"""

        client = AsyncOpenAI(api_key=openai_key)
        
        response = await client.chat.completions.create(
            model=TEXT_MODEL,
            messages=[
                {"role": "system", "content": "Tu es un sp√©cialiste des comptines pour enfants. Tu √©cris des textes courts, amusants et √©ducatifs."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=300,
            temperature=0.8
        )
        
        content = response.choices[0].message.content.strip()
        
        # Extraire le titre et le contenu si le format est respect√©
        title = f"Comptine {request.rhyme_type}"  # Titre par d√©faut
        rhyme_content = content
        
        if "TITRE:" in content and "COMPTINE:" in content:
            try:
                lines = content.split('\n')
                for line in lines:
                    if line.startswith("TITRE:"):
                        title = line.replace("TITRE:", "").strip()
                        break
                
                # Extraire le contenu de la comptine
                comptine_start = content.find("COMPTINE:")
                if comptine_start != -1:
                    rhyme_content = content[comptine_start + 9:].strip()
            except:
                # En cas d'erreur, utiliser le contenu complet
                pass
        
        return {
            "title": title,
            "content": rhyme_content,
            "type": "rhyme"
        }
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration comptine: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors de la g√©n√©ration : {str(e)}")

# --- Histoire Audio ---
class AudioStoryRequest(BaseModel):
    story_type: str
    voice: Optional[str] = None
    custom_request: Optional[str] = None

@app.post("/generate_audio_story/")
async def generate_audio_story(request: AudioStoryRequest):
    try:
        # V√©rifier la cl√© API
        openai_key = os.getenv("OPENAI_API_KEY")
        if not openai_key or openai_key.startswith("sk-votre"):
            raise HTTPException(
                status_code=400, 
                detail="‚ùå Cl√© API OpenAI non configur√©e. Veuillez configurer OPENAI_API_KEY dans le fichier .env"
            )
        
        prompt = f"√âcris une histoire courte et captivante pour enfants sur le th√®me : {request.story_type}.\n"
        if request.custom_request:
            prompt += f"Demande sp√©cifique : {request.custom_request}\n"
        prompt += """L'histoire doit √™tre en fran√ßais, adapt√©e aux enfants de 4 √† 10 ans, avec une morale positive et des personnages attachants. Maximum 800 mots.

IMPORTANT : Commence par g√©n√©rer un titre court et attractif pour cette histoire (maximum 5-6 mots), qui captivera les enfants de 4-10 ans.

Format de r√©ponse OBLIGATOIRE :
TITRE: [titre de l'histoire]
HISTOIRE: [texte de l'histoire]

N'ajoute aucun titre dans le texte de l'histoire lui-m√™me, juste dans la partie TITRE."""

        client = AsyncOpenAI(api_key=openai_key)
        
        response = await client.chat.completions.create(
            model=TEXT_MODEL,
            messages=[
                {"role": "system", "content": "Tu es un conteur sp√©cialis√© dans les histoires pour enfants. Tu √©cris des histoires engageantes avec des valeurs positives."},
                {"role": "user", "content": prompt}
            ],            max_tokens=1000,
            temperature=0.7
        )
        
        content = response.choices[0].message.content.strip()
        
        # Extraire le titre et le contenu si le format est respect√©
        title = f"Histoire {request.story_type}"  # Titre par d√©faut
        story_content = content
        
        if "TITRE:" in content and "HISTOIRE:" in content:
            try:
                lines = content.split('\n')
                for line in lines:
                    if line.startswith("TITRE:"):
                        title = line.replace("TITRE:", "").strip()
                        break
                
                # Extraire le contenu de l'histoire
                histoire_start = content.find("HISTOIRE:")
                if histoire_start != -1:
                    story_content = content[histoire_start + 9:].strip()
            except:
                # En cas d'erreur, utiliser le contenu complet
                pass
        
        # G√©n√©ration de l'audio si une voix est sp√©cifi√©e
        audio_path = None
        if request.voice:
            try:
                # Utiliser le contenu de l'histoire pour l'audio, pas le titre
                audio_path = generate_speech(story_content, voice=request.voice)
            except Exception as audio_error:
                print(f"‚ö†Ô∏è Erreur g√©n√©ration audio: {audio_error}")
        
        return {
            "title": title,
            "content": story_content,
            "audio_path": audio_path,
            "type": "audio"
        }
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration histoire: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors de la g√©n√©ration : {str(e)}")

# --- Coloriage ---
class ColoringRequest(BaseModel):
    theme: str

# --- Animation Coh√©rente CrewAI ---
class AnimationCohesiveRequest(BaseModel):
    story: str
    style: str = "cartoon"
    theme: str = "adventure"
    orientation: str = "landscape"
    duration: int = 60  # Dur√©e en secondes (30s √† 300s = 5min)
    quality: str = "medium"  # fast, medium, high
    title: Optional[str] = None

@app.post("/api/animations/generate", response_model=AnimationResponse)
async def generate_animation(request: AnimationRequest):
    """
    G√©n√®re un dessin anim√© avec Runway Gen-4 Turbo
    """
    try:
        print(f"üé¨ G√©n√©ration animation: {request.style} / {request.theme}")
        
        # Convertir les enum en cha√Ænes
        style_str = request.style.value
        theme_str = request.theme.value
        orientation_str = request.orientation.value
        
        # G√©n√©rer un titre attractif avec l'IA
        animation_title = await _generate_animation_title(theme_str, style_str)
        
        # G√©n√©rer l'animation avec le service Runway Gen-4 Turbo
        result = await runway_gen4_service.generate_animation({
            'style': style_str,
            'theme': theme_str,
            'orientation': orientation_str,
            'prompt': request.prompt,
            'title': animation_title,
            'description': f"Animation {style_str} sur le th√®me {theme_str}"
        })
        
        # Ajuster le statut et la description selon le mode utilis√©
        response_status = AnimationStatus.COMPLETED
        
        # Si c'est une simulation √† cause des cr√©dits, l'indiquer
        if result.get('simulation_reason'):
            result['description'] += f" (Mode simulation: {result['simulation_reason']})"
        
        return AnimationResponse(
            id=result['id'],
            title=result['title'],
            description=result['description'],
            video_url=result['video_url'],
            thumbnail_url=result.get('thumbnail_url'),
            status=response_status,
            created_at=datetime.fromisoformat(result['created_at']),
            style=request.style,
            theme=request.theme,
            orientation=request.orientation
        )
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration animation: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/animations/{animation_id}/status", response_model=AnimationStatusResponse)
async def get_animation_status(animation_id: str):
    """
    R√©cup√®re le statut d'une animation
    """
    try:
        # Pour Runway Gen-4 Turbo, les animations sont g√©n√©r√©es avec polling
        # Cette route est maintenue pour la compatibilit√©
        return AnimationStatusResponse(
            status=AnimationStatus.COMPLETED,
            progress=100
        )
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration statut: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# --- Status et monitoring ---
@app.get("/api/runway/credits")
async def get_runway_credits_status():
    """
    V√©rifie l'√©tat des cr√©dits Runway
    """
    try:
        # status = await runway_simple_service.check_credits_status()
        return {
            "service": "runway_simple",
            "timestamp": datetime.now().isoformat(),
            "status": "available",
            "message": "Service simplifi√© - v√©rification des cr√©dits non impl√©ment√©e"
        }
    except Exception as e:
        return {
            "service": "runway_gen4",
            "timestamp": datetime.now().isoformat(),
            "status": "error",
            "error": str(e),
            "credits_available": False
        }

async def _generate_animation_title(theme: str, style: str) -> str:
    """G√©n√®re un titre attractif pour une animation selon le th√®me et le style"""
    try:
        # V√©rifier la cl√© API
        openai_key = os.getenv("OPENAI_API_KEY")
        if not openai_key or openai_key.startswith("sk-votre"):
            # Fallback si pas d'API
            return f"Animation {theme.title()}"
        
        prompt = f"""G√©n√®re un titre court et attractif pour un dessin anim√© sur le th√®me : {theme} 
Style d'animation : {style}

Le titre doit √™tre :
- Court (maximum 4-5 mots)
- Adapt√© aux enfants de 4-10 ans
- Captivant et imaginatif  
- En fran√ßais
- Sans ponctuation sp√©ciale

Exemples de bons titres :
- "Les Aventures de Luna"
- "Super Chat Volant"
- "Princesse des Oc√©ans"
- "Mission Spatiale Secr√®te"

Titre uniquement (sans autre texte) :"""

        client = AsyncOpenAI(api_key=openai_key)
        
        response = await client.chat.completions.create(
            model=TEXT_MODEL,
            messages=[
                {"role": "system", "content": "Tu es un sp√©cialiste des contenus audiovisuels pour enfants. Tu g√©n√®res des titres courts et captivants."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=25,
            temperature=0.7        )
        
        title = response.choices[0].message.content
        if title:
            title = title.strip()
            # Nettoyer le titre (enlever guillemets √©ventuels)
            title = title.replace('"', '').replace("'", '').strip()
        
        return title if title else f"Animation {theme.title()}"
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur g√©n√©ration titre animation: {e}")
        return f"Animation {theme.title()}"

# --- Dessins Anim√©s Optimis√©s ---
@app.post("/api/animations/generate-fast", response_model=AnimationResponse)
async def generate_animation_fast(request: AnimationRequest):
    """
    G√©n√®re un dessin anim√© avec Runway Gen-4 Turbo (mode optimis√© pour la vitesse)
    """
    try:
        print(f"‚ö° G√©n√©ration animation RAPIDE: {request.style} / {request.theme}")
        
        # Convertir les enum en cha√Ænes
        style_str = request.style.value
        theme_str = request.theme.value
        orientation_str = request.orientation.value
        
        # G√©n√©rer un titre attractif avec l'IA
        animation_title = await _generate_animation_title(theme_str, style_str)
        
        # G√©n√©rer l'animation avec le service Runway Gen-4 Turbo (mode rapide)
        result = await runway_gen4_service.generate_animation_fast({
            'style': style_str,
            'theme': theme_str,
            'orientation': orientation_str,
            'prompt': request.prompt,
            'title': animation_title,
            'description': f"Animation {style_str} sur le th√®me {theme_str} (optimis√©e)"
        })
        
        # Ajuster le statut et la description selon le mode utilis√©
        response_status = AnimationStatus.COMPLETED
        
        # Si c'est une simulation √† cause des cr√©dits, l'indiquer
        if result.get('simulation_reason'):
            result['description'] += f" (Mode simulation: {result['simulation_reason']})"
        
        return AnimationResponse(
            id=result['id'],
            title=result['title'],
            description=result['description'],
            video_url=result['video_url'],
            thumbnail_url=result.get('thumbnail_url'),
            status=response_status,
            created_at=datetime.fromisoformat(result['created_at']),
            style=request.style,
            theme=request.theme,
            orientation=request.orientation
        )
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration animation rapide: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/animations/generate-async", response_model=AnimationResponse)
async def generate_animation_async(request: AnimationRequest):
    """
    D√©marre une g√©n√©ration d'animation asynchrone (retour imm√©diat)
    """
    try:
        print(f"üîÑ G√©n√©ration animation ASYNCHRONE: {request.style} / {request.theme}")
        
        # Convertir les enum en cha√Ænes
        style_str = request.style.value
        theme_str = request.theme.value
        orientation_str = request.orientation.value
        
        # G√©n√©rer un titre attractif avec l'IA
        animation_title = await _generate_animation_title(theme_str, style_str)
        
        # D√©marrer la g√©n√©ration avec le service story
        result = await runway_story_service.generate_animation({
            'style': style_str,
            'theme': theme_str,
            'orientation': orientation_str,
            'prompt': request.prompt,
            'title': animation_title,
            'description': f"Animation {style_str} sur le th√®me {theme_str}"
        })
        
        # D√©terminer le statut
        status = AnimationStatus.PROCESSING if result.get('status') == 'processing' else AnimationStatus.COMPLETED
        
        return AnimationResponse(
            id=result['id'],
            title=result['title'],
            description=result['description'],
            video_url=result.get('video_url'),
            thumbnail_url=result.get('thumbnail_url'),
            status=status,
            created_at=datetime.fromisoformat(result['created_at']),
            style=request.style,
            theme=request.theme,
            orientation=request.orientation
        )
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration animation async: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Nouvel endpoint pour g√©n√©ration d'animation narrative compl√®te avec CrewAI
@app.post("/api/animations/generate-story")
async def generate_story_animation(request: dict):
    """
    G√©n√®re une animation narrative compl√®te √† partir d'un texte avec CrewAI
    Pipeline: Analyse narrative ‚Üí Direction artistique ‚Üí G√©n√©ration vid√©o ‚Üí Assemblage
    """
    try:
        story_text = request.get('story', '')
        style_preferences = request.get('style_preferences', {
            'style': 'cartoon color√©',
            'mood': 'joyeux',
            'target_age': '3-8 ans'
        })
        
        if not story_text:
            raise HTTPException(status_code=400, detail="Le texte de l'histoire est requis")
        
        if len(story_text) < 10:
            raise HTTPException(status_code=400, detail="L'histoire doit contenir au moins 10 caract√®res")
        
        print(f"üé¨ G√©n√©ration animation narrative CrewAI")
        print(f"üìñ Histoire: {story_text[:100]}...")
        print(f"üé® Style: {style_preferences}")
        
        # Service temporairement d√©sactiv√©
        return {
            "status": "error", 
            "message": "Service int√©gr√© temporairement d√©sactiv√©",
            "error": "integrated_animation_service non disponible"
        }
        
        if result.get('status') == 'success':
            return {
                "status": "success",
                "message": "Animation narrative g√©n√©r√©e avec succ√®s !",
                "video_url": result.get('video_url'),
                "video_path": result.get('video_path'),
                "scenes_count": result.get('scenes_count'),
                "total_duration": result.get('total_duration'),
                "generation_time": result.get('generation_time'),
                "scenes_details": result.get('scenes_details'),
                "timestamp": result.get('timestamp')
            }
        else:
            raise HTTPException(
                status_code=500, 
                detail=f"Erreur g√©n√©ration animation: {result.get('error', 'Erreur inconnue')}"
            )
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Erreur endpoint animation narrative: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}")

# Test endpoint pour pipeline CrewAI
@app.post("/api/animations/test-crewai")
async def test_crewai_pipeline(request: dict):
    """Test du pipeline CrewAI avec une histoire simple"""
    try:
        test_story = request.get('story', "Il √©tait une fois un petit lapin qui d√©couvrait un jardin magique plein de couleurs.")
        
        print(f"üß™ Test pipeline CrewAI")
        print(f"üìù Histoire de test: {test_story}")
        
        # Service temporairement d√©sactiv√©  
        return {
            "status": "test_completed",
            "message": "Service int√©gr√© temporairement d√©sactiv√© pour les tests",
            "error": "integrated_animation_service non disponible"
        }
        
    except Exception as e:
        print(f"‚ùå Erreur test CrewAI: {e}")
        import traceback
        traceback.print_exc()
        return {
            "status": "error",
            "error": str(e),
            "message": "Erreur lors du test CrewAI"
        }

# Test endpoint pour debug
@app.post("/api/animations/test-data")
async def test_animation_data(request: dict):
    """Test pour v√©rifier les donn√©es re√ßues"""
    print(f"üìä Donn√©es re√ßues: {request}")
    return {"status": "ok", "received": request}

# --- Dessins Anim√©s Narratifs avec CrewAI ---
@app.post("/api/animations/generate-narrative")
async def generate_narrative_animation(request: dict):
    """
    G√©n√®re un dessin anim√© narratif complet avec CrewAI + Runway
    """
    try:
        print(f"üé¨ G√©n√©ration animation narrative avec CrewAI")
        
        # Extraire les param√®tres
        story = request.get("story", "")
        style = request.get("style", "cartoon")
        theme = request.get("theme", "adventure")
        orientation = request.get("orientation", "landscape")
        
        if not story or len(story) < 20:
            raise HTTPException(status_code=400, detail="L'histoire doit contenir au moins 20 caract√®res")
        
        print(f"üìñ Histoire: {story[:100]}...")
        print(f"üé® Style: {style}, Th√®me: {theme}")
        
        # G√©n√©rer l'animation narrative avec CrewAI + Runway
        result = await runway_gen4_service.generate_narrative_animation({
            'story': story,
            'style': style,
            'theme': theme,
            'orientation': orientation
        })
        
        return {
            "status": "success",
            "message": "Animation narrative g√©n√©r√©e avec succ√®s !",
            "animation": result,
            "type": "narrative",
            "scenes_count": result.get("total_scenes", 1),
            "duration": result.get("total_duration", 10)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration narrative: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")

# --- Animation Coh√©rente avec CrewAI ---

@app.post("/api/animations/generate-cohesive")
async def generate_cohesive_animation(request: AnimationCohesiveRequest):
    """
    üé¨ G√©n√©ration d'animation coh√©rente avec CrewAI
    Pipeline multi-agents pour cr√©er des animations de 30s √† 5min
    avec continuit√© visuelle et narrative parfaite
    """
    try:
        print(f"üé≠ Demande animation coh√©rente:")
        print(f"   üìñ Histoire: {request.story[:100]}...")
        print(f"   üé® Style: {request.style}")
        print(f"   ‚è±Ô∏è Dur√©e: {request.duration}s")
        print(f"   üíé Qualit√©: {request.quality}")
        
        # Pr√©parer les donn√©es pour le service CrewAI
        story_data = {
            "story": request.story,
            "style": request.style,
            "theme": request.theme,
            "orientation": request.orientation,
            "duration": request.duration,
            "quality": request.quality,
            "title": request.title
        }
        
        # Lancer le pipeline CrewAI complet
        start_time = time.time()
        
        result = await runway_gen4_service.generate_narrative_animation(story_data)
        
        generation_time = time.time() - start_time
        
        # Ajouter les m√©tadonn√©es de performance
        result.update({
            "generation_time": round(generation_time, 2),
            "endpoint": "cohesive",
            "pipeline_type": "crewai_multi_agent",
            "success": True
        })
        
        print(f"‚úÖ Animation coh√©rente g√©n√©r√©e en {generation_time:.2f}s")
        print(f"üéØ Score continuit√©: {result.get('visual_consistency_score', 'N/A')}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration coh√©rente: {e}")
        return {
            "success": False,
            "error": str(e),
            "message": "Erreur lors de la g√©n√©ration de l'animation coh√©rente",
            "fallback_suggestion": "Essayer le mode g√©n√©ration simple"
        }

if __name__ == "__main__":
    import uvicorn
    print("üöÄ D√©marrage du serveur FastAPI...")
    print("üìç Backend accessible sur: http://localhost:8000")
    print("üé¨ Endpoints disponibles:")
    print("   ‚Ä¢ /api/animations/generate (G√©n√©ration simple)")
    print("   ‚Ä¢ /api/animations/generate-fast (G√©n√©ration rapide)")
    print("   ‚Ä¢ /api/animations/generate-narrative (Multi-sc√®nes)")
    print("   ‚Ä¢ /api/animations/generate-cohesive (üÜï CrewAI coh√©rent)")
    print("üì± Frontend accessible sur: http://localhost:5173")
    
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
