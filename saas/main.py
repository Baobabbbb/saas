from fastapi import FastAPI, HTTPException, UploadFile, File, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import Optional
from unidecode import unidecode
import traceback
import os
import json
from fastapi import Form

from dotenv import load_dotenv
import openai
from openai import AsyncOpenAI

from schemas.animation import AnimationRequest, AnimationResponse, AnimationStatusResponse, AnimationStatus
from datetime import datetime
from services.scenario import generate_scenario
from services.image_gen import generate_images
from services.composer import compose_pages
from services.tts import generate_speech
from services.stt import transcribe_audio
from services.veo3_fal import veo3_fal_service
from utils.translate import translate_text

# --- Chargement .env ---
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
TEXT_MODEL = os.getenv("TEXT_MODEL", "gpt-4o-mini")

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://localhost:5174", "http://localhost:5175", "http://localhost:5177"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware pour afficher les erreurs
@app.middleware("http")
async def log_exceptions(request: Request, call_next):
    try:        return await call_next(request)
    except Exception:
        print("üî• Exception occurred during request:")
        traceback.print_exc()
        raise

def validate_scenario(scenario, expected_num_images: int):
    scenes = scenario.get("scenes", [])
    if not scenes:
        raise ValueError("‚ùå Le sc√©nario ne contient aucune sc√®ne.")
    
    if len(scenes) != expected_num_images:
        raise ValueError(f"‚ùå Le sc√©nario contient {len(scenes)} sc√®nes au lieu de {expected_num_images}")

    for i, scene in enumerate(scenario["scenes"]):
        dialogues = scene.get("dialogues")
        if dialogues is None:
            raise ValueError(f"‚ùå La sc√®ne {i + 1} n'a pas de cl√© 'dialogues'")
        for j, dialog in enumerate(dialogues):
            if not isinstance(dialog, dict):
                raise ValueError(f"‚ùå Le dialogue {j + 1} de la sc√®ne {i + 1} est invalide")
            if "character" not in dialog or "text" not in dialog:
                raise ValueError(f"‚ùå Le dialogue {j + 1} est mal form√© : {dialog}")

@app.post("/generate_comic/")
async def generate_comic(
    style: str = Form(...),
    hero_name: str = Form(...),
    story_type: str = Form(...),
    custom_request: str = Form(...),
    num_images: int = Form(...),
    avatar_type: str = Form(None),
    custom_prompt: str = Form(None),
    emoji: str = Form(None),
    custom_image: Optional[UploadFile] = File(None)
):
    """
    G√©n√®re une bande dessin√©e avec CrewAI activ√© par d√©faut
    pour des bulles et dialogues plus r√©alistes et professionnels
    """
    try:
        print("üöÄ G√©n√©ration BD avec CrewAI (d√©faut)")
        
        # Construction du prompt optimis√© pour CrewAI
        prompt = f"""
Tu es un sc√©nariste de bande dessin√©e pour enfants de 6 √† 9 ans.

Cr√©e une BD avec un h√©ros nomm√© {hero_name}, sur le th√®me "{story_type}", 
dans un style {style}. Suis cette structure :

1. La BD doit comporter exactement **{num_images} sc√®nes**, une par image.
2. Chaque sc√®ne contient :
   - Une description visuelle claire et pr√©cise pour l'image
   - **Entre 1 et 3 dialogues maximum**, adapt√©s aux bulles de BD
   - Des indications de placement des personnages (gauche, droite, centre, haut, bas)

3. Les dialogues doivent √™tre :
   - Naturels et expressifs
   - Adapt√©s √† des enfants
   - Courts et percutants (max 2-3 phrases par bulle)
   - Vari√©s dans le ton (parole normale, cri, chuchotement, pens√©e)
   - √âviter les r√©p√©titions

Structure narrative : d√©but ‚Üí probl√®me ‚Üí aventure ‚Üí r√©solution

Langue : fran√ßais

{custom_request}
""".strip()

        print("üìú Prompt de g√©n√©ration optimis√© :", prompt)

        # -------- LOGIQUE CHOIX AVATAR --------
        image_path = None
        try:
            if avatar_type == "photo" and custom_image:
                # Cas photo upload√©e
                image_bytes = await custom_image.read()
                os.makedirs("static/uploads", exist_ok=True)
                image_path = f"static/uploads/{custom_image.filename}"
                with open(image_path, "wb") as f:
                    f.write(image_bytes)
                print(f"üì∏ Image personnalis√©e enregistr√©e : {image_path}")

            elif avatar_type == "prompt" and custom_prompt:
                # Traduction du prompt en anglais
                prompt_en = await translate_text(custom_prompt)
                from services.image_gen import generate_hero_from_prompt
                image_path = await generate_hero_from_prompt(prompt_en)
                print(f"ü§ñ H√©ros g√©n√©r√© par prompt (traduit) : {prompt_en} -> {image_path}")

            elif avatar_type == "emoji" and emoji:
                # Emoji = image par d√©faut (mapping conseill√©)
                EMOJI_TO_FILENAME = {
                    "üë¶": "boy.png",
                    "üëß": "girl.png",
                    "üë∂": "baby.png"
                }
                filename = EMOJI_TO_FILENAME.get(emoji, "default.png")
                image_path = f"static/emojis/{filename}"
                print(f"üòÄ H√©ros emoji : {emoji} ‚Üí {image_path}")

            print("üü¢ image_path utilis√© :", image_path)
        except Exception as e:
            print("‚ùå ERREUR √©tape CHOIX AVATAR :", e)
            raise        # --------- G√©n√©ration du sc√©nario avec CrewAI ---------
        try:            # G√©n√©ration avec CrewAI activ√© par d√©faut
            scenario = await generate_scenario(prompt=prompt, style=style, use_crewai=True, num_images=num_images)
            
            print("üß† Sc√©nario g√©n√©r√© :", json.dumps(scenario, indent=2, ensure_ascii=False))
            validate_scenario(scenario, expected_num_images=num_images)
            
            if scenario.get('crewai_enhanced'):
                print("‚úÖ Sc√©nario am√©lior√© par CrewAI")
            else:
                print("üìù Sc√©nario de base utilis√©")
                
        except Exception as e:
            print("‚ùå ERREUR √©tape SCENARIO avec CrewAI :", e)
            # Fallback vers g√©n√©ration classique
            print("üîÑ Fallback vers g√©n√©ration classique...")
            try:
                scenario = await generate_scenario(prompt=prompt, style=style, use_crewai=False, num_images=num_images)
                validate_scenario(scenario, expected_num_images=num_images)
                print("üü¢ Fallback r√©ussi")
            except Exception as fallback_error:
                print("‚ùå ERREUR Fallback :", fallback_error)
                raise

        # --------- G√©n√©ration des images ---------
        try:
            if avatar_type == "prompt" and custom_prompt:
                images = await generate_images(scenario, hero_prompt_en=prompt_en, init_image_path=image_path)
            else:
                images = await generate_images(scenario, init_image_path=image_path)
            print("üü¢ Images g√©n√©r√©es :", images)
            print("üü¢ Nombre d'images g√©n√©r√©es :", len(images))
        except Exception as e:
            print("‚ùå ERREUR √©tape GENERATE_IMAGES :", e)
            raise        # --------- Affectation des images aux sc√®nes ---------
        try:
            for i, scene in enumerate(scenario["scenes"]):
                print(f"‚û°Ô∏è Ajout image √† la sc√®ne {i} : {images[i]}")
                scene["image"] = images[i]
        except Exception as e:
            print("‚ùå ERREUR √©tape AFFECTATION IMAGE SCENE :", e)
            raise

        # --------- Composition des pages avec le syst√®me classique ---------
        try:
            print("üõ†Ô∏è Composition des pages finales...")
            result = await compose_pages(scenario)
            
            # Marquage de l'am√©lioration CrewAI (textuelle uniquement)
            result["enhanced_by_crewai"] = scenario.get("crewai_enhanced", False)
            if result["enhanced_by_crewai"]:
                print("‚úÖ BD g√©n√©r√©e avec am√©liorations textuelles CrewAI")
            else:
                print("ÔøΩ BD g√©n√©r√©e avec syst√®me classique")
                
        except Exception as e:
            print(f"‚ùå ERREUR √©tape COMPOSITION : {e}")
            raise

        # Nettoyage final des chemins
        final_pages = result.get("final_pages", [])
        for i, page in enumerate(final_pages):
            if page.startswith("/static/static/"):
                final_pages[i] = page.replace("/static/static/", "/static/")

        print("‚úÖ BD g√©n√©r√©e avec succ√®s (CrewAI par d√©faut)")
        print(f"üìñ Pages finales : {final_pages}")
        
        return {
            "title": result.get("title", scenario.get("title", "Ma BD")),
            "pages": final_pages,
            "enhanced_by_crewai": result.get("enhanced_by_crewai", False)
        }

    except Exception as e:
        print("‚ùå Erreur globale g√©n√©ration BD :")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Erreur lors de la g√©n√©ration: {str(e)}")

@app.post("/tts")
async def tts_endpoint(data: dict):
    try:
        text = data["text"]
        path = generate_speech(text)
        return {"audio_path": path}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/stt")
async def stt_endpoint(file: UploadFile = File(...)):
    try:
        temp_path = f"static/{file.filename}"
        with open(temp_path, "wb") as f:
            f.write(await file.read())
        transcription = transcribe_audio(temp_path)
        return {"transcription": transcription}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# --- Comptine ---
class RhymeRequest(BaseModel):
    rhyme_type: str
    custom_request: Optional[str] = None

@app.post("/generate_rhyme/")
async def generate_rhyme(request: RhymeRequest):
    try:
        prompt = f"√âcris une comptine courte, joyeuse et rythm√©e pour enfants sur le th√®me : {request.rhyme_type}.\n"
        if request.custom_request:
            prompt += f"D√©tails suppl√©mentaires : {request.custom_request}"

        client = AsyncOpenAI()

        response = await client.chat.completions.create(
            model=TEXT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8
        )
        content = response.choices[0].message.content.strip()

        # Extraire un titre nettoy√© depuis le contenu si possible
        final_title = "audio_story"
        if content.startswith("**") and "**" in content[2:]:
            final_title = content.split("**")[1].strip()

        # Nettoyer pour un nom de fichier
        safe_filename = unidecode(final_title.lower().replace(" ", "_"))

        audio_path = generate_speech(content, voice=request.voice, filename=safe_filename)

        return {
            "title": final_title,
            "content": content,
            "audio_path": audio_path
        }

    except Exception as e:
        import traceback
        print("‚ùå Erreur dans /generate_rhyme/ :", traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))

# --- Histoire / Conte ---
class AudioStoryRequest(BaseModel):
    story_type: str
    voice: Optional[str] = None
    custom_request: Optional[str] = None

@app.post("/generate_audio_story/")
async def generate_audio_story(request: AudioStoryRequest):
    try:
        print("üì• Requ√™te re√ßue sur /generate_audio_story/")
        print("üßæ Donn√©es re√ßues :", request)

        prompt = f"Raconte un conte original pour enfant sur le th√®me : {request.story_type}. "
        prompt += "Utilise un ton bienveillant, imag√© et adapt√© √† un enfant de 4 √† 8 ans. "
        if request.custom_request:
            prompt += f"D√©tails suppl√©mentaires : {request.custom_request}"

        print("üí° Prompt g√©n√©r√© :", prompt)

        client = AsyncOpenAI()

        response = await client.chat.completions.create(
            model=TEXT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8
        )

        content = response.choices[0].message.content.strip()
        print("üìù Conte g√©n√©r√© :", content[:200], "...")  # Affiche un extrait

        audio_path = None
        if request.voice:
            print("üîä G√©n√©ration audio activ√©e avec la voix :", request.voice)
            audio_path = generate_speech(content, voice=request.voice)
            print("‚úÖ Audio g√©n√©r√© :", audio_path)
        else:
            print("‚ÑπÔ∏è Aucune voix sp√©cifi√©e, audio non g√©n√©r√©.")

        return {
            "title": f"L‚Äôhistoire de {request.story_type.capitalize()}",
            "content": content,
            "audio_path": audio_path
        }

    except Exception as e:
        print("‚ùå Erreur lors de la g√©n√©ration du conte audio :")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

# === ENDPOINTS POUR LES ANIMATIONS ===

@app.post("/api/animations/generate", response_model=AnimationResponse)
async def generate_animation(request: AnimationRequest):
    """G√©n√®re une nouvelle animation avec Veo3 via fal-ai"""
    try:
        print(f"üé¨ G√©n√©ration d'animation demand√©e: {request.style} - {request.theme}")
        
        # Construction du prompt pour fal-ai
        style_map = {
            "cartoon": "style cartoon color√©",
            "fairy_tale": "style conte de f√©es magique",
            "anime": "style anime japonais",
            "realistic": "style r√©aliste cin√©matique",
            "paper_craft": "style papier d√©coup√© artisanal",
            "watercolor": "style aquarelle artistique"
        }
        
        theme_map = {
            "adventure": "aventure √©pique avec des h√©ros",
            "magic": "monde magique avec des sortil√®ges",
            "animals": "animaux mignons et amicaux",
            "friendship": "amiti√© et entraide",
            "space": "exploration spatiale futuriste",
            "underwater": "monde sous-marin color√©",
            "forest": "for√™t enchant√©e myst√©rieuse",
            "superhero": "super-h√©ros sauvant le monde"
        }
        
        prompt_parts = [
            f"Animation courte {style_map.get(request.style, request.style)}",
            f"sur le th√®me: {theme_map.get(request.theme, request.theme)}",
            "Adapt√© aux enfants, couleurs vives, mouvements fluides",
            "Qualit√© professionnelle haute d√©finition"
        ]
        
        if request.prompt:
            prompt_parts.append(f"Histoire: {request.prompt}")
        
        animation_prompt = ". ".join(prompt_parts)
        
        # D√©termination de l'aspect ratio
        aspect_ratio = "9:16" if request.orientation == "portrait" else "16:9"
        
        # G√©n√©ration avec le service fal-ai
        result = await veo3_fal_service.generate_video(
            prompt=animation_prompt,
            aspect_ratio=aspect_ratio,
            generate_audio=True
        )
        
        # Cr√©ation de la r√©ponse
        import uuid
        animation_id = str(uuid.uuid4())
        
        animation = AnimationResponse(
            id=animation_id,
            title=request.title or "Mon Dessin Anim√©",
            description=request.description or "Dessin anim√© cr√©√© avec Veo3",
            style=request.style,
            theme=request.theme,
            orientation=request.orientation,
            status=AnimationStatus.COMPLETED,
            video_url=result["video_url"],
            created_at=datetime.now(),
            completed_at=datetime.now()
        )
        
        print(f"‚úÖ Animation cr√©√©e avec l'ID: {animation.id}")
        print(f"üé• URL vid√©o: {animation.video_url}")
        
        return animation
        
    except Exception as e:
        print("‚ùå Erreur lors de la g√©n√©ration d'animation:")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/animations/{animation_id}/status", response_model=AnimationStatusResponse)
async def get_animation_status(animation_id: str):
    """R√©cup√®re le statut d'une animation (pour compatibilit√©)"""
    try:
        # Avec fal-ai, les animations sont synchrones donc toujours completed
        return AnimationStatusResponse(
            status=AnimationStatus.COMPLETED,
            progress=100
        )
        
    except Exception as e:
        print("‚ùå Erreur lors de la r√©cup√©ration du statut:")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/animations/{animation_id}", response_model=AnimationResponse)
async def get_animation(animation_id: str):
    """R√©cup√®re une animation compl√®te (pour compatibilit√©)"""
    try:
        # Dans cette version simplifi√©e, on ne stocke pas les animations
        # On retourne une animation d'exemple ou une erreur 404
        raise HTTPException(status_code=404, detail="Animation non trouv√©e")
        
    except HTTPException:
        raise
    except Exception as e:
        print("‚ùå Erreur lors de la r√©cup√©ration de l'animation:")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/animations")
async def get_user_animations(page: int = 1, limit: int = 10):
    """R√©cup√®re les animations d'un utilisateur (version simplifi√©e)"""
    try:
        # Version simplifi√©e - retourne une liste vide
        # Dans un vrai projet, on aurait une base de donn√©es
        return {
            "animations": [],
            "total": 0,
            "page": page,
            "limit": limit,
            "total_pages": 0
        }
        
        return {
            "animations": paginated_animations,
            "total": len(animations),
            "page": page,
            "limit": limit,
            "total_pages": (len(animations) + limit - 1) // limit
        }
        
    except Exception as e:
        print("‚ùå Erreur lors de la r√©cup√©ration des animations:")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

# Cleanup √† la fermeture
@app.on_event("shutdown")
async def shutdown_event():
    """Nettoie les ressources √† la fermeture"""
    if hasattr(veo3_fal_service, 'close'):
        await veo3_fal_service.close()

# === NOUVEAU ENDPOINT BD AM√âLIOR√âE AVEC CREWAI ===

@app.post("/generate_comic_enhanced/")
async def generate_comic_enhanced(
    style: str = Form(...),
    hero_name: str = Form(...),
    story_type: str = Form(...),
    custom_request: str = Form(...),
    num_images: int = Form(...),
    avatar_type: str = Form(None),
    custom_prompt: str = Form(None),
    emoji: str = Form(None),
    use_crewai: bool = Form(True),
    custom_image: Optional[UploadFile] = File(None)
):
    """
    G√©n√®re une bande dessin√©e avec les am√©liorations CrewAI
    pour des bulles et dialogues plus r√©alistes
    """
    try:
        print(f"üöÄ G√©n√©ration BD am√©lior√©e - CrewAI: {'ON' if use_crewai else 'OFF'}")
        
        # Construction du prompt optimis√© pour CrewAI
        prompt = f"""
Tu es un sc√©nariste de bande dessin√©e pour enfants de 6 √† 9 ans.

Cr√©e une BD avec un h√©ros nomm√© {hero_name}, sur le th√®me "{story_type}", 
dans un style {style}. Suis cette structure :

1. La BD doit comporter exactement **{num_images} sc√®nes**, une par image.
2. Chaque sc√®ne contient :
   - Une description visuelle claire et pr√©cise pour l'image
   - **Entre 1 et 3 dialogues maximum**, adapt√©s aux bulles de BD
   - Des indications de placement des personnages (gauche, droite, centre, haut, bas)

3. Les dialogues doivent √™tre :
   - Naturels et expressifs
   - Adapt√©s √† des enfants
   - Courts et percutants (max 2-3 phrases par bulle)
   - Vari√©s dans le ton (parole normale, cri, chuchotement, pens√©e)
   - √âviter les r√©p√©titions

Structure narrative : d√©but ‚Üí probl√®me ‚Üí aventure ‚Üí r√©solution

Langue : fran√ßais

{custom_request}
""".strip()

        print("üìú Prompt de g√©n√©ration am√©lior√© :", prompt)

        # -------- LOGIQUE CHOIX AVATAR --------
        image_path = None
        try:
            if avatar_type == "photo" and custom_image:
                # Cas photo upload√©e
                image_bytes = await custom_image.read()
                os.makedirs("static/uploads", exist_ok=True)
                image_path = f"static/uploads/{custom_image.filename}"
                with open(image_path, "wb") as f:
                    f.write(image_bytes)
                print(f"üì∏ Image personnalis√©e enregistr√©e : {image_path}")

            elif avatar_type == "prompt" and custom_prompt:
                # Traduction du prompt en anglais
                prompt_en = await translate_text(custom_prompt)
                from services.image_gen import generate_hero_from_prompt
                image_path = await generate_hero_from_prompt(prompt_en)
                print(f"ü§ñ H√©ros g√©n√©r√© par prompt (traduit) : {prompt_en} -> {image_path}")

            elif avatar_type == "emoji" and emoji:
                # Emoji = image par d√©faut (mapping conseill√©)
                EMOJI_TO_FILENAME = {
                    "üë¶": "boy.png",
                    "üëß": "girl.png", 
                    "üë∂": "baby.png"
                }
                filename = EMOJI_TO_FILENAME.get(emoji, "default.png")
                image_path = f"static/emojis/{filename}"
                print(f"üòÄ H√©ros emoji : {emoji} ‚Üí {image_path}")

            print("üü¢ image_path utilis√© :", image_path)
        except Exception as e:
            print("‚ùå ERREUR √©tape CHOIX AVATAR :", e)
            raise

        # --------- G√©n√©ration du sc√©nario avec CrewAI ---------
        try:
            # G√©n√©ration avec ou sans CrewAI selon le param√®tre
            scenario = await generate_scenario(prompt, style, use_crewai=use_crewai, num_images=num_images)
            
            print("üß† Sc√©nario g√©n√©r√© :", json.dumps(scenario, indent=2, ensure_ascii=False))
            validate_scenario(scenario, expected_num_images=num_images)
            
            if scenario.get('crewai_enhanced'):
                print("‚úÖ Sc√©nario am√©lior√© par CrewAI")
            else:
                print("üìù Sc√©nario de base utilis√©")
                
        except Exception as e:
            print("‚ùå ERREUR √©tape SCENARIO :", e)
            raise

        # --------- G√©n√©ration des images ---------
        try:
            if avatar_type == "prompt" and custom_prompt:
                images = await generate_images(scenario, hero_prompt_en=prompt_en, init_image_path=image_path)
            else:
                images = await generate_images(scenario, init_image_path=image_path)
            print("üü¢ Images g√©n√©r√©es :", images)
        except Exception as e:
            print("‚ùå ERREUR √©tape GENERATE_IMAGES :", e)
            raise

        # --------- Affectation des images aux sc√®nes ---------
        try:
            for i, scene in enumerate(scenario["scenes"]):
                scene["image"] = images[i]
                print(f"‚û°Ô∏è Image assign√©e √† la sc√®ne {i+1} : {images[i]}")
        except Exception as e:
            print("‚ùå ERREUR √©tape AFFECTATION IMAGE SCENE :", e)
            raise        # --------- Composition avec le syst√®me classique ---------
        try:
            print("ÔøΩÔ∏è Composition des pages finales...")
            result = await compose_pages(scenario)
            
            # Marquage de l'am√©lioration CrewAI
            result["enhanced_by_crewai"] = scenario.get("crewai_enhanced", False)
            if result["enhanced_by_crewai"]:
                print("‚úÖ BD g√©n√©r√©e avec am√©liorations textuelles CrewAI")
            else:
                print("ÔøΩ BD g√©n√©r√©e avec syst√®me classique")
                
        except Exception as e:
            print(f"‚ùå ERREUR √©tape COMPOSITION : {e}")
            # Fallback sur le syst√®me classique
            print("üîÑ Fallback vers composition classique...")
            result = await compose_pages(scenario)
            result["enhanced_by_crewai"] = False

        # Nettoyage final des chemins
        final_pages = result.get("final_pages", [])
        for i, page in enumerate(final_pages):
            if page.startswith("/static/static/"):
                final_pages[i] = page.replace("/static/static/", "/static/")

        print("‚úÖ BD am√©lior√©e g√©n√©r√©e avec succ√®s")
        print(f"üìñ Pages finales : {final_pages}")
        
        return {
            "title": result.get("title", scenario.get("title", "Ma BD")),
            "pages": final_pages,
            "enhanced_by_crewai": result.get("enhanced_by_crewai", False),
            "total_scenes": len(scenario.get("scenes", [])),
            "improvements": result.get("improvements", [])
        }

    except Exception as e:
        print("‚ùå Erreur globale g√©n√©ration BD am√©lior√©e:")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Erreur lors de la g√©n√©ration: {str(e)}")

# === ENDPOINT POUR ACTIVER/D√âSACTIVER CREWAI ===

@app.post("/toggle_crewai/")
async def toggle_crewai_enhancement(enabled: bool = Form(...)):
    """
    Active ou d√©sactive l'am√©lioration CrewAI globalement
    """
    try:
        # Ici vous pourriez stocker cette pr√©f√©rence en base de donn√©es
        # Pour l'instant, on retourne juste le statut
        return {
            "crewai_enabled": enabled,
            "message": f"Am√©lioration CrewAI {'activ√©e' if enabled else 'd√©sactiv√©e'}",
            "features": [
                "Dialogues plus naturels et r√©alistes",
                "Bulles de dialogue optimis√©es", 
                "Placement intelligent des bulles",
                "R√©vision narrative par des agents sp√©cialis√©s"
            ] if enabled else ["G√©n√©ration BD standard"]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# === ENDPOINT DE VALIDATION CREWAI ===

@app.post("/validate_crewai_scenario/")
async def validate_crewai_scenario(scenario: dict):
    """
    Valide un sc√©nario avec le syst√®me CrewAI
    """
    try:
        from services.crewai_text_enhancer import crewai_comic_enhancer
        validation = crewai_comic_enhancer.validate_enhanced_scenario(scenario)
        return {
            "is_valid": validation["is_valid"],
            "errors": validation["errors"],
            "recommendations": [
                "V√©rifiez que chaque dialogue fait moins de 120 caract√®res",
                "Assurez-vous que chaque sc√®ne a une description claire",
                "√âvitez plus de 3 dialogues par sc√®ne"
            ] if not validation["is_valid"] else []
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
