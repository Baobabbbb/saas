from fastapi import FastAPI, HTTPException, UploadFile, File, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import Optional
from unidecode import unidecode
import traceback
import os

from dotenv import load_dotenv
import openai
from openai import AsyncOpenAI

from models import ComicRequest
from services.scenario import generate_scenario
from services.image_gen import generate_images
from services.composer import compose_pages
from services.tts import generate_speech
from services.stt import transcribe_audio

# --- Chargement .env ---
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
TEXT_MODEL = os.getenv("TEXT_MODEL", "gpt-4o-mini")

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware pour afficher les erreurs
@app.middleware("http")
async def log_exceptions(request: Request, call_next):
    try:
        return await call_next(request)
    except Exception:
        print("üî• Exception occurred during request:")
        traceback.print_exc()
        raise

def validate_scenario(scenario, expected_num_images: int):
    scenes = scenario.get("scenes", [])
    if not scenes:
        raise ValueError("‚ùå Le sc√©nario ne contient aucune sc√®ne.")
    
    if len(scenes) != expected_num_images:
        raise ValueError(f"‚ùå Le sc√©nario contient {len(scenes)} sc√®nes au lieu de {expected_num_images}")

    for i, scene in enumerate(scenario["scenes"]):
        dialogues = scene.get("dialogues")
        if dialogues is None:
            raise ValueError(f"‚ùå La sc√®ne {i + 1} n'a pas de cl√© 'dialogues'")
        for j, dialog in enumerate(dialogues):
            if not isinstance(dialog, dict):
                raise ValueError(f"‚ùå Le dialogue {j + 1} de la sc√®ne {i + 1} est invalide")
            if "character" not in dialog or "text" not in dialog:
                raise ValueError(f"‚ùå Le dialogue {j + 1} est mal form√© : {dialog}")

@app.post("/generate_comic/")
async def generate_comic(data: ComicRequest):
    try:
        prompt = f"""
Tu es un sc√©nariste de bande dessin√©e pour enfants de 6 √† 9 ans.

Cr√©e une BD avec un h√©ros nomm√© {data.hero_name}, sur le th√®me "{data.story_type}", 
dans un style {data.style}. Suis cette structure :

1. La BD doit comporter exactement **{data.num_images} sc√®nes**, une par image.
2. Chaque sc√®ne contient :
   - Une description visuelle claire pour l'image
   - **Entre 1 et 4 dialogues maximum**, sous forme de petites bulles de BD.

3. Les dialogues doivent √™tre :
   - Fluides et naturels
   - Adapt√©s √† des enfants
   - Entre 1 et 4 phrases maximum par bulle
   - Possiblement avec une exclamation suivie d'une phrase (ex: "Wow ! C'est incroyable !")
   - Parfois un brin bavards mais jamais trop longs ni redondants avec l‚Äôimage

Utilise une structure narrative : d√©but (mise en place), probl√®me, aventure, r√©solution.

Langue : fran√ßais

{data.custom_request}
""".strip()

        print("üìú Prompt de g√©n√©ration :", prompt)

        # G√©n√®re le sc√©nario avec une seed
        scenario = await generate_scenario(prompt)

        # Injecte le style dans le sc√©nario (utilis√© par image_gen)
        scenario["style"] = data.style
        print("üé® Style inject√© dans le sc√©nario :", data.style)

        print("üß† Sc√©nario g√©n√©r√© :", scenario)
        validate_scenario(scenario, expected_num_images=data.num_images)

        # G√©n√®re les images avec seed et style
        images = await generate_images(scenario)
        for i, scene in enumerate(scenario["scenes"]):
            scene["image"] = images[i]

        # Compose les pages avec bulles et retourne les pages finales
        result = await compose_pages(scenario)

        # Corrige les URLs redondantes au cas o√π (s√©curit√©)
        final_pages = result["final_pages"]
        for i, page in enumerate(final_pages):
            if page.startswith("/static/static/"):
                final_pages[i] = page.replace("/static/static/", "/static/")

        print("‚úÖ Pages finales :", final_pages)
        print("üéØ Donn√©es re√ßues :", data)

        return {
            "title": result["title"],
            "pages": final_pages
        }

    except Exception as e:
        import traceback
        print("‚ùå Erreur dans /generate_comic/ :", traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/tts")
async def tts_endpoint(data: dict):
    try:
        text = data["text"]
        path = generate_speech(text)
        return {"audio_path": path}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/stt")
async def stt_endpoint(file: UploadFile = File(...)):
    try:
        temp_path = f"static/{file.filename}"
        with open(temp_path, "wb") as f:
            f.write(await file.read())
        transcription = transcribe_audio(temp_path)
        return {"transcription": transcription}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# --- Comptine ---
class RhymeRequest(BaseModel):
    rhyme_type: str
    custom_request: Optional[str] = None

@app.post("/generate_rhyme/")
async def generate_rhyme(request: RhymeRequest):
    try:
        prompt = f"√âcris une comptine courte, joyeuse et rythm√©e pour enfants sur le th√®me : {request.rhyme_type}.\n"
        if request.custom_request:
            prompt += f"D√©tails suppl√©mentaires : {request.custom_request}"

        client = AsyncOpenAI()

        response = await client.chat.completions.create(
            model=TEXT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8
        )
        content = response.choices[0].message.content.strip()

        # Extraire un titre nettoy√© depuis le contenu si possible
        final_title = "audio_story"
        if content.startswith("**") and "**" in content[2:]:
            final_title = content.split("**")[1].strip()

        # Nettoyer pour un nom de fichier
        safe_filename = unidecode(final_title.lower().replace(" ", "_"))

        audio_path = generate_speech(content, voice=request.voice, filename=safe_filename)

        return {
            "title": final_title,
            "content": content,
            "audio_path": audio_path
        }

    except Exception as e:
        import traceback
        print("‚ùå Erreur dans /generate_rhyme/ :", traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))

# --- Histoire / Conte ---
class AudioStoryRequest(BaseModel):
    story_type: str
    voice: Optional[str] = None
    custom_request: Optional[str] = None

@app.post("/generate_audio_story/")
async def generate_audio_story(request: AudioStoryRequest):
    try:
        print("üì• Requ√™te re√ßue sur /generate_audio_story/")
        print("üßæ Donn√©es re√ßues :", request)

        prompt = f"Raconte un conte original pour enfant sur le th√®me : {request.story_type}. "
        prompt += "Utilise un ton bienveillant, imag√© et adapt√© √† un enfant de 4 √† 8 ans. "
        if request.custom_request:
            prompt += f"D√©tails suppl√©mentaires : {request.custom_request}"

        print("üí° Prompt g√©n√©r√© :", prompt)

        client = AsyncOpenAI()

        response = await client.chat.completions.create(
            model=TEXT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8
        )

        content = response.choices[0].message.content.strip()
        print("üìù Conte g√©n√©r√© :", content[:200], "...")  # Affiche un extrait

        audio_path = None
        if request.voice:
            print("üîä G√©n√©ration audio activ√©e avec la voix :", request.voice)
            audio_path = generate_speech(content, voice=request.voice)
            print("‚úÖ Audio g√©n√©r√© :", audio_path)
        else:
            print("‚ÑπÔ∏è Aucune voix sp√©cifi√©e, audio non g√©n√©r√©.")

        return {
            "title": f"L‚Äôhistoire de {request.story_type.capitalize()}",
            "content": content,
            "audio_path": audio_path
        }

    except Exception as e:
        print("‚ùå Erreur lors de la g√©n√©ration du conte audio :")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))