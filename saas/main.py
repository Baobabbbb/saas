from fastapi import FastAPI, HTTPException, UploadFile, File, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import Optional
from unidecode import unidecode
import traceback
import os
from fastapi import Form

from dotenv import load_dotenv
import openai
from openai import AsyncOpenAI

from models import ComicRequest
from schemas.animation import AnimationRequest, AnimationResponse, AnimationStatusResponse
from services.scenario import generate_scenario
from services.image_gen import generate_images
from services.composer import compose_pages
from services.tts import generate_speech
from services.stt import transcribe_audio
from services.veo3_service_simple import veo3_service
from utils.translate import translate_text

# --- Chargement .env ---
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
TEXT_MODEL = os.getenv("TEXT_MODEL", "gpt-4o-mini")

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware pour afficher les erreurs
@app.middleware("http")
async def log_exceptions(request: Request, call_next):
    try:
        return await call_next(request)
    except Exception:
        print("üî• Exception occurred during request:")
        traceback.print_exc()
        raise

def validate_scenario(scenario, expected_num_images: int):
    scenes = scenario.get("scenes", [])
    if not scenes:
        raise ValueError("‚ùå Le sc√©nario ne contient aucune sc√®ne.")
    
    if len(scenes) != expected_num_images:
        raise ValueError(f"‚ùå Le sc√©nario contient {len(scenes)} sc√®nes au lieu de {expected_num_images}")

    for i, scene in enumerate(scenario["scenes"]):
        dialogues = scene.get("dialogues")
        if dialogues is None:
            raise ValueError(f"‚ùå La sc√®ne {i + 1} n'a pas de cl√© 'dialogues'")
        for j, dialog in enumerate(dialogues):
            if not isinstance(dialog, dict):
                raise ValueError(f"‚ùå Le dialogue {j + 1} de la sc√®ne {i + 1} est invalide")
            if "character" not in dialog or "text" not in dialog:
                raise ValueError(f"‚ùå Le dialogue {j + 1} est mal form√© : {dialog}")

@app.post("/generate_comic/")
async def generate_comic(
    style: str = Form(...),
    hero_name: str = Form(...),
    story_type: str = Form(...),
    custom_request: str = Form(...),
    num_images: int = Form(...),
    avatar_type: str = Form(None),
    custom_prompt: str = Form(None),
    emoji: str = Form(None),
    custom_image: Optional[UploadFile] = File(None)
):
    try:
        prompt = f"""
Tu es un sc√©nariste de bande dessin√©e pour enfants de 6 √† 9 ans.

Cr√©e une BD avec un h√©ros nomm√© {hero_name}, sur le th√®me "{story_type}", 
dans un style {style}. Suis cette structure :

1. La BD doit comporter exactement **{num_images} sc√®nes**, une par image.
2. Chaque sc√®ne contient :
   - Une description visuelle claire pour l'image
   - **Entre 1 et 4 dialogues maximum**, sous forme de petites bulles de BD.

3. Les dialogues doivent √™tre :
   - Fluides et naturels
   - Adapt√©s √† des enfants
   - Entre 1 et 4 phrases maximum par bulle
   - Possiblement avec une exclamation suivie d'une phrase (ex: "Wow ! C'est incroyable !")
   - Parfois un brin bavards mais jamais trop longs ni redondants avec l‚Äôimage

Utilise une structure narrative : d√©but (mise en place), probl√®me, aventure, r√©solution.

Langue : fran√ßais

{custom_request}
""".strip()

        print("üìú Prompt de g√©n√©ration :", prompt)

        # -------- LOGIQUE CHOIX AVATAR --------
        image_path = None
        try:
            if avatar_type == "photo" and custom_image:
                # Cas photo upload√©e
                image_bytes = await custom_image.read()
                os.makedirs("static/uploads", exist_ok=True)
                image_path = f"static/uploads/{custom_image.filename}"
                with open(image_path, "wb") as f:
                    f.write(image_bytes)
                print(f"üì∏ Image personnalis√©e enregistr√©e : {image_path}")

            elif avatar_type == "prompt" and custom_prompt:
                # Traduction du prompt en anglais
                prompt_en = await translate_text(custom_prompt)
                from services.image_gen import generate_hero_from_prompt
                image_path = await generate_hero_from_prompt(prompt_en)
                print(f"ü§ñ H√©ros g√©n√©r√© par prompt (traduit) : {prompt_en} -> {image_path}")

            elif avatar_type == "emoji" and emoji:
                # Emoji = image par d√©faut (mapping conseill√©)
                EMOJI_TO_FILENAME = {
                    "üë¶": "boy.png",
                    "üëß": "girl.png",
                    "üë∂": "baby.png"
                }
                filename = EMOJI_TO_FILENAME.get(emoji, "default.png")
                image_path = f"static/emojis/{filename}"
                print(f"üòÄ H√©ros emoji : {emoji} ‚Üí {image_path}")

            print("üü¢ image_path utilis√© :", image_path)
        except Exception as e:
            print("‚ùå ERREUR √©tape CHOIX AVATAR :", e)
            raise

        # --------- G√©n√©ration du sc√©nario ---------
        try:
            scenario = await generate_scenario(prompt)
            scenario["style"] = style
            print("üß† Sc√©nario g√©n√©r√© :", scenario)
            validate_scenario(scenario, expected_num_images=num_images)
            print("üü¢ G√©n√©ration sc√©nario OK")
        except Exception as e:
            print("‚ùå ERREUR √©tape SCENARIO :", e)
            raise

        # --------- G√©n√©ration des images ---------
        try:
            if avatar_type == "prompt" and custom_prompt:
                images = await generate_images(scenario, hero_prompt_en=prompt_en, init_image_path=image_path)
            else:
                images = await generate_images(scenario, init_image_path=image_path)
            print("üü¢ Images g√©n√©r√©es :", images)
            print("üü¢ Nombre d'images g√©n√©r√©es :", len(images))
        except Exception as e:
            print("‚ùå ERREUR √©tape GENERATE_IMAGES :", e)
            raise

        # --------- Affectation des images aux sc√®nes ---------
        try:
            for i, scene in enumerate(scenario["scenes"]):
                print(f"‚û°Ô∏è Ajout image √† la sc√®ne {i} : {images[i]}")
                scene["image"] = images[i]
        except Exception as e:
            print("‚ùå ERREUR √©tape AFFECTATION IMAGE SCENE :", e)
            raise

        # --------- Composition des pages finales ---------
        try:
            print("üõ†Ô∏è Lancement de compose_pages")
            result = await compose_pages(scenario)
        except Exception as e:
            print("‚ùå ERREUR √©tape COMPOSE_PAGES :", e)
            raise

        final_pages = result["final_pages"]
        for i, page in enumerate(final_pages):
            if page.startswith("/static/static/"):
                final_pages[i] = page.replace("/static/static/", "/static/")

        print("‚úÖ Pages finales :", final_pages)
        return {
            "title": result["title"],
            "pages": final_pages
        }

    except Exception as e:
        import traceback
        print("‚ùå Erreur dans /generate_comic/ :", traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/tts")
async def tts_endpoint(data: dict):
    try:
        text = data["text"]
        path = generate_speech(text)
        return {"audio_path": path}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/stt")
async def stt_endpoint(file: UploadFile = File(...)):
    try:
        temp_path = f"static/{file.filename}"
        with open(temp_path, "wb") as f:
            f.write(await file.read())
        transcription = transcribe_audio(temp_path)
        return {"transcription": transcription}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# --- Comptine ---
class RhymeRequest(BaseModel):
    rhyme_type: str
    custom_request: Optional[str] = None

@app.post("/generate_rhyme/")
async def generate_rhyme(request: RhymeRequest):
    try:
        prompt = f"√âcris une comptine courte, joyeuse et rythm√©e pour enfants sur le th√®me : {request.rhyme_type}.\n"
        if request.custom_request:
            prompt += f"D√©tails suppl√©mentaires : {request.custom_request}"

        client = AsyncOpenAI()

        response = await client.chat.completions.create(
            model=TEXT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8
        )
        content = response.choices[0].message.content.strip()

        # Extraire un titre nettoy√© depuis le contenu si possible
        final_title = "audio_story"
        if content.startswith("**") and "**" in content[2:]:
            final_title = content.split("**")[1].strip()

        # Nettoyer pour un nom de fichier
        safe_filename = unidecode(final_title.lower().replace(" ", "_"))

        audio_path = generate_speech(content, voice=request.voice, filename=safe_filename)

        return {
            "title": final_title,
            "content": content,
            "audio_path": audio_path
        }

    except Exception as e:
        import traceback
        print("‚ùå Erreur dans /generate_rhyme/ :", traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))

# --- Histoire / Conte ---
class AudioStoryRequest(BaseModel):
    story_type: str
    voice: Optional[str] = None
    custom_request: Optional[str] = None

@app.post("/generate_audio_story/")
async def generate_audio_story(request: AudioStoryRequest):
    try:
        print("üì• Requ√™te re√ßue sur /generate_audio_story/")
        print("üßæ Donn√©es re√ßues :", request)

        prompt = f"Raconte un conte original pour enfant sur le th√®me : {request.story_type}. "
        prompt += "Utilise un ton bienveillant, imag√© et adapt√© √† un enfant de 4 √† 8 ans. "
        if request.custom_request:
            prompt += f"D√©tails suppl√©mentaires : {request.custom_request}"

        print("üí° Prompt g√©n√©r√© :", prompt)

        client = AsyncOpenAI()

        response = await client.chat.completions.create(
            model=TEXT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8
        )

        content = response.choices[0].message.content.strip()
        print("üìù Conte g√©n√©r√© :", content[:200], "...")  # Affiche un extrait

        audio_path = None
        if request.voice:
            print("üîä G√©n√©ration audio activ√©e avec la voix :", request.voice)
            audio_path = generate_speech(content, voice=request.voice)
            print("‚úÖ Audio g√©n√©r√© :", audio_path)
        else:
            print("‚ÑπÔ∏è Aucune voix sp√©cifi√©e, audio non g√©n√©r√©.")

        return {
            "title": f"L‚Äôhistoire de {request.story_type.capitalize()}",
            "content": content,
            "audio_path": audio_path
        }

    except Exception as e:
        print("‚ùå Erreur lors de la g√©n√©ration du conte audio :")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

# === ENDPOINTS POUR LES ANIMATIONS ===

@app.post("/api/animations/generate", response_model=AnimationResponse)
async def generate_animation(request: AnimationRequest):
    """G√©n√®re une nouvelle animation avec Veo3"""
    try:
        print(f"üé¨ G√©n√©ration d'animation demand√©e: {request.style} - {request.theme}")
        
        animation = await veo3_service.generate_animation(request)
        
        print(f"‚úÖ Animation cr√©√©e avec l'ID: {animation.id}")
        return animation
        
    except Exception as e:
        print("‚ùå Erreur lors de la g√©n√©ration d'animation:")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/animations/{animation_id}/status", response_model=AnimationStatusResponse)
async def get_animation_status(animation_id: str):
    """R√©cup√®re le statut d'une animation"""
    try:
        status = await veo3_service.get_animation_status(animation_id)
        return status
        
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        print("‚ùå Erreur lors de la r√©cup√©ration du statut:")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/animations/{animation_id}", response_model=AnimationResponse)
async def get_animation(animation_id: str):
    """R√©cup√®re une animation compl√®te"""
    try:
        animation = await veo3_service.get_animation(animation_id)
        return animation
        
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        print("‚ùå Erreur lors de la r√©cup√©ration de l'animation:")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/animations")
async def get_user_animations(page: int = 1, limit: int = 10):
    """R√©cup√®re les animations d'un utilisateur (simulation)"""
    try:
        # Dans un vrai projet, on filtrerait par utilisateur
        # Pour la d√©mo, on retourne toutes les animations stock√©es
        animations = []
        for anim_id, anim_data in veo3_service.animations_storage.items():
            animation = AnimationResponse(**anim_data["animation"])
            animations.append(animation)
        
        # Pagination simple
        start_idx = (page - 1) * limit
        end_idx = start_idx + limit
        paginated_animations = animations[start_idx:end_idx]
        
        return {
            "animations": paginated_animations,
            "total": len(animations),
            "page": page,
            "limit": limit,
            "total_pages": (len(animations) + limit - 1) // limit
        }
        
    except Exception as e:
        print("‚ùå Erreur lors de la r√©cup√©ration des animations:")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

# Cleanup √† la fermeture
@app.on_event("shutdown")
async def shutdown_event():
    """Nettoie les ressources √† la fermeture"""
    await veo3_service.close()
