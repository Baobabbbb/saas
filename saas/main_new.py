"""
Backend principal pour la g√©n√©ration de dessins anim√©s
Pipeline personnalis√© sans CrewAI - utilise GPT-4o-mini + SD3-Turbo
"""
from fastapi import FastAPI, HTTPException, UploadFile, File, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import Optional, Dict, Any
import traceback
import os
import json
import time
import uuid
from fastapi import Form

from dotenv import load_dotenv
import openai
from openai import AsyncOpenAI

# Schemas
from datetime import datetime

# Services utilitaires
from services.tts import generate_speech
from services.stt import transcribe_audio
from services.coloring_generator import ColoringGenerator
from utils.translate import translate_text

# --- Chargement .env ---
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
TEXT_MODEL = os.getenv("TEXT_MODEL", "gpt-4o-mini")

app = FastAPI(
    title="API Histoires et Coloriages", 
    version="2.0", 
    description="API pour g√©n√©rer des histoires et des coloriages personnalis√©s"
)

# Configuration des fichiers statiques
from pathlib import Path

static_dir = Path("static")
static_dir.mkdir(exist_ok=True)

# Monter les r√©pertoires statiques
app.mount("/static", StaticFiles(directory="static"), name="static")
app.mount("/cache", StaticFiles(directory="cache"), name="cache")

# CORS avec support UTF-8
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://localhost:5174", "http://localhost:5175", "http://localhost:5177"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware pour afficher les erreurs
@app.middleware("http")
async def log_exceptions(request: Request, call_next):
    try:
        return await call_next(request)
    except Exception:
        print("üî• Exception occurred during request:")
        traceback.print_exc()
        raise

# === ROUTES DE BASE ===

@app.get("/")
async def root():
    """Page d'accueil de l'API"""
    return {
        "message": "üé¨ API Dessins Anim√©s v2.0",
        "description": "Pipeline personnalis√© pour la g√©n√©ration de dessins anim√©s",
        "pipeline": "GPT-4o-mini + SD3-Turbo",
        "status": "ready",
        "endpoints": {
            "story": "/generate_story/",
            "coloring": "/generate_coloring/",
            "diagnostic": "/diagnostic",
            "health": "/health"
        }
    }

@app.get("/health")
async def health():
    """V√©rification de l'√©tat de sant√© de l'API"""
    return {
        "status": "healthy",
        "timestamp": time.time(),
        "pipeline": "story_coloring_api",
        "services": {
            "story_generator": "ready",
            "coloring_generator": "ready",
            "tts_service": "ready"
        }
    }

@app.get("/diagnostic")
async def diagnostic():
    """Route de diagnostic pour v√©rifier la configuration des cl√©s API"""
    openai_key = os.getenv("OPENAI_API_KEY")
    stability_key = os.getenv("STABILITY_API_KEY")
    
    return {
        "openai_configured": openai_key is not None and not openai_key.startswith("sk-votre"),
        "stability_configured": stability_key is not None and not stability_key.startswith("sk-votre"),
        "text_model": TEXT_MODEL,
        "openai_key_preview": f"{openai_key[:10]}..." if openai_key else "Non configur√©e",
        "stability_key_preview": f"{stability_key[:10]}..." if stability_key else "Non configur√©e",
        "pipeline_version": "2.0",
        "framework": "Custom (sans CrewAI)"
    }

# === SERVICES UTILITAIRES (TTS, STT, etc.) ===

@app.post("/tts")
async def tts_endpoint(data: dict):
    """G√©n√©ration de synth√®se vocale"""
    try:
        text = data["text"]
        path = generate_speech(text)
        return {"audio_path": path}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/stt")
async def stt_endpoint(file: UploadFile = File(...)):
    """Reconnaissance vocale"""
    try:
        temp_path = f"static/{file.filename}"
        with open(temp_path, "wb") as f:
            f.write(await file.read())
        transcription = transcribe_audio(temp_path)
        return {"transcription": transcription}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# === G√âN√âRATION DE COMPTINES ===

class RhymeRequest(BaseModel):
    rhyme_type: str
    custom_request: Optional[str] = None

class StoryRequest(BaseModel):
    story_type: str
    voice: str
    custom_request: Optional[str] = None

@app.post("/generate_rhyme/")
async def generate_rhyme(request: RhymeRequest):
    """G√©n√©ration de comptines pour enfants"""
    try:
        # V√©rifier la cl√© API
        openai_key = os.getenv("OPENAI_API_KEY")
        if not openai_key or openai_key.startswith("sk-votre"):
            raise HTTPException(
                status_code=400, 
                detail="‚ùå Cl√© API OpenAI non configur√©e. Veuillez configurer OPENAI_API_KEY dans le fichier .env"
            )
        
        prompt = f"√âcris une comptine courte, joyeuse et rythm√©e pour enfants sur le th√®me : {request.rhyme_type}.\n"
        if request.custom_request:
            prompt += f"Demande sp√©cifique : {request.custom_request}\n"
        prompt += """La comptine doit √™tre en fran√ßais, adapt√©e aux enfants de 3 √† 8 ans, avec des rimes simples et un rythme enjou√©.

IMPORTANT : G√©n√®re aussi un titre court et attractif pour cette comptine (maximum 4-5 mots), qui plaira aux enfants de 3-8 ans. Le titre doit √™tre simple et joyeux.

Format de r√©ponse attendu :
TITRE: [titre de la comptine]
COMPTINE: [texte de la comptine]"""

        client = AsyncOpenAI(api_key=openai_key)
        
        response = await client.chat.completions.create(
            model=TEXT_MODEL,
            messages=[
                {"role": "system", "content": "Tu es un sp√©cialiste des comptines pour enfants. Tu √©cris des textes courts, amusants et √©ducatifs."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=300,
            temperature=0.8
        )
        
        content = response.choices[0].message.content
        if content:
            content = content.strip()
        else:
            content = ""
        
        # Extraire le titre et le contenu
        lines = content.split('\n')
        title = ""
        rhyme_text = ""
        
        for line in lines:
            if line.startswith("TITRE:"):
                title = line.replace("TITRE:", "").strip()
            elif line.startswith("COMPTINE:"):
                rhyme_text = line.replace("COMPTINE:", "").strip()
            elif not title and not rhyme_text:
                # Si pas de format, prendre la premi√®re ligne comme titre
                title = line.strip()
            else:
                rhyme_text += line + "\n"
        
        # Nettoyer le texte
        rhyme_text = rhyme_text.strip()
        
        return {
            "title": title if title else "Comptine joyeuse",
            "rhyme": rhyme_text if rhyme_text else content,
            "theme": request.rhyme_type,
            "model_used": TEXT_MODEL
        }
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration comptine: {e}")
        traceback.print_exc()
        raise HTTPException(
            status_code=500,
            detail=f"‚ùå Erreur lors de la g√©n√©ration de la comptine: {str(e)}"
        )

@app.post("/generate_story/")
async def generate_story(request: StoryRequest):
    """G√©n√©ration d'histoires pour enfants"""
    try:
        # V√©rifier la cl√© API
        openai_key = os.getenv("OPENAI_API_KEY")
        if not openai_key or openai_key.startswith("sk-votre"):
            raise HTTPException(
                status_code=400, 
                detail="‚ùå Cl√© API OpenAI non configur√©e. Veuillez configurer OPENAI_API_KEY dans le fichier .env"
            )
        
        prompt = f"√âcris une courte histoire pour enfants sur le th√®me : {request.story_type}.\n"
        if request.custom_request:
            prompt += f"Demande sp√©cifique : {request.custom_request}\n"
        prompt += f"""L'histoire doit √™tre racont√©e par un {request.voice}. Adapte le style de narration en cons√©quence :
- grand-pere : ton bienveillant et sage, avec des anecdotes
- grand-mere : ton chaleureux et maternel, avec de la tendresse
- pere : ton protecteur et aventurier, avec de l'enthousiasme
- mere : ton doux et rassurant, avec de l'amour
- petit-garcon : ton espi√®gle et curieux, avec de l'√©merveillement
- petite-fille : ton joyeux et imaginatif, avec de la fantaisie

L'histoire doit √™tre en fran√ßais, adapt√©e aux enfants de 3 √† 8 ans, avec un message positif et √©ducatif.

IMPORTANT : G√©n√®re aussi un titre court et attractif pour cette histoire (maximum 4-5 mots), qui plaira aux enfants de 3-8 ans.

Format de r√©ponse attendu :
TITRE: [titre de l'histoire]
HISTOIRE: [texte de l'histoire]"""

        client = AsyncOpenAI(api_key=openai_key)
        response = await client.chat.completions.create(
            model=TEXT_MODEL,
            messages=[
                {"role": "system", "content": "Tu es un conteur expert pour enfants. Tu √©cris des histoires captivantes, √©ducatives et adapt√©es √† l'√¢ge."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=800,
            temperature=0.8
        )
        
        content = response.choices[0].message.content
        if content:
            content = content.strip()
        else:
            content = ""
        
        # Extraire le titre et le contenu
        lines = content.split('\n')
        title = ""
        story_text = ""
        
        for line in lines:
            if line.startswith("TITRE:"):
                title = line.replace("TITRE:", "").strip()
            elif line.startswith("HISTOIRE:"):
                story_text = line.replace("HISTOIRE:", "").strip()
            elif not title and not story_text:
                # Si pas de format, prendre la premi√®re ligne comme titre
                title = line.strip()
            else:
                story_text += line + "\n"
        
        # Nettoyer le texte
        story_text = story_text.strip()
        
        # G√©n√©rer l'audio avec la voix s√©lectionn√©e
        audio_path = None
        try:
            if story_text:
                audio_path = generate_speech(story_text, voice=request.voice)
        except Exception as audio_error:
            print(f"‚ö†Ô∏è Erreur g√©n√©ration audio: {audio_error}")
            # On continue sans audio si erreur
        
        return {
            "title": title if title else "Histoire merveilleuse",
            "content": story_text if story_text else content,
            "theme": request.story_type,
            "voice": request.voice,
            "audio_path": audio_path,
            "model_used": TEXT_MODEL
        }
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration histoire: {e}")
        traceback.print_exc()
        raise HTTPException(
            status_code=500,
            detail=f"‚ùå Erreur lors de la g√©n√©ration de l'histoire: {str(e)}"
        )

# === G√âN√âRATEUR DE COLORIAGES ===

@app.post("/generate_coloring/")
async def generate_coloring(request: dict):
    """G√©n√©ration de pages de coloriage"""
    try:
        openai_key = os.getenv("OPENAI_API_KEY")
        if not openai_key or openai_key.startswith("sk-votre"):
            raise HTTPException(
                status_code=400, 
                detail="‚ùå Cl√© API OpenAI non configur√©e. Veuillez configurer OPENAI_API_KEY dans le fichier .env"
            )
        
        generator = ColoringGenerator()
        
        theme = request.get("theme", "animal")
        style = request.get("style", "simple")
        age_group = request.get("age_group", "3-6")
        
        result = await generator.generate_coloring_pages(theme)
        
        return result
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration coloriage: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# === TRADUCTION ===

@app.post("/translate/")
async def translate_endpoint(request: dict):
    """Service de traduction"""
    try:
        text = request.get("text", "")
        target_language = request.get("target_language", "en")
        
        if not text:
            raise HTTPException(status_code=400, detail="Texte requis")
        
        translated = translate_text(text, target_language)
        
        return {
            "original_text": text,
            "translated_text": translated,
            "target_language": target_language,
            "status": "success"
        }
        
    except Exception as e:
        print(f"‚ùå Erreur traduction: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# === INFORMATIONS PIPELINE ===

@app.get("/api/pipeline/info")
async def pipeline_info():
    """Informations sur l'API d'histoires et coloriages"""
    return {
        "name": "API Histoires et Coloriages v2.0",
        "description": "API personnalis√©e pour la g√©n√©ration d'histoires et de coloriages",
        "framework": "FastAPI + OpenAI + DALL-E",
        "features": [
            "1. G√©n√©ration d'histoires personnalis√©es (GPT-4o-mini)",
            "2. Synth√®se vocale pour narration",
            "3. G√©n√©ration de coloriages th√©matiques (DALL-E)",
            "4. Support multilingue et personnalisation"
        ],
        "supported_durations": "30-300 secondes",
        "supported_styles": ["cartoon", "anime", "realistic"],
        "max_scenes": 10,
        "quality": "HD (1024x576)",
        "features": [
            "Style visuel coh√©rent",
            "Dur√©e personnalisable",
            "Assemblage automatique",
            "Fallback robuste",
            "Cache optimis√©"
        ]
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
