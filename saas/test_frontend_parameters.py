#!/usr/bin/env python3
"""
Test des param√®tres frontend compatibles Stable Diffusion/Runway
"""
import asyncio
import json
import aiohttp
from pathlib import Path
import sys

# Ajouter le r√©pertoire parent au PYTHONPATH
sys.path.append(str(Path(__file__).parent))

from services.crewai_animation import CrewAIAnimationService

async def test_frontend_parameters():
    """Test que tous les param√®tres frontend sont compatibles"""
    
    print("üé¨ Test des param√®tres frontend compatibles Stable Diffusion/Runway")
    print("=" * 60)
    
    # Param√®tres de test bas√©s sur le frontend
    test_cases = [
        {
            "name": "Cartoon + Aventure + Joyeux",
            "story": "Un petit chat orange explore un jardin magique rempli de fleurs color√©es.",
            "style": "cartoon",
            "theme": "adventure", 
            "mood": "joyful"
        },
        {
            "name": "Anime + Espace + Magique",
            "story": "Luna voyage vers une plan√®te myst√©rieuse peupl√©e de cr√©atures lumineuses.",
            "style": "anime",
            "theme": "space",
            "mood": "magical"
        },
        {
            "name": "Aquarelle + For√™t + Paisible",
            "story": "Une petite f√©e aide les animaux de la for√™t enchant√©e √† retrouver leur chemin.",
            "style": "watercolor",
            "theme": "forest",
            "mood": "peaceful"
        },
        {
            "name": "Pixel Art + Ville + Ludique",
            "story": "Un robot color√© aide les habitants de la ville futuriste √† r√©soudre des √©nigmes.",
            "style": "pixel_art",
            "theme": "city",
            "mood": "playful"
        },
        {
            "name": "P√¢te √† modeler + Animaux + Aventureux",
            "story": "Un groupe d'animaux part en exp√©dition pour d√©couvrir un tr√©sor cach√©.",
            "style": "claymation",
            "theme": "animals",
            "mood": "adventurous"
        }
    ]
    
    # Initialiser le service CrewAI
    service = CrewAIAnimationService()
    
    results = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüé≠ Test {i}/{len(test_cases)}: {test_case['name']}")
        print("-" * 40)
        
        try:
            # Cr√©er les param√®tres de style
            style_preferences = {
                "style": test_case["style"],
                "theme": test_case["theme"], 
                "mood": test_case["mood"],
                "target_age": "3-8 ans"
            }
            
            print(f"üìù Histoire: {test_case['story'][:50]}...")
            print(f"üé® Style: {style_preferences['style']}")
            print(f"üåç Th√®me: {style_preferences['theme']}")
            print(f"üòä Ambiance: {style_preferences['mood']}")
            
            # Test de la g√©n√©ration des prompts
            result = await service.generate_crew_animation(
                story=test_case["story"],
                style_preferences=style_preferences
            )
            
            if result.get("status") == "success":
                print("‚úÖ Param√®tres valid√©s avec succ√®s")
                
                # V√©rifier que les param√®tres sont pr√©sents dans les prompts
                scenes = result.get("scenes", [])
                prompts_valid = True
                
                for scene in scenes:
                    prompt = scene.get("prompt", "").lower()
                    if not any(keyword in prompt for keyword in [
                        test_case["style"], 
                        test_case["theme"], 
                        test_case["mood"]
                    ]):
                        prompts_valid = False
                        break
                
                if prompts_valid:
                    print("‚úÖ Prompts g√©n√©r√©s correctement avec les param√®tres")
                else:
                    print("‚ö†Ô∏è  Param√®tres partiellement int√©gr√©s dans les prompts")
                    
                results.append({
                    "test": test_case["name"],
                    "status": "success",
                    "scenes_count": len(scenes),
                    "prompts_valid": prompts_valid
                })
                
            else:
                print(f"‚ùå √âchec: {result.get('error', 'Erreur inconnue')}")
                results.append({
                    "test": test_case["name"],
                    "status": "failed",
                    "error": result.get('error', 'Erreur inconnue')
                })
                
        except Exception as e:
            print(f"‚ùå Erreur d'ex√©cution: {str(e)}")
            results.append({
                "test": test_case["name"],
                "status": "error",
                "error": str(e)
            })
    
    # R√©sum√© des r√©sultats
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)
    
    success_count = len([r for r in results if r["status"] == "success"])
    total_count = len(results)
    
    print(f"‚úÖ Tests r√©ussis: {success_count}/{total_count}")
    
    if success_count == total_count:
        print("üéâ Tous les param√®tres frontend sont compatibles avec Stable Diffusion/Runway!")
    else:
        print("‚ö†Ô∏è  Certains param√®tres n√©cessitent des ajustements")
        
        # Afficher les √©checs
        for result in results:
            if result["status"] != "success":
                print(f"‚ùå {result['test']}: {result.get('error', '√âchec')}")
    
    # Sauvegarder les r√©sultats
    with open("test_frontend_parameters_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ R√©sultats sauvegard√©s dans test_frontend_parameters_results.json")
    
    return success_count == total_count

async def main():
    """Fonction principale"""
    try:
        success = await test_frontend_parameters()
        exit_code = 0 if success else 1
        
        print(f"\nüèÅ Test termin√© avec le code de sortie: {exit_code}")
        return exit_code
        
    except Exception as e:
        print(f"\nüí• Erreur fatale: {str(e)}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
