#!/usr/bin/env python3
"""
Test rapide de g√©n√©ration d'animation avec gestion d'erreur am√©lior√©e
"""

import requests
import json
import time

def test_animation_generation():
    """Test de g√©n√©ration d'animation via l'API"""
    
    print("üé¨ Test de g√©n√©ration d'animation am√©lior√©")
    print("=" * 50)
    
    api_url = "http://127.0.0.1:8000/api/animations/generate"
    
    # Donn√©es de test
    payload = {
        "style": "cartoon",
        "theme": "animals",
        "orientation": "landscape", 
        "prompt": "cute animals having fun in a magical forest"
    }
    
    print("üìù Param√®tres:")
    for key, value in payload.items():
        print(f"   {key}: {value}")
    
    print("\nüöÄ Lancement de la g√©n√©ration...")
    
    try:
        # Envoyer la requ√™te
        start_time = time.time()
        response = requests.post(api_url, json=payload, timeout=1200)  # 20 minutes max
        elapsed_time = time.time() - start_time
        
        print(f"‚è±Ô∏è Temps de r√©ponse: {elapsed_time:.1f} secondes")
        
        if response.status_code == 200:
            data = response.json()
            
            print("\n‚úÖ G√©n√©ration termin√©e avec succ√®s!")
            print(f"   ID: {data.get('id')}")
            print(f"   Titre: {data.get('title')}")
            print(f"   Description: {data.get('description')}")
            print(f"   Statut: {data.get('status')}")
            print(f"   URL Vid√©o: {data.get('video_url')}")
            print(f"   URL Thumbnail: {data.get('thumbnail_url')}")
            
            # Analyser le mode utilis√©
            description = data.get('description', '').lower()
            if 'simulation' in description:
                if 'timeout' in description:
                    print("\n‚ö†Ô∏è Mode simulation activ√© √† cause d'un timeout")
                    print("   La g√©n√©ration Runway prenait trop de temps")
                elif 'cr√©dits' in description:
                    print("\n‚ö†Ô∏è Mode simulation activ√© √† cause des cr√©dits")
                    print("   Cr√©dits insuffisants sur le compte Runway")
                else:
                    print("\n‚ö†Ô∏è Mode simulation activ√©")
                print("   Une vid√©o d'exemple est fournie imm√©diatement")
            else:
                print("\nüéâ G√©n√©ration r√©elle via Runway Gen-4 r√©ussie!")
                
        else:
            print(f"\n‚ùå Erreur HTTP: {response.status_code}")
            print(f"D√©tails: {response.text}")
            
    except requests.exceptions.Timeout:
        print("\n‚è∞ Timeout de la requ√™te - Le serveur prend trop de temps")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")

def test_credits_status():
    """Test de v√©rification des cr√©dits"""
    
    print("\nüîç V√©rification des cr√©dits Runway...")
    print("-" * 30)
    
    try:
        response = requests.get("http://127.0.0.1:8000/api/runway/credits")
        if response.status_code == 200:
            data = response.json()
            print(f"   Statut: {data.get('status')}")
            print(f"   Cr√©dits disponibles: {'‚úÖ' if data.get('credits_available') else '‚ùå'}")
            if data.get('error_details'):
                print(f"   D√©tails: {data['error_details'].get('error', 'N/A')}")
        else:
            print(f"   ‚ùå Erreur: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")

if __name__ == "__main__":
    # Test des cr√©dits d'abord
    test_credits_status()
    
    # Puis test de g√©n√©ration
    test_animation_generation()
    
    print("\nüéØ R√©sum√©:")
    print("   - Le syst√®me d√©tecte automatiquement les probl√®mes")
    print("   - En cas de timeout ou d'erreur, bascule en simulation")
    print("   - L'utilisateur obtient toujours une r√©ponse rapidement")
    print("   - Les timeouts sont maintenant g√©r√©s sur 20 minutes max")
