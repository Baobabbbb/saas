"""
Pipeline compl√®te de g√©n√©ration de dessins anim√©s
Transforme une histoire en vid√©o anim√©e coh√©rente
"""
import os
import json
import time
import asyncio
import uuid
from typing import Dict, List, Any, Optional
from pathlib import Path
import aiohttp
from dotenv import load_dotenv

load_dotenv()

class AnimationPipeline:
    """Pipeline principal pour la g√©n√©ration de dessins anim√©s"""
    
    def __init__(self):
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        self.stability_api_key = os.getenv("STABILITY_API_KEY")
        self.cache_dir = Path("cache/animations")
        self.cache_dir.mkdir(parents=True, exist_ok=True)
        
        # Configuration par d√©faut
        self.min_duration = 30  # 30 secondes minimum
        self.max_duration = 300  # 5 minutes maximum
        self.scene_min_duration = 5  # 5 secondes minimum par sc√®ne
        self.scene_max_duration = 15  # 15 secondes maximum par sc√®ne
        
        print(f"üé¨ Pipeline Animation initialis√©e")
        print(f"   üìÅ Cache: {self.cache_dir}")
        print(f"   ‚è±Ô∏è Dur√©e: {self.min_duration}s - {self.max_duration}s")
    
    async def generate_animation(self, story: str, target_duration: int = 60, style_hint: str = "cartoon") -> Dict[str, Any]:
        """
        Pipeline compl√®te de g√©n√©ration d'animation
        
        Args:
            story: Histoire √† transformer en animation
            target_duration: Dur√©e cible en secondes (30-300)
            style_hint: Style visuel souhait√©
            
        Returns:
            Dictionnaire avec le r√©sultat de l'animation
        """
        animation_id = str(uuid.uuid4())[:8]
        start_time = time.time()
        
        print(f"üé¨ === D√âBUT PIPELINE ANIMATION {animation_id} ===")
        print(f"üìñ Histoire: {story[:100]}...")
        print(f"‚è±Ô∏è Dur√©e cible: {target_duration}s")
        print(f"üé® Style: {style_hint}")
        
        try:
            # √âtape 1: Analyse et d√©coupage de l'histoire
            print(f"\nüìù √âTAPE 1: Analyse et d√©coupage")
            scenes = await self._analyze_and_segment_story(story, target_duration)
            print(f"‚úÖ {len(scenes)} sc√®nes g√©n√©r√©es")
            
            # √âtape 2: D√©finition du style graphique
            print(f"\nüé® √âTAPE 2: D√©finition du style")
            visual_style = await self._define_visual_style(story, style_hint)
            print(f"‚úÖ Style d√©fini: {visual_style.get('name', 'Unknown')}")
            
            # √âtape 3: G√©n√©ration des prompts vid√©o
            print(f"\nüéØ √âTAPE 3: G√©n√©ration des prompts")
            video_prompts = await self._generate_video_prompts(scenes, visual_style)
            print(f"‚úÖ {len(video_prompts)} prompts g√©n√©r√©s")
            
            # √âtape 4: G√©n√©ration des vid√©os
            print(f"\nüé• √âTAPE 4: G√©n√©ration des vid√©os")
            video_clips = await self._generate_video_clips(video_prompts, animation_id)
            print(f"‚úÖ {len(video_clips)} clips g√©n√©r√©s")
            
            # √âtape 5: Assemblage final
            print(f"\nüéûÔ∏è √âTAPE 5: Assemblage final")
            final_video = await self._assemble_final_video(video_clips, animation_id)
            print(f"‚úÖ Vid√©o finale assembl√©e")
            
            # Calcul du temps total
            total_time = time.time() - start_time
            actual_duration = sum(clip.get('duration', 0) for clip in video_clips)
            
            # R√©sultat final
            result = {
                "status": "success",
                "animation_id": animation_id,
                "videoUrl": final_video['url'],
                "video_url": final_video['url'],
                "story": story,
                "target_duration": target_duration,
                "actual_duration": actual_duration,
                "scenes": scenes,
                "scenes_details": scenes,
                "video_clips": video_clips,
                "visual_style": visual_style,
                "generation_time": round(total_time, 2),
                "pipeline_type": "custom_animation",
                "quality": "sd3_turbo",
                "total_scenes": len(scenes),
                "note": f"üé¨ Animation g√©n√©r√©e avec pipeline personnalis√©"
            }
            
            print(f"\nüéâ === PIPELINE TERMIN√â ===")
            print(f"‚è±Ô∏è Temps total: {total_time:.1f}s")
            print(f"üé¨ Dur√©e vid√©o: {actual_duration}s")
            print(f"üìä Sc√®nes: {len(scenes)}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå Erreur dans le pipeline: {e}")
            import traceback
            traceback.print_exc()
            
            return {
                "status": "failed",
                "animation_id": animation_id,
                "error": str(e),
                "story": story,
                "generation_time": round(time.time() - start_time, 2),
                "pipeline_type": "custom_animation"
            }
    
    async def _analyze_and_segment_story(self, story: str, target_duration: int) -> List[Dict[str, Any]]:
        """
        √âtape 1: Analyser et d√©couper l'histoire en sc√®nes
        """
        from services.story_analyzer import StoryAnalyzer
        analyzer = StoryAnalyzer(self.openai_api_key)
        return await analyzer.segment_story(story, target_duration, self.scene_min_duration, self.scene_max_duration)
    
    async def _define_visual_style(self, story: str, style_hint: str) -> Dict[str, Any]:
        """
        √âtape 2: D√©finir le style visuel coh√©rent
        """
        from services.visual_style_generator import VisualStyleGenerator
        style_generator = VisualStyleGenerator(self.openai_api_key)
        return await style_generator.generate_visual_style(story, style_hint)
    
    async def _generate_video_prompts(self, scenes: List[Dict], visual_style: Dict) -> List[Dict[str, Any]]:
        """
        √âtape 3: G√©n√©rer des prompts vid√©o d√©taill√©s
        """
        from services.video_prompt_generator import VideoPromptGenerator
        prompt_generator = VideoPromptGenerator(self.openai_api_key)
        return await prompt_generator.generate_prompts(scenes, visual_style)
    
    async def _generate_video_clips(self, video_prompts: List[Dict], animation_id: str) -> List[Dict[str, Any]]:
        """
        √âtape 4: G√©n√©rer les clips vid√©o avec SD3-Turbo
        """
        from services.video_generator import VideoGenerator
        video_generator = VideoGenerator(self.stability_api_key, self.cache_dir)
        return await video_generator.generate_clips(video_prompts, animation_id)
    
    async def _assemble_final_video(self, video_clips: List[Dict], animation_id: str) -> Dict[str, Any]:
        """
        √âtape 5: Assembler la vid√©o finale
        """
        from services.video_assembler import VideoAssembler
        assembler = VideoAssembler(self.cache_dir)
        return await assembler.assemble_video(video_clips, animation_id)

# Instance globale
animation_pipeline = AnimationPipeline()
