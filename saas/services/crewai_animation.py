"""
Architecture CrewAI pour la g√©n√©ration de dessins anim√©s narratifs
Syst√®me multi-agents pour cr√©er des vid√©os coh√©rentes √† partir de texte
"""

from crewai import Agent, Task, Crew, Process
from langchain.llms import OpenAI
import os
from typing import Dict, List, Any
from datetime import datetime
import json
import asyncio
import aiohttp
import time
from moviepy.editor import VideoFileClip, concatenate_videoclips
from pathlib import Path

class AnimationCrewAI:
    """Orchestrateur principal pour la g√©n√©ration de dessins anim√©s"""
    
    def __init__(self):
        self.llm = OpenAI(
            api_key=os.getenv("OPENAI_API_KEY"),
            model_name="gpt-4"
        )
        
        # Initialiser les agents
        self.scenario_agent = self._create_scenario_agent()
        self.art_director_agent = self._create_art_director_agent()
        self.prompt_engineer_agent = self._create_prompt_engineer_agent()
        self.technical_agent = self._create_technical_agent()
        self.video_editor_agent = self._create_video_editor_agent()
        
        print("üé¨ √âquipe CrewAI Animation initialis√©e")
        print("üë• 5 agents sp√©cialis√©s pr√™ts")

    def _create_scenario_agent(self) -> Agent:
        """üß© Agent Sc√©nariste - D√©coupe l'histoire en sc√®nes"""
        return Agent(
            role="Sc√©nariste Expert",
            goal="Transformer une histoire en s√©quences visuelles parfaites pour l'animation",
            backstory="""Tu es un sc√©nariste exp√©riment√© sp√©cialis√© dans les contenus pour enfants. 
            Tu excelles √† d√©couper une histoire en sc√®nes visuelles captivantes de 5-15 secondes chacune.
            Tu sais identifier les moments cl√©s, les transitions fluides et les actions visuellement int√©ressantes.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )

    def _create_art_director_agent(self) -> Agent:
        """üé® Agent Directeur Artistique - D√©finit le style visuel"""
        return Agent(
            role="Directeur Artistique",
            goal="Cr√©er une identit√© visuelle coh√©rente et attractive pour le dessin anim√©",
            backstory="""Tu es un directeur artistique reconnu dans l'animation pour enfants.
            Tu d√©finis des styles visuels harmonieux, des palettes de couleurs adapt√©es et
            tu assures la coh√©rence des personnages et d√©cors tout au long de l'histoire.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )

    def _create_prompt_engineer_agent(self) -> Agent:
        """üß† Agent Prompt Engineer - Optimise pour l'IA g√©n√©rative"""
        return Agent(
            role="Prompt Engineer Expert",
            goal="Cr√©er des prompts parfaits pour g√©n√©rer des vid√©os de haute qualit√©",
            backstory="""Tu es expert en IA g√©n√©rative et en cr√©ation de prompts pour Stable Diffusion Video
            et Runway. Tu sais comment formuler des descriptions pr√©cises qui produisent des vid√©os
            fluides, coh√©rentes et visuellement impressionnantes.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )

    def _create_technical_agent(self) -> Agent:
        """üì° Agent Op√©rateur Technique - G√®re la g√©n√©ration vid√©o"""
        return Agent(
            role="Op√©rateur Technique",
            goal="Orchestrer la g√©n√©ration vid√©o via API et garantir la qualit√© technique",
            backstory="""Tu es un technicien expert en int√©gration d'APIs de g√©n√©ration vid√©o.
            Tu g√®res les appels API, optimises les param√®tres techniques et assures
            que chaque clip est g√©n√©r√© correctement avec la meilleure qualit√© possible.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )

    def _create_video_editor_agent(self) -> Agent:
        """üé¨ Agent Monteur Vid√©o - Assemble le r√©sultat final"""
        return Agent(
            role="Monteur Vid√©o",
            goal="Assembler les clips en une vid√©o fluide et engageante",
            backstory="""Tu es un monteur exp√©riment√© sp√©cialis√© dans l'animation pour enfants.
            Tu sais assembler les clips pour cr√©er un rythme engageant, des transitions
            fluides et un r√©sultat final professionnel.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )

    def create_animation_tasks(self, story_text: str, style_preferences: Dict[str, str]) -> List[Task]:
        """Cr√©er les t√¢ches pour chaque agent"""
        
        # 1. T√¢che Sc√©nariste
        scenario_task = Task(
            description=f"""
            Analyse cette histoire et d√©coupe-la en sc√®nes visuelles parfaites pour l'animation :
            
            HISTOIRE : {story_text}
            
            INSTRUCTIONS :
            - Cr√©er 4 √† 12 sc√®nes de 5-15 secondes chacune
            - Chaque sc√®ne doit √™tre visuellement claire et captivante
            - Assurer une progression narrative fluide
            - Adapter le contenu pour les enfants de 3-8 ans
            - Identifier les personnages principaux et les d√©cors
            
            FORMAT DE SORTIE (JSON) :
            {{
                "scenes": [
                    {{
                        "scene_number": 1,
                        "duration": 8,
                        "description": "Description visuelle de la sc√®ne",
                        "action": "Action principale visible",
                        "characters": ["personnage1", "personnage2"],
                        "setting": "Description du d√©cor"
                    }}
                ],
                "total_scenes": 6,
                "estimated_duration": 48,
                "narrative_arc": "R√©sum√© de l'arc narratif"
            }}
            """,
            agent=self.scenario_agent,
            expected_output="Structure JSON compl√®te avec toutes les sc√®nes d√©compos√©es"
        )

        # 2. T√¢che Directeur Artistique  
        art_direction_task = Task(
            description=f"""
            D√©finis la direction artistique compl√®te pour ce dessin anim√© :
            
            PR√âF√âRENCES UTILISATEUR : {style_preferences}
            
            INSTRUCTIONS :
            - Choisir un style visuel coh√©rent et attractif
            - D√©finir une palette de couleurs harmonieuse
            - Cr√©er des descriptions d√©taill√©es pour chaque personnage
            - Assurer la coh√©rence visuelle entre toutes les sc√®nes
            - Adapter le style √† l'√¢ge cible (3-8 ans)
            
            FORMAT DE SORTIE (JSON) :
            {{
                "visual_style": "Description du style g√©n√©ral",
                "color_palette": ["couleur1", "couleur2", "couleur3"],
                "atmosphere": "Description de l'ambiance",
                "characters_design": {{
                    "character_name": {{
                        "description": "Description physique d√©taill√©e",
                        "style_keywords": ["mot-cl√©1", "mot-cl√©2"],
                        "seed": "seed_unique_12345"
                    }}
                }},
                "settings_design": {{
                    "setting_name": {{
                        "description": "Description du d√©cor",
                        "style_keywords": ["mot-cl√©1", "mot-cl√©2"]
                    }}
                }},
                "technical_specs": {{
                    "aspect_ratio": "16:9",
                    "quality_level": "high",
                    "animation_style": "smooth"
                }}
            }}
            """,
            agent=self.art_director_agent,
            expected_output="Direction artistique compl√®te en JSON"
        )

        # 3. T√¢che Prompt Engineer
        prompt_engineering_task = Task(
            description="""
            Utilise les sc√®nes du sc√©nariste et le style du directeur artistique 
            pour cr√©er des prompts optimaux pour la g√©n√©ration vid√©o.
            
            INSTRUCTIONS :
            - Cr√©er un prompt d√©taill√© pour chaque sc√®ne
            - Int√©grer le style visuel et les personnages coh√©rents
            - Optimiser pour Runway Gen-4 Turbo / Stable Diffusion Video
            - Assurer la continuit√© visuelle entre les sc√®nes
            - Inclure tous les √©l√©ments techniques n√©cessaires
            
            FORMAT DE SORTIE (JSON) :
            {{
                "video_prompts": [
                    {{
                        "scene_number": 1,
                        "prompt_text": "Prompt d√©taill√© optimis√© pour l'IA",
                        "negative_prompt": "√âl√©ments √† √©viter",
                        "duration": 8,
                        "seeds": {{"character_seed": "12345", "style_seed": "67890"}},
                        "technical_params": {{
                            "fps": 24,
                            "resolution": "1280x720",
                            "motion_strength": "medium"
                        }}
                    }}
                ],
                "global_style_prompt": "Style g√©n√©ral √† maintenir",
                "consistency_keywords": ["mot-cl√©1", "mot-cl√©2"]
            }}
            """,
            agent=self.prompt_engineer_agent,
            expected_output="Prompts optimis√©s pour toutes les sc√®nes en JSON"
        )

        # 4. T√¢che Op√©rateur Technique
        technical_task = Task(
            description="""
            Utilise les prompts cr√©√©s pour g√©n√©rer toutes les vid√©os via l'API.
            
            INSTRUCTIONS :
            - G√©n√©rer chaque sc√®ne avec les prompts fournis
            - Surveiller la qualit√© et les erreurs
            - Optimiser les param√®tres techniques
            - Assurer que toutes les vid√©os sont g√©n√©r√©es correctement
            - Fournir les m√©tadonn√©es de chaque g√©n√©ration
            
            FORMAT DE SORTIE (JSON) :
            {{
                "generated_videos": [
                    {{
                        "scene_number": 1,
                        "video_url": "URL ou chemin vers la vid√©o",
                        "actual_duration": 8.2,
                        "generation_status": "success",
                        "quality_score": 8.5,
                        "technical_metadata": {{
                            "resolution": "1280x720",
                            "fps": 24,
                            "filesize_mb": 12.5
                        }}
                    }}
                ],
                "generation_summary": {{
                    "total_videos": 6,
                    "successful_generations": 6,
                    "total_duration": 48.5,
                    "average_quality": 8.3
                }}
            }}
            """,
            agent=self.technical_agent,
            expected_output="Rapport complet de g√©n√©ration avec toutes les vid√©os"
        )

        # 5. T√¢che Monteur Vid√©o
        video_editing_task = Task(
            description="""
            Assemble toutes les vid√©os g√©n√©r√©es en un dessin anim√© final fluide.
            
            INSTRUCTIONS :
            - Assembler les clips dans l'ordre narratif
            - Cr√©er des transitions fluides entre les sc√®nes
            - Optimiser le rythme et le timing
            - S'assurer de la coh√©rence visuelle globale
            - Exporter en format haute qualit√©
            
            FORMAT DE SORTIE (JSON) :
            {{
                "final_video": {{
                    "video_url": "URL vers la vid√©o finale",
                    "total_duration": 48.5,
                    "resolution": "1280x720",
                    "fps": 24,
                    "filesize_mb": 85.2
                }},
                "editing_details": {{
                    "transitions_used": ["fade", "cut", "dissolve"],
                    "scenes_included": 6,
                    "quality_adjustments": "Correction couleur, stabilisation",
                    "export_format": "MP4"
                }},
                "final_quality_report": {{
                    "visual_consistency": 9.0,
                    "narrative_flow": 8.8,
                    "technical_quality": 9.2,
                    "overall_score": 9.0
                }}
            }}
            """,
            agent=self.video_editor_agent,
            expected_output="Vid√©o finale assembl√©e avec rapport qualit√©"
        )

        return [
            scenario_task,
            art_direction_task, 
            prompt_engineering_task,
            technical_task,
            video_editing_task
        ]

    def generate_animated_story(self, story_text: str, style_preferences: Dict[str, str] = None) -> Dict[str, Any]:
        """G√©n√®re un dessin anim√© complet √† partir d'une histoire"""
        
        if style_preferences is None:
            style_preferences = {
                "style": "cartoon",
                "mood": "joyful",
                "target_age": "3-8 years"
            }
        
        print(f"üé¨ D√©marrage g√©n√©ration dessin anim√©")
        print(f"üìù Histoire: {story_text[:100]}...")
        print(f"üé® Style: {style_preferences}")
        
        # Cr√©er les t√¢ches
        tasks = self.create_animation_tasks(story_text, style_preferences)
        
        # Cr√©er l'√©quipe CrewAI
        crew = Crew(
            agents=[
                self.scenario_agent,
                self.art_director_agent,
                self.prompt_engineer_agent,
                self.technical_agent,
                self.video_editor_agent
            ],
            tasks=tasks,
            process=Process.sequential,
            verbose=True
        )
        
        # Ex√©cuter le processus
        try:
            print("üöÄ Lancement du processus CrewAI...")
            result = crew.kickoff()
            
            return {
                "status": "success",
                "result": result,
                "timestamp": datetime.now().isoformat(),
                "story_input": story_text,
                "style_preferences": style_preferences
            }
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
            return {
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }

# Instance globale
animation_crew = AnimationCrewAI()
