"""
Service de Comptines Musicales
Combine la g√©n√©ration de paroles (OpenAI) avec la g√©n√©ration musicale (DiffRhythm)
"""

import asyncio
import os
from datetime import datetime
from typing import Dict, Any, Optional
from openai import AsyncOpenAI
from config import OPENAI_API_KEY, TEXT_MODEL
from services.diffrhythm_service import diffrhythm_service, NURSERY_RHYME_STYLES

class MusicalNurseryRhymeService:
    def __init__(self):
        self.openai_key = OPENAI_API_KEY
        self.text_model = TEXT_MODEL
        
    async def generate_complete_nursery_rhyme(
        self,
        rhyme_type: str,
        custom_request: Optional[str] = None,
        generate_music: bool = True,
        custom_style: Optional[str] = None,
        fast_mode: bool = True
    ) -> Dict[str, Any]:
        """
        G√©n√®re une comptine compl√®te avec paroles et musique
        
        Args:
            rhyme_type: Type de comptine
            custom_request: Demande personnalis√©e
            generate_music: Si True, g√©n√®re aussi la musique
            custom_style: Style musical personnalis√©
            fast_mode: Si True, optimise pour la vitesse
            
        Returns:
            Dict contenant la comptine compl√®te
        """
        try:
            print(f"üéµ G√©n√©ration comptine compl√®te: {rhyme_type} (mode {'rapide' if fast_mode else 'complet'})")
            
            # √âtape 1: G√©n√©rer les paroles (avec optimisation pour le mode rapide)
            lyrics_result = await self._generate_lyrics(rhyme_type, custom_request, fast_mode)
            
            if lyrics_result["status"] != "success":
                return lyrics_result
            
            title = lyrics_result["title"]
            lyrics = lyrics_result["lyrics"]
            
            result = {
                "status": "success",
                "title": title,
                "lyrics": lyrics,
                "rhyme_type": rhyme_type,
                "has_music": False,
                "generation_time": lyrics_result.get("generation_time", 0)
            }
            
            # √âtape 2: G√©n√©rer la musique (si demand√©)
            if generate_music:
                print(f"üéº G√©n√©ration musique pour: {title} (mode {'rapide' if fast_mode else 'complet'})")
                
                music_result = await self._generate_music(
                    lyrics, rhyme_type, custom_style, fast_mode
                )
                
                if music_result["status"] == "success":
                    result.update({
                        "has_music": True,
                        "task_id": music_result.get("task_id"),  # Exposer le task_id
                        "music_status": "pending",
                        "style_used": music_result.get("style_used")
                    })
                    print(f"üéµ G√©n√©ration musicale lanc√©e (task_id: {music_result.get('task_id')})")
                    
                    # NE PAS attendre - retourner imm√©diatement pour √©viter les timeouts
                    # Le frontend utilisera le task_id pour faire du polling
                    
                else:
                    result.update({
                        "music_status": "failed",
                        "music_error": music_result.get("error")
                    })
                    print(f"‚ö†Ô∏è Impossible de g√©n√©rer la musique: {music_result.get('error')}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration comptine compl√®te: {e}")
            return {
                "status": "error",
                "error": str(e),
                "rhyme_type": rhyme_type
            }
    
    async def _generate_lyrics(
        self, 
        rhyme_type: str, 
        custom_request: Optional[str] = None,
        fast_mode: bool = True
    ) -> Dict[str, Any]:
        """
        G√©n√®re les paroles de la comptine avec OpenAI
        """
        try:
            if not self.openai_key or self.openai_key.startswith("sk-votre"):
                raise ValueError("‚ùå Cl√© API OpenAI non configur√©e")
            
            # Construire le prompt selon le type et le mode
            style_info = NURSERY_RHYME_STYLES.get(rhyme_type, NURSERY_RHYME_STYLES["custom"])
            
            prompt = self._build_lyrics_prompt(rhyme_type, custom_request, style_info, fast_mode)
            
            client = AsyncOpenAI(api_key=self.openai_key)
            
            start_time = datetime.now()
            response = await client.chat.completions.create(
                model=self.text_model,
                messages=[
                    {
                        "role": "system", 
                        "content": "Tu es un sp√©cialiste des comptines pour enfants. Tu √©cris des paroles simples, joyeuses et faciles √† retenir, adapt√©es √† la musique." + (
                            " PRIORIT√â: Comptines tr√®s courtes et simples pour g√©n√©ration rapide." if fast_mode else ""
                        )
                    },
                    {"role": "user", "content": prompt}
                ],
                max_tokens=200 if fast_mode else 400,  # R√©duire les tokens en mode rapide
                temperature=0.7 if fast_mode else 0.8  # Moins de cr√©ativit√© = plus rapide
            )
            generation_time = (datetime.now() - start_time).total_seconds()
            
            content = response.choices[0].message.content.strip()
            
            # Parser le contenu pour extraire titre et paroles
            title, lyrics = self._parse_lyrics_response(content)
            
            return {
                "status": "success",
                "title": title,
                "lyrics": lyrics,
                "generation_time": generation_time
            }
            
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration paroles: {e}")
            return {
                "status": "error",
                "error": str(e)
            }
    
    async def _generate_music(
        self, 
        lyrics: str, 
        rhyme_type: str, 
        custom_style: Optional[str] = None,
        fast_mode: bool = True
    ) -> Dict[str, Any]:
        """
        G√©n√®re la musique avec DiffRhythm
        """
        try:
            # Formater les paroles avec timing (plus court en mode rapide)
            duration = 20 if fast_mode else 30
            formatted_lyrics = diffrhythm_service.format_lyrics_with_timing(lyrics, duration)
            
            # G√©n√©rer la musique avec le mode rapide
            result = await diffrhythm_service.generate_musical_nursery_rhyme(
                formatted_lyrics, rhyme_type, custom_style, fast_mode
            )
            
            return result
            
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration musique: {e}")
            return {
                "status": "error",
                "error": str(e)
            }
    
    def _build_lyrics_prompt(
        self, 
        rhyme_type: str, 
        custom_request: Optional[str], 
        style_info: Dict[str, str],
        fast_mode: bool = True
    ) -> str:
        """
        Construit le prompt pour la g√©n√©ration de paroles
        """
        if fast_mode:
            # Prompts optimis√©s pour la vitesse
            base_prompts = {
                "lullaby": "√âcris une berceuse tr√®s courte (4 lignes max) pour endormir",
                "counting": "√âcris une comptine courte (4 lignes max) pour compter jusqu'√† 5",
                "animal": "√âcris une comptine courte (4 lignes max) sur 2-3 animaux",
                "seasonal": "√âcris une comptine courte (4 lignes max) sur une saison",
                "educational": "√âcris une comptine courte (4 lignes max) √©ducative simple",
                "movement": "√âcris une comptine courte (4 lignes max) pour bouger",
                "custom": "√âcris une comptine tr√®s courte (4 lignes max)"
            }
        else:
            # Prompts complets
            base_prompts = {
                "lullaby": "√âcris une berceuse douce et apaisante pour endormir un enfant",
                "counting": "√âcris une comptine amusante pour apprendre √† compter de 1 √† 10",
                "animal": "√âcris une comptine sur les animaux avec leurs cris et leurs caract√©ristiques",
                "seasonal": "√âcris une comptine sur une saison ou une f√™te de l'ann√©e",
                "educational": "√âcris une comptine √©ducative pour apprendre quelque chose d'important",
                "movement": "√âcris une comptine avec des gestes et des mouvements pour bouger",
                "custom": "√âcris une comptine joyeuse et rythm√©e pour enfants"
            }
        
        base_prompt = base_prompts.get(rhyme_type, base_prompts["custom"])
        
        prompt = f"{base_prompt}.\n"
        
        if custom_request:
            prompt += f"Demande sp√©cifique : {custom_request}\n"
        
        prompt += f"""
La comptine doit √™tre :
- En fran√ßais, adapt√©e aux enfants de 3 √† 8 ans  
- Avec des rimes simples et un rythme {style_info['tempo']}
- D'ambiance {style_info['mood']}
- TR√àS COURTE : maximum 4-6 lignes total
- Avec des mots simples et r√©p√©titifs
- Format couplet simple (pas de refrain complexe)

OPTIMIS√â POUR G√âN√âRATION RAPIDE :
1. Titre : 2-3 mots maximum
2. Paroles : 4-6 lignes courtes maximum  
3. Mots tr√®s simples, faciles √† chanter
4. Rimes √©videntes (ex: chat/l√†, rouge/bouge)

Format de r√©ponse :
TITRE: [titre court]
PAROLES: [4-6 lignes courtes avec rimes]
"""
        
        return prompt
    
    def _parse_lyrics_response(self, content: str) -> tuple[str, str]:
        """
        Parse la r√©ponse de l'IA pour extraire titre et paroles
        """
        lines = content.split('\n')
        title = ""
        lyrics = ""
        
        collecting_lyrics = False
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            if line.startswith("TITRE:"):
                title = line.replace("TITRE:", "").strip()
            elif line.startswith("PAROLES:"):
                lyrics = line.replace("PAROLES:", "").strip()
                collecting_lyrics = True
            elif collecting_lyrics:
                lyrics += "\n" + line
            elif not title and not collecting_lyrics:
                # Si pas de format structur√©, prendre la premi√®re ligne comme titre
                title = line
                collecting_lyrics = True
        
        # Nettoyer et valider
        title = title or "Comptine Joyeuse"
        lyrics = lyrics.strip() or content
        
        return title, lyrics

# Instance globale du service
musical_nursery_rhyme_service = MusicalNurseryRhymeService()
