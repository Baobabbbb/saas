import os
import json
import random
import re
from openai import OpenAI
from config import OPENAI_API_KEY, TEXT_MODEL

client = OpenAI(api_key=OPENAI_API_KEY)

def extract_json_from_response(text: str) -> str:
    """
    Extrait un bloc JSON valide √† partir d'un texte qui peut contenir du Markdown ou d'autres √©l√©ments parasites.
    """
    try:
        # Recherche de bloc ```json ... ```
        match = re.search(r"```(?:json)?\s*({.*?})\s*```", text, re.DOTALL)
        if match:
            return match.group(1)
        # Sinon on tente un fallback brut
        return text.strip()
    except Exception as e:
        raise ValueError("Impossible d'extraire du JSON proprement.") from e

async def generate_scenario(prompt: str, style: str = None):
    """
    G√©n√®re un sc√©nario structur√© pour une bande dessin√©e √† partir d'un prompt.
    Ajoute une seed et le style utilis√© dans la structure retourn√©e.
    """
    response = client.chat.completions.create(
        model=TEXT_MODEL,
        messages=[
            {
                "role": "system",
                "content": (
                    "Tu es un sc√©nariste de bande dessin√©e. G√©n√®re une histoire courte divis√©e en sc√®nes. "
                    "Pour chaque sc√®ne, donne une description visuelle + des dialogues. "
                    "R√©ponds uniquement avec un JSON structur√© comme suit : "
                    "{ 'title': str, 'scenes': [ { 'description': str, 'dialogues': [ { 'character': str, 'text': str } ] } ] }"
                )
            },
            {
                "role": "user",
                "content": f"Cr√©e une bande dessin√©e √† partir de ce th√®me : {prompt}"
            }
        ],
        temperature=0.8
    )

    raw_text = response.choices[0].message.content

    print("üß™ Texte brut re√ßu :")
    print(repr(raw_text))

    if not raw_text or not raw_text.strip():
        raise ValueError("‚ùå Le mod√®le n'a rien renvoy√© (r√©ponse vide)")

    try:
        clean_text = extract_json_from_response(raw_text)
        scenario = json.loads(clean_text)
    except json.JSONDecodeError as e:
        print("‚ùå Erreur JSON : contenu re√ßu non valide")
        print(raw_text)
        raise ValueError("La r√©ponse du mod√®le n'est pas un JSON valide") from e

    if "seed" not in scenario or not isinstance(scenario["seed"], int):
        scenario["seed"] = random.randint(0, 2_147_483_647)
        print(f"üî¢ Seed g√©n√©r√©e automatiquement : {scenario['seed']}")
    else:
        print(f"üéØ Seed d√©j√† pr√©sente dans la r√©ponse : {scenario['seed']}")

    if style:
        scenario["style"] = style
        print(f"üé® Style inject√© dans le sc√©nario : {style}")

    return scenario
