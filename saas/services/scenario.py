import os
import json
import random
import re
from openai import OpenAI
from config import OPENAI_API_KEY, TEXT_MODEL
# Importation du service CrewAI pour l'am√©lioration des BD
from services.crewai_text_enhancer import get_crewai_comic_enhancer

client = OpenAI(api_key=OPENAI_API_KEY)

def extract_json_from_response(text: str) -> str:
    """
    Extrait un bloc JSON valide √† partir d'un texte qui peut contenir du Markdown ou d'autres √©l√©ments parasites.
    """
    try:
        # Recherche de bloc ```json ... ```
        match = re.search(r"```(?:json)?\s*({.*?})\s*```", text, re.DOTALL)
        if match:
            return match.group(1)
        # Sinon on tente un fallback brut
        return text.strip()
    except Exception as e:
        raise ValueError("Impossible d'extraire du JSON proprement.") from e

async def generate_scenario(prompt: str, style: str = None, use_crewai: bool = True, num_images: int = 3):
    """
    G√©n√®re un sc√©nario structur√© pour une bande dessin√©e √† partir d'un prompt.
    Utilise CrewAI pour am√©liorer la qualit√© si use_crewai=True.
    """
    # G√©n√©ration du sc√©nario de base
    response = client.chat.completions.create(
        model=TEXT_MODEL,
        messages=[
            {
                "role": "system",
                "content": (
                    f"Tu es un sc√©nariste de bande dessin√©e. G√©n√®re une histoire courte divis√©e en EXACTEMENT {num_images} sc√®nes. "
                    "Pour chaque sc√®ne, donne une description visuelle + des dialogues. "
                    "R√©ponds uniquement avec un JSON structur√© comme suit : "
                    "{ 'title': str, 'scenes': [ { 'description': str, 'dialogues': [ { 'character': str, 'text': str } ] } ] }"
                )
            },
            {
                "role": "user",
                "content": f"Cr√©e une bande dessin√©e de {num_images} sc√®nes √† partir de ce th√®me : {prompt}"
            }
        ],
        temperature=0.8
    )

    raw_text = response.choices[0].message.content

    print("üß™ Texte brut re√ßu :")
    print(repr(raw_text))

    if not raw_text or not raw_text.strip():
        raise ValueError("‚ùå Le mod√®le n'a rien renvoy√© (r√©ponse vide)")

    try:
        clean_text = extract_json_from_response(raw_text)
        base_scenario = json.loads(clean_text)
    except json.JSONDecodeError as e:
        print("‚ùå Erreur JSON : contenu re√ßu non valide")
        print(raw_text)
        raise ValueError("La r√©ponse du mod√®le n'est pas un JSON valide") from e    # Ajout de la seed si manquante
    if "seed" not in base_scenario or not isinstance(base_scenario["seed"], int):
        base_scenario["seed"] = random.randint(0, 2_147_483_647)
        print(f"üî¢ Seed g√©n√©r√©e automatiquement : {base_scenario['seed']}")
    else:
        print(f"üéØ Seed d√©j√† pr√©sente dans la r√©ponse : {base_scenario['seed']}")
    
    if style:
        base_scenario["style"] = style
        print(f"üé® Style inject√© dans le sc√©nario : {style}")
    
    # Am√©lioration avec CrewAI si activ√©e
    if use_crewai:
        try:
            print("üöÄ Am√©lioration du sc√©nario avec CrewAI...")
            enhancer = get_crewai_comic_enhancer()
            enhanced_scenario = await enhancer.enhance_scenario_text_only(
                base_scenario, prompt, style
            )
            
            # Validation du sc√©nario am√©lior√©
            validation = enhancer.validate_enhanced_scenario(enhanced_scenario)
            
            if validation['is_valid']:
                print("‚úÖ Sc√©nario am√©lior√© par CrewAI avec succ√®s")
                return enhanced_scenario
            else:
                print("‚ö†Ô∏è Sc√©nario CrewAI invalide, utilisation de la version de base")
                print(f"Erreurs: {validation['errors']}")
                return base_scenario
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur CrewAI, utilisation du sc√©nario de base: {e}")
            return base_scenario
    else:
        print("üìù Utilisation du sc√©nario de base (CrewAI d√©sactiv√©)")
        return base_scenario

# Fonction de compatibilit√© pour l'ancien syst√®me
async def generate_scenario_basic(prompt: str, style: str = None, num_images: int = 3):
    """
    G√©n√®re un sc√©nario de base sans CrewAI pour la compatibilit√©
    """
    return await generate_scenario(prompt, style, use_crewai=False, num_images=num_images)
