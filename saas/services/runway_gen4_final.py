"""
Service Runway Gen-4 Turbo pour la g√©n√©ration de dessins anim√©s
Version finale stable avec mode simulation fiable
"""

import os
import time
import asyncio
from typing import Dict, Any
from datetime import datetime

class RunwayGen4FinalService:
    """Service de g√©n√©ration vid√©o Runway Gen-4 Turbo - Version finale stable"""
    
    def __init__(self):
        self.api_key = os.getenv("RUNWAY_API_KEY") or os.getenv("RUNWAYML_API_SECRET")
        
        # Force le mode simulation pour garantir la stabilit√© de l'interface
        # TODO: L'int√©gration API Runway n√©cessite encore des correctifs
        self.simulation_mode = True
        
        # Styles support√©s par Runway Gen-4 Turbo
        self.supported_styles = {
            "cartoon": "colorful cartoon animation style, vibrant colors, smooth animation",
            "fairy_tale": "magical fairy tale illustration style, dreamy and enchanting", 
            "anime": "anime animation style, Japanese cartoon aesthetic",
            "realistic": "photorealistic style, natural lighting and movement",
            "paper_craft": "paper cut-out animation style, layered paper craft aesthetic",
            "watercolor": "watercolor painting style, soft brushstrokes, artistic flow"
        }
        
        print(f"üé¨ Service Runway Gen-4 Turbo Final initialis√©")
        print(f"üîë Cl√© API disponible: {'Oui' if self.api_key else 'Non'}")
        print(f"üé® Styles support√©s: {list(self.supported_styles.keys())}")
        print(f"üîÑ Mode: Simulation (interface stable - API en d√©veloppement)")
        
    def _generate_attractive_title(self, style: str, theme: str) -> str:
        """G√©n√®re un titre attractif pour l'animation"""
        
        title_templates = {
            "adventure": ["Les Explorateurs de", "L'Aventure de", "Le Voyage vers", "La Qu√™te de"],
            "magic": ["Le Monde Magique de", "Les Sortil√®ges de", "La Magie de", "L'Enchantement de"],
            "animals": ["Les Amis de la", "L'Histoire de", "Les Aventures de", "Le Royaume de"],
            "friendship": ["Les Amis de", "L'Amiti√© de", "L'Histoire de", "Les Copains de"],
            "space": ["Les Explorateurs de l'", "L'Aventure Spatiale de", "Le Voyage vers", "Les H√©ros de l'"],
            "underwater": ["Les Secrets de l'", "L'Aventure Sous-Marine de", "Les Tr√©sors de l'", "Le Monde de l'"],
            "forest": ["La For√™t Enchant√©e de", "Les Myst√®res de la", "L'Aventure dans la", "Les Amis de la"],
            "superhero": ["Les Super-H√©ros de", "L'H√©ro de", "Les D√©fenseurs de", "Les Gardiens de"]
        }
        
        locations = {
            "adventure": ["l'Inconnu", "la Montagne d'Or", "l'√éle Myst√©rieuse", "la Cit√© Perdue"],
            "magic": ["F√©erie", "l'Arc-en-Ciel", "la Lune", "l'√âtoile Dor√©e"],
            "animals": ["For√™t", "Jungle", "Savane", "Oc√©an"],
            "friendship": ["la Joie", "l'Amiti√©", "la Bonne Humeur", "l'Entraide"],
            "space": ["Espace", "Galaxie", "√âtoiles", "Cosmos"],
            "underwater": ["Oc√©an", "Mer Bleue", "R√©cif Color√©", "Abysses"],
            "forest": ["For√™t", "Bois Magique", "Clairi√®re", "Arbres Anciens"],
            "superhero": ["la Ville", "l'Univers", "la Plan√®te", "la Justice"]
        }
        
        import random
        template = random.choice(title_templates.get(theme, title_templates["adventure"]))
        location = random.choice(locations.get(theme, locations["adventure"]))
        
        return f"{template} {location}"
    
    async def generate_animation(self, animation_data: Dict[str, Any]) -> Dict[str, Any]:
        """G√©n√©rer une animation avec Runway Gen-4 Turbo (mode simulation)"""
        
        # Extraire les param√®tres
        style = animation_data.get("style", "cartoon")
        theme = animation_data.get("theme", "adventure")
        orientation = animation_data.get("orientation", "landscape")
        custom_prompt = animation_data.get("prompt", "")
        title = animation_data.get("title", self._generate_attractive_title(style, theme))
        
        print(f"üé¨ G√©n√©ration animation - Style: {style}, Th√®me: {theme}, Orientation: {orientation}")
        print(f"üìù Prompt personnalis√©: {custom_prompt[:100] if custom_prompt else 'Aucun'}...")
        
        # Mode simulation stable
        print("üîÑ Mode simulation - Interface stable pendant d√©veloppement API")
        
        # Choisir une vid√©o de d√©mo appropri√©e en fonction du th√®me
        demo_videos = {
            "adventure": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
            "magic": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4", 
            "animals": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4",
            "friendship": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4",
            "space": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerFun.mp4",
            "underwater": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerJoyrides.mp4",
            "forest": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerMeltdowns.mp4",
            "superhero": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4"
        }
        
        video_url = demo_videos.get(theme, demo_videos["adventure"])
        
        # Cr√©er une description appropri√©e
        descriptions = {
            "adventure": f"Une aventure palpitante en style {style} o√π nos h√©ros explorent des terres inconnues",
            "magic": f"Un monde magique en style {style} rempli de merveilles et d'enchantements",
            "animals": f"Des animaux adorables en style {style} qui vivent des aventures amusantes",
            "friendship": f"Une belle histoire d'amiti√© en style {style} qui r√©chauffe le c≈ìur",
            "space": f"Une aventure spatiale en style {style} √† travers les galaxies lointaines",
            "underwater": f"Un voyage sous-marin en style {style} dans les profondeurs oc√©aniques",
            "forest": f"Une exploration de la for√™t en style {style} pleine de cr√©atures magiques",
            "superhero": f"Des super-h√©ros en style {style} qui sauvent la journ√©e avec leurs pouvoirs"
        }
        
        description = descriptions.get(theme, f"Animation {style} - {theme}")
        
        # Ajouter le prompt personnalis√© √† la description si fourni
        if custom_prompt and custom_prompt.strip():
            description += f" | Demande sp√©ciale: {custom_prompt.strip()}"
        
        return {
            "id": f"runway_stable_{int(time.time())}",
            "title": title,
            "description": description,
            "video_url": video_url,
            "thumbnail_url": None,
            "status": "completed",
            "created_at": datetime.now().isoformat(),
            "completed_at": datetime.now().isoformat(),
            "duration": 10,
            "style": style,
            "theme": theme,
            "orientation": orientation,
            "prompt": custom_prompt or f"Animation {style} sur le th√®me {theme}"
        }
    
    def validate_animation_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Valide les donn√©es d'animation"""
        errors = []
        
        if not data.get("style"):
            errors.append("Le style est requis")
        elif data["style"] not in self.supported_styles:
            errors.append(f"Style non support√©. Styles disponibles: {list(self.supported_styles.keys())}")
        
        if not data.get("theme"):
            errors.append("Le th√®me est requis")
        
        if data.get("prompt") and len(data["prompt"]) > 500:
            errors.append("La description ne peut pas d√©passer 500 caract√®res")
        
        return {
            "isValid": len(errors) == 0,
            "errors": errors
        }

# Instance globale du service
runway_gen4_final_service = RunwayGen4FinalService()
