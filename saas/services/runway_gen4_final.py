"""
Service Runway Gen-4 Turbo pour la g√©n√©ration de dessins anim√©s
Version propre et fonctionnelle avec simulation intelligente
"""

import os
import time
from typing import Dict, Any
from datetime import datetime
import asyncio
import httpx

class RunwayGen4Service:
    """Service de g√©n√©ration vid√©o Runway Gen-4 Turbo"""
    
    def __init__(self):
        self.api_key = os.getenv("RUNWAY_API_KEY")
        self.base_url = os.getenv("RUNWAY_BASE_URL", "https://api.dev.runwayml.com")
        
        # V√©rifier si on a une cl√© API valide
        if not self.api_key or self.api_key == "your-runway-api-key-here":
            print("‚ùå RUNWAY_API_KEY manquante - ERREUR FATALE")
            raise Exception("Cl√© API Runway manquante - impossible de continuer")
        else:
            print(f"üîë Cl√© API Runway d√©tect√©e: {self.api_key[:20]}...")
            print("üöÄ MODE PRODUCTION R√âEL UNIQUEMENT - Aucune simulation autoris√©e")
            # SUPPRESSION TOTALE DU MODE SIMULATION
        
        # Styles support√©s par Runway Gen-4 Turbo
        self.supported_styles = {
            "cartoon": "colorful cartoon animation style, vibrant colors, smooth animation",
            "fairy_tale": "magical fairy tale illustration style, dreamy and enchanting",
            "anime": "anime animation style, Japanese cartoon aesthetic",
            "realistic": "photorealistic style, natural lighting and movement",
            "paper_craft": "paper cut-out animation style, layered paper craft aesthetic",
            "watercolor": "watercolor painting style, soft brushstrokes, artistic flow"
        }
        
        print(f"üé¨ Service Runway Gen-4 Turbo initialis√©")
        print(f"üì° Base URL: {self.base_url}")
        print(f"üé® Styles support√©s: {list(self.supported_styles.keys())}")
        print(f"üöÄ Mode: PRODUCTION R√âELLE UNIQUEMENT")

    def _create_optimized_prompt(self, style: str, theme: str, custom_prompt: str = "", orientation: str = "landscape") -> str:
        """Cr√©e un prompt optimis√© pour Runway Gen-4 Turbo et les enfants"""
        
        # Mapping des th√®mes pour enfants
        theme_prompts = {
            "adventure": "exciting adventure with brave characters exploring magical places",
            "magic": "magical world with sparkles, fairy dust, and enchanted creatures", 
            "animals": "cute friendly animals playing together in a colorful environment",
            "friendship": "heartwarming friendship story with characters helping each other",
            "space": "space adventure with colorful planets, friendly aliens, and starships",
            "underwater": "underwater adventure with colorful fish, coral reefs, and sea creatures",
            "forest": "enchanted forest with magical creatures, talking trees, and fairy lights",
            "superhero": "child-friendly superhero saving the day with positive powers"
        }
        
        # R√©cup√©rer les prompts de style et th√®me
        style_prompt = self.supported_styles.get(style, self.supported_styles["cartoon"])
        theme_prompt = theme_prompts.get(theme, theme_prompts["adventure"])
        
        # Construire le prompt final
        prompt_parts = [style_prompt, theme_prompt]
        
        if custom_prompt and custom_prompt.strip():
            prompt_parts.append(custom_prompt.strip())
        
        # Ajouter des directives sp√©cifiques pour les enfants et Runway
        final_prompt = ", ".join(prompt_parts)
        final_prompt += ", suitable for children, bright colors, positive atmosphere, high quality animation, smooth motion"
        
        return final_prompt
    
    def _generate_attractive_title(self, style: str, theme: str) -> str:
        """G√©n√®re un titre attractif pour l'animation"""
        
        title_templates = {
            "adventure": ["Les Explorateurs de", "L'Aventure de", "Le Voyage vers", "La Qu√™te de"],
            "magic": ["Le Monde Magique de", "Les Sortil√®ges de", "La Magie de", "L'Enchantement de"],
            "animals": ["Les Amis de la", "L'Histoire de", "Les Aventures de", "Le Royaume de"],
            "friendship": ["Les Amis de", "L'Amiti√© de", "L'Histoire de", "Les Copains de"],
            "space": ["Les Explorateurs de l'", "L'Aventure Spatiale de", "Le Voyage vers", "Les H√©ros de l'"],
            "underwater": ["Les Secrets de l'", "L'Aventure Sous-Marine de", "Les Tr√©sors de l'", "Le Monde de l'"],
            "forest": ["La For√™t Enchant√©e de", "Les Myst√®res de la", "L'Aventure dans la", "Les Amis de la"],
            "superhero": ["Les Super-H√©ros de", "L'H√©ro de", "Les D√©fenseurs de", "Les Gardiens de"]
        }
        
        locations = {
            "adventure": ["l'Inconnu", "la Montagne d'Or", "l'√éle Myst√©rieuse", "la Cit√© Perdue"],
            "magic": ["F√©erie", "l'Arc-en-Ciel", "la Lune", "l'√âtoile Dor√©e"],
            "animals": ["For√™t", "Jungle", "Savane", "Oc√©an"],
            "friendship": ["la Joie", "l'Amiti√©", "la Bonne Humeur", "l'Entraide"],
            "space": ["Espace", "Galaxie", "√âtoiles", "Cosmos"],
            "underwater": ["Oc√©an", "Mer Bleue", "R√©cif Color√©", "Abysses"],
            "forest": ["For√™t", "Bois Magique", "Clairi√®re", "Arbres Anciens"],
            "superhero": ["la Ville", "l'Univers", "la Plan√®te", "la Justice"]
        }
        
        import random
        template = random.choice(title_templates.get(theme, title_templates["adventure"]))
        location = random.choice(locations.get(theme, locations["adventure"]))
        
        return f"{template} {location}"

    async def generate_animation(self, animation_data: Dict[str, Any]) -> Dict[str, Any]:
        """G√©n√©rer un vrai dessin anim√© narratif avec Runway Gen-4 Turbo"""
        
        # Extraire les param√®tres
        style = animation_data.get("style", "cartoon")
        theme = animation_data.get("theme", "adventure")
        orientation = animation_data.get("orientation", "landscape")
        custom_prompt = animation_data.get("prompt", "")
        title = animation_data.get("title", self._generate_attractive_title(style, theme))
        
        print(f"üé¨ G√©n√©ration DESSIN ANIM√â NARRATIF - Style: {style}, Th√®me: {theme}, Orientation: {orientation}")
        print(f"üìù Prompt personnalis√©: {custom_prompt}")
        
        # G√âN√âRATION D'UN VRAI DESSIN ANIM√â AVEC HISTOIRE
        print("üöÄ Cr√©ation d'un dessin anim√© complet avec histoire...")
        
        try:
            # √âtape 1: Cr√©er le sc√©nario de l'histoire
            story_scenes = await self._create_story_scenario(style, theme, custom_prompt)
            print(f"ÔøΩ Sc√©nario cr√©√© avec {len(story_scenes)} sc√®nes")
            
            # √âtape 2: G√©n√©rer les images et vid√©os pour chaque sc√®ne
            scene_videos = []
            ratio_map = {
                "landscape": "1920:1080",
                "portrait": "1080:1920", 
                "square": "1080:1080"
            }
            ratio = ratio_map.get(orientation, "1920:1080")
            
            for i, scene in enumerate(story_scenes):
                print(f"üé® G√©n√©ration de la sc√®ne {i+1}/{len(story_scenes)}: {scene['title']}")
                
                # G√©n√©rer l'image de la sc√®ne
                scene_image = await self._generate_image_from_text(scene['image_prompt'], ratio)
                print(f"‚úÖ Image sc√®ne {i+1} g√©n√©r√©e: {scene_image}")
                
                # G√©n√©rer la vid√©o de la sc√®ne avec narration
                scene_video = await self._generate_video_from_image(
                    scene_image, 
                    scene['animation_prompt'], 
                    duration=8  # 8 secondes par sc√®ne
                )
                print(f"‚úÖ Vid√©o sc√®ne {i+1} g√©n√©r√©e: {scene_video}")
                
                scene_videos.append({
                    'title': scene['title'],
                    'image_url': scene_image,
                    'video_url': scene_video,
                    'narration': scene['narration']
                })
            
            # Pour l'instant, retourner la premi√®re sc√®ne comme r√©sultat principal
            # (Dans une version future, on pourrait assembler toutes les sc√®nes)
            main_scene = scene_videos[0]
            
            # Retourner le r√©sultat final
            return {
                "id": f"runway_story_{int(time.time())}",
                "title": title,
                "description": f"Dessin anim√© {style} - {theme} avec histoire compl√®te ({len(story_scenes)} sc√®nes)",
                "video_url": main_scene['video_url'],
                "thumbnail_url": main_scene['image_url'],
                "status": "completed",
                "created_at": datetime.now().isoformat(),
                "completed_at": datetime.now().isoformat(),
                "duration": len(story_scenes) * 8,  # Dur√©e totale estim√©e
                "style": style,
                "theme": theme,
                "orientation": orientation,
                "prompt": custom_prompt,
                "story_scenes": scene_videos,  # Toutes les sc√®nes g√©n√©r√©es
                "narrative_type": "full_story"  # Indique que c'est une histoire compl√®te
            }
            
        except Exception as e:
            print(f"‚ùå Erreur critique lors de la g√©n√©ration du dessin anim√©: {e}")
            # AUCUNE SIMULATION - Si l'API √©choue, on √©choue
            raise Exception(f"Impossible de g√©n√©rer le dessin anim√©: {str(e)}")

    async def _create_story_scenario(self, style: str, theme: str, custom_prompt: str = "") -> list:
        """Cr√©e un sc√©nario complet pour le dessin anim√© avec plusieurs sc√®nes"""
        
        # Histoires narratives par th√®me
        story_templates = {
            "space": [
                {
                    "title": "D√©collage vers l'aventure",
                    "narration": "Notre h√©ros embarque dans son vaisseau spatial pour une grande aventure",
                    "image_prompt": f"{style} style, young astronaut character in colorful spacesuit preparing for launch, friendly expression, bright spaceship interior",
                    "animation_prompt": "astronaut checking controls and preparing for takeoff, gentle movements, excitement in eyes"
                },
                {
                    "title": "D√©couverte d'une plan√®te magique", 
                    "narration": "Il d√©couvre une plan√®te color√©e pleine de cr√©atures amicales",
                    "image_prompt": f"{style} style, beautiful alien planet with colorful landscapes, friendly alien creatures, rainbow skies, magical atmosphere",
                    "animation_prompt": "planet rotating slowly, creatures moving gently, sparkles and magical effects"
                },
                {
                    "title": "Nouvelle amiti√©",
                    "narration": "Il se lie d'amiti√© avec les habitants de la plan√®te",
                    "image_prompt": f"{style} style, astronaut character meeting friendly colorful aliens, handshakes and smiles, peaceful interaction",
                    "animation_prompt": "characters waving hello, friendly gestures, warm interactions, happy expressions"
                }
            ],
            "adventure": [
                {
                    "title": "Le d√©but de l'aventure",
                    "narration": "Notre aventurier d√©couvre une carte myst√©rieuse",
                    "image_prompt": f"{style} style, brave young explorer character holding ancient treasure map, excited expression, adventure gear",
                    "animation_prompt": "character examining map carefully, wind blowing gently, anticipation in movements"
                },
                {
                    "title": "La for√™t enchant√©e",
                    "narration": "Il traverse une for√™t magique pleine de surprises",
                    "image_prompt": f"{style} style, magical forest with glowing trees, friendly forest animals, sparkling lights, enchanted atmosphere",
                    "animation_prompt": "trees swaying gently, magical sparkles floating, animals moving peacefully"
                },
                {
                    "title": "Le tr√©sor d√©couvert",
                    "narration": "Il trouve le tr√©sor et partage sa joie avec ses nouveaux amis",
                    "image_prompt": f"{style} style, character finding colorful treasure chest, forest friends celebrating together, joy and friendship",
                    "animation_prompt": "treasure chest opening with sparkles, characters celebrating, happy dancing movements"
                }
            ],
            "animals": [
                {
                    "title": "Les amis de la for√™t",
                    "narration": "Dans la for√™t, tous les animaux vivent en harmonie",
                    "image_prompt": f"{style} style, various cute forest animals (rabbit, deer, squirrel, bird) playing together in sunny forest clearing",
                    "animation_prompt": "animals playing together, jumping and running playfully, peaceful nature movements"
                },
                {
                    "title": "Une mission d'entraide",
                    "narration": "Quand un petit oiseau perd son nid, tous s'unissent pour l'aider",
                    "image_prompt": f"{style} style, small sad bird character with forest friends gathering materials to build new nest, teamwork scene",
                    "animation_prompt": "animals working together, carrying twigs and leaves, cooperative movements"
                },
                {
                    "title": "La c√©l√©bration de l'amiti√©",
                    "narration": "Le nouveau nid est construit et tous f√™tent leur belle amiti√©",
                    "image_prompt": f"{style} style, happy bird in beautiful new nest with all forest friends celebrating around, party atmosphere",
                    "animation_prompt": "bird singing happily, friends dancing in circle, celebration movements"
                }
            ],
            "magic": [
                {
                    "title": "L'apprentie magicienne",
                    "narration": "Une jeune magicienne apprend ses premiers sorts",
                    "image_prompt": f"{style} style, young witch character with colorful hat and wand, practicing magic, sparkles around, friendly expression",
                    "animation_prompt": "character waving magic wand, colorful sparkles appearing, gentle magical movements"
                },
                {
                    "title": "Le sort qui fait des merveilles",
                    "narration": "Son sort transforme le jardin en paradis fleuri",
                    "image_prompt": f"{style} style, magical garden blooming with colorful flowers, butterflies, rainbow effects, enchanted atmosphere",
                    "animation_prompt": "flowers blooming rapidly, butterflies flying gracefully, magical transformation effects"
                },
                {
                    "title": "Le bonheur partag√©",
                    "narration": "Elle partage sa magie avec tous ses amis du village",
                    "image_prompt": f"{style} style, young witch sharing magic with village children, everyone happy and amazed, magical sparkles everywhere",
                    "animation_prompt": "children laughing and clapping, magical effects spreading joy, warm community scene"
                }
            ]
        }
        
        # R√©cup√©rer le template d'histoire ou utiliser adventure par d√©faut
        scenes = story_templates.get(theme, story_templates["adventure"])
        
        # Personnaliser avec le prompt custom si fourni
        if custom_prompt and custom_prompt.strip():
            for scene in scenes:
                scene['image_prompt'] += f", {custom_prompt.strip()}"
        
        return scenes

    def validate_animation_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Valide les donn√©es d'animation"""
        errors = []
        
        if not data.get("style"):
            errors.append("Le style est requis")
        elif data["style"] not in self.supported_styles:
            errors.append(f"Style non support√©. Styles disponibles: {list(self.supported_styles.keys())}")
        
        if not data.get("theme"):
            errors.append("Le th√®me est requis")
        
        if data.get("prompt") and len(data["prompt"]) > 500:
            errors.append("La description ne peut pas d√©passer 500 caract√®res")
        
        return {
            "isValid": len(errors) == 0,
            "errors": errors
        }

    def _get_headers(self) -> Dict[str, str]:
        """Headers pour l'authentification Runway selon la documentation officielle"""
        return {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "X-Runway-Version": "2024-11-06"  # Version couramment utilis√©e
        }

    async def _generate_image_from_text(self, prompt: str, ratio: str = "1920:1080") -> str:
        """G√©n√®re une image √† partir d'un prompt avec l'API text_to_image de Runway"""
        
        print(f"üé® G√©n√©ration d'image avec l'API text_to_image de Runway...")
        print(f"üìù Prompt: {prompt[:100]}...")
        
        payload = {
            "model": "gen4_image",  # Mod√®le correct selon l'organisation
            "promptText": prompt,
            "ratio": ratio
        }
        
        async with httpx.AsyncClient(timeout=300.0) as client:
            response = await client.post(
                f"{self.base_url}/v1/text_to_image",
                headers=self._get_headers(),
                json=payload
            )
            
            if response.status_code != 200:
                error_detail = response.text
                print(f"‚ùå Erreur text_to_image: {response.status_code} - {error_detail}")
                raise Exception(f"Erreur API Runway text_to_image: {response.status_code} - {error_detail}")
            
            task_data = response.json()
            task_id = task_data.get("id")
            
            if not task_id:
                raise Exception("ID de t√¢che manquant dans la r√©ponse text_to_image")
            
            print(f"‚è≥ T√¢che image cr√©√©e: {task_id}")
            
            # Attendre la g√©n√©ration de l'image
            image_url = await self._wait_for_task_completion(task_id, "image")
            return image_url

    async def _generate_video_from_image(self, image_url: str, prompt: str, duration: int = 10) -> str:
        """G√©n√®re une vid√©o √† partir d'une image avec l'API image_to_video de Runway"""
        
        print(f"üé¨ G√©n√©ration de vid√©o avec l'API image_to_video de Runway...")
        print(f"üñºÔ∏è Image source: {image_url}")
        print(f"üìù Prompt vid√©o: {prompt}")
        
        payload = {
            "model": "gen4_turbo",  # Mod√®le correct pour image_to_video
            "promptImage": image_url,
            "promptText": prompt,
            "duration": duration,
            "ratio": "1280:720"  # Ratio selon la documentation
        }
        
        async with httpx.AsyncClient(timeout=300.0) as client:
            response = await client.post(
                f"{self.base_url}/v1/image_to_video",
                headers=self._get_headers(),
                json=payload
            )
            
            if response.status_code != 200:
                error_detail = response.text
                print(f"‚ùå Erreur image_to_video: {response.status_code} - {error_detail}")
                raise Exception(f"Erreur API Runway image_to_video: {response.status_code} - {error_detail}")
            
            task_data = response.json()
            task_id = task_data.get("id")
            
            if not task_id:
                raise Exception("ID de t√¢che manquant dans la r√©ponse image_to_video")
            
            print(f"‚è≥ T√¢che vid√©o cr√©√©e: {task_id}")
            
            # Attendre la g√©n√©ration de la vid√©o
            video_url = await self._wait_for_task_completion(task_id, "video")
            return video_url

    async def _wait_for_task_completion(self, task_id: str, task_type: str = "task") -> str:
        """Attend la fin d'une t√¢che Runway et retourne l'URL du r√©sultat"""
        
        max_attempts = 60  # 10 minutes max
        attempt = 0
        
        while attempt < max_attempts:
            try:
                async with httpx.AsyncClient(timeout=30.0) as client:
                    response = await client.get(
                        f"{self.base_url}/v1/tasks/{task_id}",
                        headers=self._get_headers()
                    )
                    
                    if response.status_code != 200:
                        print(f"‚ùå Erreur lors de la v√©rification du statut: {response.status_code}")
                        await asyncio.sleep(10)
                        attempt += 1
                        continue
                    
                    task_status = response.json()
                    status = task_status.get("status")
                    
                    print(f"üìä Statut {task_type}: {status} (tentative {attempt + 1}/{max_attempts})")
                    
                    if status in ["completed", "SUCCEEDED"]:
                        output = task_status.get("output")
                        if output and len(output) > 0:
                            result_url = output[0]
                            print(f"‚úÖ {task_type.capitalize()} termin√©: {result_url}")
                            return result_url
                        else:
                            raise Exception(f"Aucun output trouv√© pour la t√¢che {task_id}")
                    
                    elif status in ["failed", "FAILED"]:
                        error = task_status.get("error", "Erreur inconnue")
                        raise Exception(f"T√¢che {task_id} √©chou√©e: {error}")
                    
                    elif status in ["pending", "running", "PENDING", "RUNNING"]:
                        await asyncio.sleep(10)
                        attempt += 1
                    
                    else:
                        print(f"‚ö†Ô∏è Statut inattendu: {status}")
                        await asyncio.sleep(10)
                        attempt += 1
                        
            except Exception as e:
                print(f"‚ùå Erreur lors de la v√©rification: {e}")
                await asyncio.sleep(10)
                attempt += 1
        
        raise Exception(f"Timeout: La t√¢che {task_id} n'a pas termin√© dans les temps")

# Instance globale du service
runway_gen4_service = RunwayGen4Service()
