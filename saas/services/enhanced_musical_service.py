"""
Version am√©lior√©e du service de comptines musicales avec gestion d'erreurs
"""

from .musical_nursery_rhyme_service import MusicalNurseryRhymeService
import asyncio

class EnhancedMusicalNurseryRhymeService(MusicalNurseryRhymeService):
    """Service am√©lior√© avec gestion d'erreurs et mode d√©mo"""
    
    async def generate_complete_rhyme(
        self,
        rhyme_type: str,
        custom_request: str = None,
        custom_style: str = None,
        generate_music: bool = True,
        language: str = "fr"
    ):
        """
        Version am√©lior√©e avec gestion d'erreurs et messages informatifs
        """
        try:
            # Appeler la m√©thode parent
            result = await super().generate_complete_rhyme(
                rhyme_type, custom_request, custom_style, generate_music, language
            )
            
            # Si la g√©n√©ration musicale a √©chou√©, ajouter un message informatif
            if generate_music and result.get("music_status") == "failed":
                if "demo_message" not in result:
                    result["demo_message"] = (
                        "üéµ Mode d√©monstration activ√© ! "
                        "La g√©n√©ration musicale n√©cessite une connexion √† une API externe "
                        "qui semble actuellement indisponible. "
                        "Vos paroles de comptine ont √©t√© g√©n√©r√©es avec succ√®s et vous pouvez "
                        "les utiliser avec n'importe quel logiciel de musique pour cr√©er votre m√©lodie !"
                    )
                    
                # Ajouter des suggestions
                result["suggestions"] = [
                    "üéπ Utilisez un piano ou un clavier pour cr√©er la m√©lodie",
                    "üé§ Chantez les paroles sur une m√©lodie simple",
                    "üì± Utilisez une app de cr√©ation musicale comme GarageBand",
                    "üéµ Partagez les paroles avec un musicien pour cr√©er la musique"
                ]
            
            return result
            
        except Exception as e:
            return {
                "status": "error", 
                "error": str(e),
                "demo_message": "Une erreur s'est produite lors de la g√©n√©ration. Veuillez r√©essayer."
            }
