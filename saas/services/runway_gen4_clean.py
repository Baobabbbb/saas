"""
Service Runway Gen-4 Turbo pour la g√©n√©ration de dessins anim√©s
Compatible avec l'API officielle Runway ML
"""

import os
import asyncio
import httpx
import json
from typing import Dict, Any, Optional, List
from datetime import datetime
import time

class RunwayGen4Service:
    """Service de g√©n√©ration vid√©o Runway Gen-4 Turbo"""
    
    def __init__(self):
        self.api_key = os.getenv("RUNWAY_API_KEY")
        self.base_url = os.getenv("RUNWAY_BASE_URL", "https://api.runwayml.com/v1")
        
        if not self.api_key or self.api_key == "your-runway-api-key-here":
            print("‚ö†Ô∏è RUNWAY_API_KEY manquante - mode simulation activ√©")
            self.api_key = None
        
        # Configuration par d√©faut pour Gen-4 Turbo
        self.default_config = {
            "duration": 10,           # 5 ou 10 secondes
            "aspect_ratio": "16:9",   # 16:9, 9:16, 1:1
            "resolution": "720p",     # 720p recommand√©
            "motion_control": "balanced",  # low, balanced, high
            "seed": None,
            "watermark": False        # D√©sactiver le watermark si possible
        }
        
        # Styles support√©s par Runway Gen-4 Turbo
        self.supported_styles = {
            "cartoon": "colorful cartoon animation style, vibrant colors, smooth animation",
            "fairy_tale": "magical fairy tale illustration style, dreamy and enchanting",
            "anime": "anime animation style, Japanese cartoon aesthetic",
            "realistic": "photorealistic style, natural lighting and movement",
            "paper_craft": "paper cut-out animation style, layered paper craft aesthetic",
            "watercolor": "watercolor painting style, soft brushstrokes, artistic flow"
        }
        
        print(f"üé¨ Service Runway Gen-4 Turbo initialis√©")
        print(f"üì° Base URL: {self.base_url}")
        print(f"üé® Styles support√©s: {list(self.supported_styles.keys())}")
    
    def _get_headers(self) -> Dict[str, str]:
        """Headers pour l'authentification Runway"""
        return {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
    
    def _create_optimized_prompt(
        self, 
        style: str, 
        theme: str, 
        custom_prompt: str = "",
        orientation: str = "landscape"
    ) -> str:
        """Cr√©e un prompt optimis√© pour Runway Gen-4 Turbo et les enfants"""
        
        # Mapping des th√®mes pour enfants
        theme_prompts = {
            "adventure": "exciting adventure with brave characters exploring magical places",
            "magic": "magical world with sparkles, fairy dust, and enchanted creatures",
            "animals": "cute friendly animals playing together in a colorful environment",
            "friendship": "heartwarming friendship story with characters helping each other",
            "space": "colorful space adventure with friendly aliens and bright planets",
            "underwater": "underwater adventure with colorful fish and sea creatures",
            "forest": "enchanted forest with talking animals and magical trees",
            "superhero": "young superhero saving the day with colorful powers"
        }
        
        # Style adapt√© pour Runway
        style_prompt = self.supported_styles.get(style, self.supported_styles["cartoon"])
        theme_prompt = theme_prompts.get(theme, f"{theme} themed story")
        
        # Construction du prompt optimis√©
        prompt_parts = [
            style_prompt,
            theme_prompt,
            "suitable for children",
            "bright vibrant colors",
            "smooth fluid animation",
            "joyful and positive atmosphere",
            "high quality animation"
        ]
        
        if custom_prompt:
            prompt_parts.insert(2, custom_prompt)
        
        final_prompt = ", ".join(prompt_parts)
        
        # Limiter la longueur du prompt (Runway a une limite)
        if len(final_prompt) > 500:
            final_prompt = final_prompt[:500] + "..."
        
        return final_prompt
    
    async def generate_animation(self, animation_data: Dict[str, Any]) -> Dict[str, Any]:
        """G√©n√©rer une animation avec Runway Gen-4 Turbo"""
        
        # Extraire les param√®tres
        style = animation_data.get("style", "cartoon")
        theme = animation_data.get("theme", "adventure")
        orientation = animation_data.get("orientation", "landscape")
        custom_prompt = animation_data.get("prompt", "")
        title = animation_data.get("title", f"Animation {theme}")
        
        if not self.api_key:
            # Mode simulation pour les tests
            print("üîÑ Mode simulation - Pas de cl√© API Runway")
            
            return {
                "id": f"runway_sim_{int(time.time())}",
                "title": title,
                "description": f"Animation {style} - {theme} (simulation)",
                "video_url": "https://example.com/simulation.mp4",
                "thumbnail_url": None,
                "status": "completed",
                "created_at": datetime.now().isoformat(),
                "completed_at": datetime.now().isoformat(),
                "duration": 10,
                "style": style,
                "theme": theme,
                "orientation": orientation
            }
        
        try:
            # Cr√©er le prompt optimis√©
            optimized_prompt = self._create_optimized_prompt(
                style, theme, custom_prompt, orientation
            )
            
            # Configuration de l'aspect ratio
            aspect_ratio_map = {
                "landscape": "16:9",
                "portrait": "9:16",
                "square": "1:1"
            }
            aspect_ratio = aspect_ratio_map.get(orientation, "16:9")
            
            # Payload pour Runway Gen-4 Turbo
            payload = {
                "model": "gen4-turbo",
                "prompt": optimized_prompt,
                "duration": 10,
                "aspect_ratio": aspect_ratio,
                "resolution": "720p",
                "motion_control": "balanced",
                "seed": None,
                "watermark": False
            }
            
            print(f"üé¨ G√©n√©ration Runway - Style: {style}, Th√®me: {theme}")
            print(f"üìù Prompt: {optimized_prompt[:100]}...")
            
            # Appel √† l'API Runway
            async with httpx.AsyncClient(timeout=300.0) as client:
                response = await client.post(
                    f"{self.base_url}/generate",
                    headers=self._get_headers(),
                    json=payload
                )
                
                if response.status_code != 200:
                    error_detail = response.text
                    print(f"‚ùå Erreur Runway API: {response.status_code} - {error_detail}")
                    raise Exception(f"Erreur API Runway: {response.status_code} - {error_detail}")
                
                result = response.json()
                task_id = result.get("id")
                
                if not task_id:
                    raise Exception("ID de t√¢che manquant dans la r√©ponse Runway")
                
                print(f"‚è≥ T√¢che Runway cr√©√©e: {task_id}")
                
                # Polling pour attendre la g√©n√©ration
                video_url = await self._wait_for_completion(task_id)
                
                # Retourner le r√©sultat dans le format attendu
                return {
                    "id": task_id,
                    "title": title,
                    "description": f"Animation {style} - {theme}",
                    "video_url": video_url,
                    "thumbnail_url": None,
                    "status": "completed",
                    "created_at": datetime.now().isoformat(),
                    "completed_at": datetime.now().isoformat(),
                    "duration": 10,
                    "style": style,
                    "theme": theme,
                    "orientation": orientation
                }
                
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration Runway: {e}")
            raise Exception(f"Erreur lors de la g√©n√©ration avec Runway: {str(e)}")
    
    async def _wait_for_completion(self, task_id: str, max_wait: int = 300) -> str:
        """Attendre la completion de la g√©n√©ration avec polling"""
        
        start_time = time.time()
        
        while time.time() - start_time < max_wait:
            try:
                async with httpx.AsyncClient(timeout=30.0) as client:
                    response = await client.get(
                        f"{self.base_url}/tasks/{task_id}",
                        headers=self._get_headers()
                    )
                    
                    if response.status_code != 200:
                        print(f"‚ö†Ô∏è Erreur polling: {response.status_code}")
                        await asyncio.sleep(5)
                        continue
                    
                    result = response.json()
                    status = result.get("status")
                    
                    print(f"üìä Status Runway: {status}")
                    
                    if status == "completed":
                        video_url = result.get("output", {}).get("video_url")
                        if video_url:
                            print(f"‚úÖ Vid√©o g√©n√©r√©e: {video_url}")
                            return video_url
                        else:
                            raise Exception("URL vid√©o manquante dans la r√©ponse")
                    
                    elif status == "failed":
                        error = result.get("error", "Erreur inconnue")
                        raise Exception(f"G√©n√©ration √©chou√©e: {error}")
                    
                    elif status in ["queued", "processing"]:
                        # Continuer √† attendre
                        await asyncio.sleep(10)
                    
                    else:
                        print(f"‚ö†Ô∏è Status inconnu: {status}")
                        await asyncio.sleep(5)
                        
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur pendant le polling: {e}")
                await asyncio.sleep(5)
        
        raise Exception(f"Timeout: La g√©n√©ration a pris plus de {max_wait} secondes")
    
    def validate_animation_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Valider les donn√©es d'animation pour Runway"""
        
        errors = []
        
        # V√©rifier les champs requis
        if not data.get("style"):
            errors.append("Style requis")
        elif data["style"] not in self.supported_styles:
            errors.append(f"Style non support√©. Styles disponibles: {list(self.supported_styles.keys())}")
        
        if not data.get("theme"):
            errors.append("Th√®me requis")
        
        if not data.get("orientation"):
            errors.append("Orientation requise")
        elif data["orientation"] not in ["landscape", "portrait", "square"]:
            errors.append("Orientation doit √™tre: landscape, portrait, ou square")
        
        return {
            "isValid": len(errors) == 0,
            "errors": errors
        }

# Instance globale du service
runway_gen4_service = RunwayGen4Service()
