"""
Version simplifi√©e du service d'animation int√©gr√© pour les tests
Sans d√©pendance moviepy pour √©viter les conflits
"""

import os
import json
import asyncio
import aiohttp
import time
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path
from dataclasses import dataclass
import uuid

# Charger les variables d'environnement
from dotenv import load_dotenv
load_dotenv()

# Imports CrewAI
from crewai import Agent, Task, Crew, Process
from langchain_openai import ChatOpenAI
from pydantic import SecretStr

@dataclass
class VideoScene:
    """Structure d'une sc√®ne vid√©o"""
    scene_number: int
    description: str
    duration: float
    video_url: Optional[str] = None
    local_path: Optional[str] = None
    prompt: Optional[str] = None
    status: str = "pending"

class SimpleAnimationService:
    """Service d'animation simplifi√© pour les tests"""
    
    def __init__(self):
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        self.runway_api_key = os.getenv("RUNWAY_API_KEY")
        self.cache_dir = Path("cache/animations")
        self.cache_dir.mkdir(parents=True, exist_ok=True)
        
        # Configuration CrewAI
        if self.openai_api_key:
            self.llm = ChatOpenAI(
                api_key=SecretStr(self.openai_api_key),
                model="gpt-4o-mini",
                temperature=0.7
            )
        else:
            print("‚ö†Ô∏è Cl√© OpenAI non configur√©e - mode test limit√©")
            self.llm = None
        
        # Param√®tres compatibles avec Stable Diffusion/Runway
        self.available_styles = {
            'cartoon': 'vibrant cartoon animation style, colorful and playful, Disney-Pixar inspired',
            'anime': 'anime animation style, expressive characters, Japanese animation inspired',
            'realistic': 'semi-realistic animation style, detailed but child-friendly',
            'watercolor': 'watercolor animation style, soft painted textures, artistic brush strokes',
            'pixel_art': 'pixel art animation style, retro gaming aesthetic, colorful pixels'
        }
        
        self.available_themes = {
            'adventure': 'exciting adventure scene with exploration and discovery',
            'magic': 'magical scene with sparkles, spell effects, and wonder',
            'animals': 'cute animals in their natural habitat, friendly and endearing',
            'space': 'space adventure with stars, planets, and cosmic elements',
            'underwater': 'underwater scene with marine life and coral reefs',
            'forest': 'enchanted forest with magical creatures and nature',
            'city': 'colorful city environment, friendly urban setting',
            'countryside': 'peaceful countryside landscape, rolling hills, nature'
        }
        
        self.available_moods = {
            'joyful': 'joyful and energetic atmosphere',
            'peaceful': 'calm and serene atmosphere',
            'magical': 'mysterious and magical atmosphere',
            'playful': 'fun and mischievous atmosphere',
            'adventurous': 'exploration and discovery atmosphere'
        }
        
        print("üé¨ Service Animation Simple initialis√©")
        print(f"üìÅ Cache: {self.cache_dir}")
        print(f"üîë OpenAI configur√©: {'‚úÖ' if self.openai_api_key else '‚ùå'}")
    
    def create_agents(self) -> Dict[str, Agent]:
        """Cr√©er les agents CrewAI sp√©cialis√©s"""
        
        agents = {}
        
        # 1. Sc√©nariste
        agents['screenwriter'] = Agent(
            role="Sc√©nariste Expert",
            goal="D√©couper une histoire en sc√®nes visuelles parfaites pour l'animation",
            backstory="""Tu es un sc√©nariste exp√©riment√© sp√©cialis√© dans les contenus pour enfants. 
            Tu excelles √† d√©couper une histoire en 3-6 sc√®nes visuelles captivantes de 5-10 secondes chacune.
            Tu identifies les moments cl√©s et les actions visuellement int√©ressantes.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
        
        # 2. Directeur Artistique
        agents['art_director'] = Agent(
            role="Directeur Artistique",
            goal="D√©finir un style visuel coh√©rent pour toute l'animation",
            backstory="""Tu es un directeur artistique expert en animation pour enfants.
            Tu d√©finis des styles visuels harmonieux, des palettes de couleurs et
            tu assures la coh√©rence des personnages tout au long de l'histoire.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
        
        # 3. Prompt Engineer
        agents['prompt_engineer'] = Agent(
            role="Prompt Engineer Expert",
            goal="Cr√©er des prompts optimaux pour Runway Gen-4",
            backstory="""Tu es expert en IA g√©n√©rative et en cr√©ation de prompts pour Runway.
            Tu sais comment formuler des descriptions pr√©cises de 50-200 caract√®res qui produisent 
            des vid√©os fluides et visuellement impressionnantes.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
        
        return agents
    
    def create_tasks(self, story_text: str, style_preferences: Dict[str, str], agents: Dict[str, Agent]) -> List[Task]:
        """Cr√©er les t√¢ches pour les agents"""
        
        tasks = []
        
        # 1. T√¢che Sc√©nariste
        scenario_task = Task(
            description=f"""
            Analyse cette histoire et d√©coupe-la en sc√®nes visuelles pour l'animation :
            
            HISTOIRE : {story_text}
            
            INSTRUCTIONS :
            - Cr√©er 3 √† 5 sc√®nes de 5-10 secondes chacune (max 50s total)
            - Chaque sc√®ne doit √™tre visuellement claire et captivante
            - Assurer une progression narrative fluide
            - Adapter pour enfants de 3-8 ans
            
            R√âPONSE REQUISE (FORMAT JSON) :
            {{
                "scenes": [
                    {{
                        "scene_number": 1,
                        "duration": 8,
                        "description": "Description visuelle pr√©cise de la sc√®ne",
                        "action": "Action principale visible",
                        "setting": "D√©cor de la sc√®ne"
                    }}
                ],
                "total_scenes": 4,
                "estimated_duration": 32
            }}
            """,
            agent=agents['screenwriter'],
            expected_output="Structure JSON avec toutes les sc√®nes d√©compos√©es"
        )
        
        # 2. T√¢che Direction Artistique
        art_task = Task(
            description=f"""
            D√©finis le style visuel pour cette animation bas√©e sur les sc√®nes du sc√©nariste :
            
            PR√âF√âRENCES UTILISATEUR : {style_preferences}
            STYLE DEMAND√â: {style_preferences.get('style', 'cartoon')}
            TH√àME: {style_preferences.get('theme', 'adventure')}
            AMBIANCE: {style_preferences.get('mood', 'joyful')}
            
            STYLES DISPONIBLES: {list(self.available_styles.keys())}
            TH√àMES DISPONIBLES: {list(self.available_themes.keys())}
            
            INSTRUCTIONS :
            - Utiliser le style visuel demand√© par l'utilisateur
            - Adapter le style au th√®me et √† l'ambiance choisis
            - Assurer la coh√©rence visuelle entre toutes les sc√®nes
            - Style adapt√© aux enfants de 3-8 ans
            
            R√âPONSE REQUISE (FORMAT JSON) :
            {{
                "visual_style": "Description du style bas√© sur {style_preferences.get('style', 'cartoon')}",
                "color_palette": ["couleur1", "couleur2", "couleur3"],
                "characters_style": "Description style des personnages pour {style_preferences.get('style', 'cartoon')}",
                "settings_style": "Description style des d√©cors pour {style_preferences.get('theme', 'adventure')}",
                "mood_adaptation": "Adaptation pour ambiance {style_preferences.get('mood', 'joyful')}",
                "global_keywords": ["keywords", "bas√©s", "sur", "choix", "utilisateur"]
            }}
            """,
            agent=agents['art_director'],
            expected_output="Direction artistique personnalis√©e en JSON",
            context=[scenario_task]
        )
        
        # 3. T√¢che Prompt Engineering
        prompt_task = Task(
            description=f"""
            Cr√©e des prompts optimis√©s pour Runway/Stable Diffusion bas√©s sur les sc√®nes et le style d√©finis.
            
            STYLE UTILISATEUR: {style_preferences.get('style', 'cartoon')}
            TH√àME UTILISATEUR: {style_preferences.get('theme', 'adventure')}
            AMBIANCE: {style_preferences.get('mood', 'joyful')}
            
            R√âF√âRENCES STYLE: {self.available_styles.get(style_preferences.get('style', 'cartoon'), 'cartoon style')}
            R√âF√âRENCES TH√àME: {self.available_themes.get(style_preferences.get('theme', 'adventure'), 'adventure scene')}
            
            CONTRAINTES TECHNIQUES :
            - Prompt de 50-200 caract√®res maximum
            - √âviter les mots interdits (violence, armes, etc.)
            - Style adapt√© √† l'animation pour enfants
            - Int√©grer EXACTEMENT le style et th√®me choisis par l'utilisateur
            - Utiliser les r√©f√©rences de style et th√®me ci-dessus
            
            R√âPONSE REQUISE (FORMAT JSON) :
            {{
                "video_prompts": [
                    {{
                        "scene_number": 1,
                        "prompt": "Prompt incorporant {style_preferences.get('style', 'cartoon')} et {style_preferences.get('theme', 'adventure')} (max 200 char)",
                        "duration": 8,
                        "style_keywords": "{style_preferences.get('style', 'cartoon')}, {style_preferences.get('theme', 'adventure')}, {style_preferences.get('mood', 'joyful')}"
                    }}
                ],
                "global_style": "Style {style_preferences.get('style', 'cartoon')} avec th√®me {style_preferences.get('theme', 'adventure')}",
                "user_preferences_applied": {{
                    "style": "{style_preferences.get('style', 'cartoon')}",
                    "theme": "{style_preferences.get('theme', 'adventure')}",
                    "mood": "{style_preferences.get('mood', 'joyful')}"
                }}
            }}
            """,
            agent=agents['prompt_engineer'],
            expected_output="Prompts optimis√©s avec pr√©f√©rences utilisateur",
            context=[scenario_task, art_task]
        )
        
        tasks.extend([scenario_task, art_task, prompt_task])
        
        return tasks
    
    async def test_crew_execution(self, story_text: str, style_preferences: Optional[Dict[str, str]] = None) -> Dict[str, Any]:
        """Test de l'ex√©cution CrewAI sans g√©n√©ration vid√©o"""
        
        start_time = time.time()
        
        if style_preferences is None:
            style_preferences = {
                "style": "cartoon color√©",
                "mood": "joyeux",
                "target_age": "3-8 ans"
            }
        
        print(f"üé¨ === TEST CR√âAWAI SIMPLIFI√â ===")
        print(f"üìù Histoire: {story_text[:100]}...")
        print(f"üé® Style: {style_preferences}")
        
        try:
            # 1. Cr√©er les agents
            agents = self.create_agents()
            print(f"üë• {len(agents)} agents cr√©√©s")
            
            # 2. Cr√©er les t√¢ches
            tasks = self.create_tasks(story_text, style_preferences, agents)
            print(f"üìã {len(tasks)} t√¢ches cr√©√©es")
            
            # 3. Cr√©er l'√©quipe CrewAI
            crew = Crew(
                agents=list(agents.values()),
                tasks=tasks,
                process=Process.sequential,
                verbose=True
            )
            
            # 4. Ex√©cuter CrewAI
            print("üöÄ Lancement CrewAI...")
            crew_result = crew.kickoff()
            
            # 5. Analyser les r√©sultats
            execution_time = time.time() - start_time
            
            print(f"\n‚úÖ === R√âSULTATS CR√âAWAI ===")
            print(f"‚è±Ô∏è  Temps d'ex√©cution: {execution_time:.1f}s")
            print(f"üìä T√¢ches ex√©cut√©es: {len(crew_result.tasks_output) if crew_result.tasks_output else 0}")
            
            # Extraire les r√©sultats de chaque t√¢che
            results = {}
            if crew_result.tasks_output:
                for i, task_output in enumerate(crew_result.tasks_output):
                    task_name = ["sc√©nariste", "directeur artistique", "prompt engineer"][i] if i < 3 else f"t√¢che_{i}"
                    results[task_name] = {
                        "output": task_output.raw[:200] + "..." if len(task_output.raw) > 200 else task_output.raw,
                        "agent": task_output.agent if hasattr(task_output, 'agent') else "inconnu"
                    }
                    print(f"üìã {task_name}: {task_output.raw[:100]}...")
            
            return {
                "status": "success",
                "execution_time": execution_time,
                "agents_count": len(agents),
                "tasks_count": len(tasks),
                "results": results,
                "story_input": story_text,
                "style_preferences": style_preferences,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"‚ùå Erreur test CrewAI: {e}")
            import traceback
            traceback.print_exc()
            
            return {
                "status": "error",
                "error": str(e),
                "execution_time": time.time() - start_time,
                "timestamp": datetime.now().isoformat()
            }

# Instance globale
simple_animation_service = SimpleAnimationService()
