"""
Service CrewAI am√©lior√© pour l'am√©lioration UNIQUEMENT textuelle des bandes dessin√©es
Ce service n'interf√®re PAS avec la g√©n√©ration d'images ou la composition
Il am√©liore seulement les dialogues et la narration
"""

import os
import json
import asyncio
from typing import Dict, List, Any
from crewai import Agent, Task, Crew, Process
from datetime import datetime

class CrewAIComicEnhancer:
    """
    Service CrewAI focalis√© uniquement sur l'am√©lioration textuelle
    - Am√©liore les dialogues pour qu'ils soient plus naturels
    - Optimise les descriptions visuelles
    - Respecte compl√®tement le flux technique existant (images, seeds, composition)
    """
    
    def __init__(self):
        self.llm_model = os.getenv("OPENAI_MODEL_NAME", "gpt-4o-mini")
        self._setup_agents()
    
    def _setup_agents(self):
        """Configuration des agents sp√©cialis√©s pour l'am√©lioration textuelle uniquement"""
        
        # Agent Dialoguiste - Expert en dialogues naturels
        self.dialogue_agent = Agent(
            role="Dialoguiste Expert",
            goal="Am√©liorer les dialogues pour qu'ils soient plus naturels, expressifs et adapt√©s aux bulles de BD",
            backstory="""Tu es un dialoguiste professionnel sp√©cialis√© dans la bande dessin√©e.
            Tu ma√Ætrises l'art de cr√©er des dialogues qui sonnent naturels et authentiques.
            Tu sais adapter le langage selon les personnages et le contexte.
            Tu respectes les contraintes techniques des bulles de BD (longueur, lisibilit√©).""",
            verbose=True,
            memory=True,
            llm=self.llm_model
        )
        
        # Agent Descripteur - Expert en descriptions visuelles
        self.description_agent = Agent(
            role="Expert en Descriptions Visuelles",
            goal="Am√©liorer les descriptions des sc√®nes pour qu'elles soient plus pr√©cises et visuellement riches",
            backstory="""Tu es un expert en direction artistique pour la bande dessin√©e.
            Tu sais cr√©er des descriptions visuelles pr√©cises qui guident parfaitement la g√©n√©ration d'images.
            Tu ma√Ætrises les codes visuels de la BD : cadrages, compositions, expressions, ambiances.
            Tu adaptes tes descriptions selon le style demand√© (cartoon, r√©aliste, manga, etc.).""",
            verbose=True,
            memory=True,
            llm=self.llm_model
        )
    
    async def enhance_scenario_text_only(
        self, 
        base_scenario: Dict[str, Any], 
        user_prompt: str, 
        style: str
    ) -> Dict[str, Any]:
        """
        Am√©liore UNIQUEMENT le contenu textuel du sc√©nario (dialogues + descriptions)
        Conserve TOUS les autres √©l√©ments techniques : seed, style, structure, etc.
        """
        try:
            print("üéØ Am√©lioration textuelle CrewAI - Pr√©servation du flux technique")
            
            # Contexte pour les agents
            context = {
                "base_scenario": base_scenario,
                "user_prompt": user_prompt,
                "style": style,
                "technical_elements_to_preserve": {
                    "seed": base_scenario.get("seed"),
                    "title": base_scenario.get("title"),
                    "style": base_scenario.get("style"),
                    "number_of_scenes": len(base_scenario.get("scenes", []))
                }
            }
            
            # T√¢che 1: Am√©lioration des dialogues
            dialogue_task = Task(
                description=f"""
                Am√©liore UNIQUEMENT les dialogues du sc√©nario pour qu'ils soient plus naturels et expressifs.
                
                CONTRAINTES STRICTES:
                - Garde exactement le m√™me nombre de sc√®nes: {len(base_scenario.get("scenes", []))}
                - Ne modifie PAS les descriptions de sc√®nes (elles seront trait√©es s√©par√©ment)
                - Respecte les contraintes de bulles BD: max 50 caract√®res par ligne, max 3 lignes
                - Garde la m√™me structure narrative et les m√™mes personnages
                
                Sc√©nario original: {json.dumps(base_scenario, indent=2, ensure_ascii=False)}
                
                Style demand√©: {style}
                Prompt utilisateur: {user_prompt}
                
                Pour chaque dialogue:
                1. Rends-le plus naturel et authentique
                2. Adapte le langage au personnage
                3. Assure-toi qu'il soit adapt√© aux enfants
                4. √âvite les r√©p√©titions
                5. Ajoute des nuances √©motionnelles
                """,
                expected_output="""
                Un JSON avec UNIQUEMENT les dialogues am√©lior√©s:
                {{
                    "scenes": [
                        {{
                            "scene_index": 0,
                            "improved_dialogues": [
                                {{"character": "nom", "text": "dialogue am√©lior√©", "tone": "normal/excited/whisper"}}
                            ]
                        }}
                    ],
                    "dialogue_improvements": ["liste des am√©liorations apport√©es"]
                }}
                """,
                agent=self.dialogue_agent
            )
            
            # T√¢che 2: Am√©lioration des descriptions
            description_task = Task(
                description=f"""
                Am√©liore UNIQUEMENT les descriptions visuelles des sc√®nes pour la g√©n√©ration d'images.
                
                CONTRAINTES STRICTES:
                - Garde exactement le m√™me nombre de sc√®nes: {len(base_scenario.get("scenes", []))}
                - Ne modifie PAS les dialogues (ils sont trait√©s s√©par√©ment)
                - Les descriptions doivent √™tre optimis√©es pour Stable Diffusion
                - Int√®gre le style demand√©: {style}
                - Assure-toi de la coh√©rence visuelle entre les sc√®nes
                
                Sc√©nario original: {json.dumps(base_scenario, indent=2, ensure_ascii=False)}
                
                Pour chaque description:
                1. Rends-la plus pr√©cise et visuellement riche
                2. Ajoute des d√©tails sur l'expression des personnages
                3. Pr√©cise le cadrage et la composition
                4. Int√®gre le style artistique demand√©
                5. Garde la coh√©rence du h√©ros principal
                """,
                expected_output="""
                Un JSON avec UNIQUEMENT les descriptions am√©lior√©es:
                {{
                    "scenes": [
                        {{
                            "scene_index": 0,
                            "improved_description": "description visuelle am√©lior√©e"
                        }}
                    ],
                    "visual_improvements": ["liste des am√©liorations visuelles"]
                }}
                """,
                agent=self.description_agent
            )
            
            # Cr√©ation et ex√©cution de l'√©quipe CrewAI selon la documentation
            enhancement_crew = Crew(
                agents=[self.dialogue_agent, self.description_agent],
                tasks=[dialogue_task, description_task],
                process=Process.sequential,  # Utilise sequential comme recommand√©
                verbose=True,
                memory=True
            )
            
            print("üöÄ Lancement de l'am√©lioration textuelle CrewAI...")
            
            # Ex√©cution selon la documentation CrewAI
            result = enhancement_crew.kickoff(inputs=context)
            
            print("‚úÖ Am√©lioration textuelle termin√©e")
            
            # Reconstitution du sc√©nario avec am√©liorations
            enhanced_scenario = self._merge_improvements(
                base_scenario, 
                result, 
                user_prompt, 
                style
            )
            
            return enhanced_scenario
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'am√©lioration CrewAI: {e}")
            import traceback
            traceback.print_exc()
            # Retourne le sc√©nario original en cas d'erreur
            base_scenario["crewai_enhanced"] = False
            base_scenario["enhancement_error"] = str(e)
            return base_scenario
    
    def _merge_improvements(
        self, 
        base_scenario: Dict[str, Any], 
        crewai_result: Any,
        user_prompt: str,
        style: str
    ) -> Dict[str, Any]:
        """
        Fusionne les am√©liorations CrewAI avec le sc√©nario de base
        en pr√©servant tous les √©l√©ments techniques
        """
        try:
            print("üîÑ Fusion des am√©liorations avec le sc√©nario de base...")
            
            # Copie compl√®te du sc√©nario de base (pr√©servation technique)
            enhanced_scenario = base_scenario.copy()
            
            # Extraction du r√©sultat CrewAI selon la documentation
            result_text = crewai_result.raw if hasattr(crewai_result, 'raw') else str(crewai_result)
            
            print(f"üìÑ R√©sultat CrewAI brut: {result_text[:200]}...")
            
            # Tentative d'extraction des am√©liorations du texte
            # Selon la doc, les r√©sultats peuvent √™tre dans diff√©rents formats
            dialogue_improvements = None
            description_improvements = None
            
            try:
                # Si c'est du JSON valide
                if result_text.strip().startswith('{'):
                    result_json = json.loads(result_text)
                    if "improved_dialogues" in result_text:
                        dialogue_improvements = result_json
                    elif "improved_description" in result_text:
                        description_improvements = result_json
                else:
                    # Parsing plus intelligent pour extraire les am√©liorations du texte
                    print("‚ö†Ô∏è R√©sultat non JSON, analyse textuelle...")
                    enhanced_scenario["crewai_text_result"] = result_text
            except json.JSONDecodeError:
                print("‚ö†Ô∏è Impossible de parser le r√©sultat CrewAI comme JSON")
                enhanced_scenario["crewai_raw_result"] = result_text
            
            # Application basique des am√©liorations si disponibles
            if dialogue_improvements and enhanced_scenario.get("scenes"):
                for i, scene in enumerate(enhanced_scenario["scenes"]):
                    if dialogue_improvements.get("scenes") and i < len(dialogue_improvements["scenes"]):
                        improved_scene = dialogue_improvements["scenes"][i]
                        if improved_scene.get("improved_dialogues"):
                            scene["dialogues"] = improved_scene["improved_dialogues"]
            
            if description_improvements and enhanced_scenario.get("scenes"):
                for i, scene in enumerate(enhanced_scenario["scenes"]):
                    if description_improvements.get("scenes") and i < len(description_improvements["scenes"]):
                        improved_scene = description_improvements["scenes"][i]
                        if improved_scene.get("improved_description"):
                            scene["description"] = improved_scene["improved_description"]
            
            # Ajout des m√©tadonn√©es CrewAI
            enhanced_scenario["crewai_enhanced"] = True
            enhanced_scenario["enhancement_timestamp"] = datetime.now().isoformat()
            enhanced_scenario["enhancement_type"] = "text_only"
            enhanced_scenario["original_prompt"] = user_prompt
            enhanced_scenario["requested_style"] = style
            
            print(f"‚úÖ Sc√©nario fusionn√© avec succ√®s")
            
            return enhanced_scenario
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la fusion: {e}")
            # En cas d'erreur, retourne le sc√©nario de base avec marquage
            base_scenario["crewai_enhanced"] = False
            base_scenario["enhancement_error"] = f"Fusion failed: {str(e)}"
            return base_scenario
    
    def validate_enhanced_scenario(self, scenario: Dict[str, Any]) -> Dict[str, Any]:
        """
        Valide que le sc√©nario am√©lior√© conserve la structure requise
        """
        errors = []
        
        # V√©rifications de base
        if not scenario.get("scenes"):
            errors.append("Aucune sc√®ne trouv√©e")
        
        if not scenario.get("title"):
            errors.append("Titre manquant")
        
        # V√©rification des sc√®nes
        for i, scene in enumerate(scenario.get("scenes", [])):
            if not scene.get("description"):
                errors.append(f"Description manquante pour la sc√®ne {i+1}")
            
            if not scene.get("dialogues"):
                errors.append(f"Dialogues manquants pour la sc√®ne {i+1}")
            
            # V√©rification des dialogues
            for j, dialogue in enumerate(scene.get("dialogues", [])):
                if not isinstance(dialogue, dict):
                    errors.append(f"Format de dialogue invalide - Sc√®ne {i+1}, Dialogue {j+1}")
                elif not dialogue.get("text"):
                    errors.append(f"Texte de dialogue manquant - Sc√®ne {i+1}, Dialogue {j+1}")
        
        return {
            "is_valid": len(errors) == 0,
            "errors": errors,
            "scene_count": len(scenario.get("scenes", [])),
            "has_crewai_enhancements": scenario.get("crewai_enhanced", False)
        }

# Instance globale - sera initialis√©e √† la demande
_crewai_comic_enhancer = None

def get_crewai_comic_enhancer():
    """Retourne l'instance CrewAI, la cr√©e si n√©cessaire"""
    global _crewai_comic_enhancer
    if _crewai_comic_enhancer is None:
        _crewai_comic_enhancer = CrewAIComicEnhancer()
    return _crewai_comic_enhancer
