"""
Service Runway Gen-4 Turbo pour de VRAIS dessins anim√©s narratifs
Version qui g√©n√®re des histoires compl√®tes avec text-to-video
"""

import os
import time
from typing import Dict, Any, List
from datetime import datetime
import asyncio
import httpx
import traceback

class RunwayStoryService:
    """Service de g√©n√©ration de vrais dessins anim√©s avec histoires compl√®tes"""
    
    def __init__(self):
        self.api_key = os.getenv("RUNWAY_API_KEY")
        self.base_url = os.getenv("RUNWAY_BASE_URL", "https://api.dev.runwayml.com")
        
        if not self.api_key or self.api_key == "your-runway-api-key-here":
            print("‚ùå RUNWAY_API_KEY manquante - ERREUR FATALE")
            raise Exception("Cl√© API Runway manquante - impossible de continuer")
        else:
            print(f"üîë Cl√© API Runway d√©tect√©e: {self.api_key[:20]}...")
            print("üé¨ MODE PRODUCTION - Vrais dessins anim√©s narratifs")
        
        print(f"üì∫ Service Runway Story initialis√© - Vrais dessins anim√©s TV")
        print(f"üì° Base URL: {self.base_url}")

    def _create_story_narrative(self, style: str, theme: str, custom_prompt: str = "") -> Dict[str, Any]:
        """Cr√©e une histoire narrative compl√®te selon le th√®me"""
        
        story_templates = {
            "adventure": {
                "title": "La Grande Aventure",
                "story": """Notre jeune h√©ros d√©couvre une carte myst√©rieuse qui le m√®ne vers une aventure extraordinaire. 
                Il traverse des for√™ts enchant√©es, rencontre des cr√©atures magiques qui deviennent ses amis, 
                et d√©couvre un tr√©sor qui n'est pas fait d'or, mais d'amiti√© et de courage. 
                √Ä la fin, il rentre chez lui transform√© par cette aventure, plus sage et plus confiant.""",
                "scenes": [
                    "Le h√©ros trouve la carte myst√©rieuse et d√©cide de partir √† l'aventure",
                    "Il traverse la for√™t enchant√©e et rencontre ses premiers amis magiques", 
                    "Ensemble, ils surmontent des obstacles et d√©couvrent le vrai tr√©sor",
                    "Le h√©ros rentre chez lui, enrichi par cette belle aventure"
                ]
            },
            "magic": {
                "title": "Le Monde des Sortil√®ges",
                "story": """Dans un royaume magique, une jeune apprentie sorci√®re apprend √† ma√Ætriser ses pouvoirs. 
                Elle d√©couvre que la vraie magie ne vient pas des sortil√®ges, mais de la bienveillance et de l'entraide. 
                Quand une terrible mal√©diction menace le royaume, elle unit tous les habitants pour la briser, 
                prouvant que ensemble, on peut accomplir des miracles.""",
                "scenes": [
                    "La jeune sorci√®re apprend ses premiers sorts dans l'√©cole de magie",
                    "Elle d√©couvre une mal√©diction qui menace tout le royaume magique",
                    "Elle rassemble tous les habitants pour unir leurs forces magiques",
                    "Ensemble, ils brisent la mal√©diction et sauvent le royaume"
                ]
            },
            "space": {
                "title": "Voyage vers les √âtoiles",
                "story": """Un jeune astronaute part explorer l'espace et d√©couvre des plan√®tes merveilleuses. 
                Sur chaque plan√®te, il rencontre des aliens sympathiques qui lui apprennent leurs coutumes. 
                Il comprend que l'univers est plein de diversit√© et de beaut√©, et que l'amiti√© transcende toutes les diff√©rences. 
                Il revient sur Terre avec de nombreux amis cosmiques.""",
                "scenes": [
                    "L'astronaute d√©colle dans son vaisseau spatial vers l'inconnu",
                    "Il d√©couvre la premi√®re plan√®te color√©e avec des aliens amicaux",
                    "Il visite d'autres mondes et apprend leurs cultures uniques",
                    "Il revient sur Terre avec ses nouveaux amis de l'espace"
                ]
            },
            "animals": {
                "title": "La Famille de la For√™t", 
                "story": """Dans la for√™t, tous les animaux vivent comme une grande famille. 
                Quand le petit lapin se perd, tous les animaux s'unissent pour le retrouver. 
                Cette aventure leur enseigne l'importance de l'entraide et de la solidarit√©. 
                D√©sormais, ils veillent encore plus les uns sur les autres.""",
                "scenes": [
                    "Les animaux de la for√™t vivent heureux ensemble",
                    "Le petit lapin se perd et tout le monde s'inqui√®te",
                    "Tous les animaux s'organisent pour partir √† sa recherche",
                    "Ils le retrouvent et c√©l√®brent leur amiti√© renforc√©e"
                ]
            },
            "friendship": {
                "title": "Les Amis pour la Vie",
                "story": """Deux enfants tr√®s diff√©rents se rencontrent et deviennent les meilleurs amis du monde. 
                Ensemble, ils d√©couvrent que leurs diff√©rences les rendent plus forts. 
                Quand l'un d'eux doit d√©m√©nager, ils promettent de rester amis pour toujours. 
                Leur amiti√© r√©siste √† la distance et au temps.""",
                "scenes": [
                    "Deux enfants diff√©rents se rencontrent et apprennent √† se conna√Ætre",
                    "Ils d√©couvrent qu'ils se compl√®tent parfaitement malgr√© leurs diff√©rences",
                    "L'un d'eux doit partir, mais ils promettent de rester amis",
                    "Ils prouvent que la vraie amiti√© surmonte tous les obstacles"
                ]
            }
        }
        
        # Prendre le template selon le th√®me
        base_story = story_templates.get(theme, story_templates["adventure"])
        
        # Personnaliser avec le prompt de l'utilisateur
        if custom_prompt:
            base_story["story"] = f"{base_story['story']} {custom_prompt}"
            
        return base_story

    def _create_text_to_video_prompt(self, style: str, story_scene: str, scene_number: int) -> str:
        """Cr√©e un prompt simplifi√© mais narratif pour une sc√®ne"""
        
        style_prompts = {
            "cartoon": "Cartoon animation style, colorful characters",
            "fairy_tale": "Fairy tale animation style, magical atmosphere",
            "anime": "Anime animation style, expressive characters",
            "realistic": "Semi-realistic animation style, detailed",
            "paper_craft": "Paper craft animation style, layered cutout",
            "watercolor": "Watercolor animation style, artistic brushstrokes"
        }
        
        base_style = style_prompts.get(style, style_prompts["cartoon"])
        
        # Prompt court et efficace
        prompt = f"{base_style}. Scene {scene_number}: {story_scene}. Characters moving and interacting naturally. Child-friendly, bright colors, engaging story."
        
        return prompt

    async def generate_animation(self, animation_data: Dict[str, Any]) -> Dict[str, Any]:
        """G√©n√©rer un vrai dessin anim√© narratif complet"""
        
        style = animation_data.get("style", "cartoon")
        theme = animation_data.get("theme", "adventure")
        orientation = animation_data.get("orientation", "landscape")
        custom_prompt = animation_data.get("prompt", "")
        
        print(f"üé¨ G√©n√©ration VRAI DESSIN ANIM√â - Style: {style}, Th√®me: {theme}")
        print(f"üìù Histoire personnalis√©e: {custom_prompt}")
        
        try:
            # √âtape 1: Cr√©er l'histoire narrative compl√®te
            story_data = self._create_story_narrative(style, theme, custom_prompt)
            print(f"üìö Histoire cr√©√©e: {story_data['title']}")
            print(f"üìñ R√©sum√©: {story_data['story'][:100]}...")
            
            # √âtape 2: G√©n√©rer la vid√©o principale avec text-to-video
            main_scene = story_data['scenes'][0]  # Premi√®re sc√®ne comme vid√©o principale
            video_prompt = self._create_text_to_video_prompt(style, main_scene, 1)
            
            print(f"üéØ G√©n√©ration de la sc√®ne principale...")
            print(f"üìù Prompt vid√©o: {video_prompt[:150]}...")
            
            # Ratio mapping pour text-to-video
            ratio_map = {
                "landscape": "1280:720",  # Format TV standard
                "portrait": "720:1280",
                "square": "720:720"
            }
            ratio = ratio_map.get(orientation, "1280:720")
            
            # G√©n√©rer la vid√©o principale avec animation narrative avanc√©e (10 secondes max)
            main_video_url = await self._generate_text_to_video(video_prompt, ratio, duration=10)
            
            # √âtape 3: Optionnel - G√©n√©rer des sc√®nes suppl√©mentaires (si budget le permet)
            additional_scenes = []
            try:
                # G√©n√©rer une sc√®ne suppl√©mentaire courte
                if len(story_data['scenes']) > 1:
                    second_scene = story_data['scenes'][1]
                    second_prompt = self._create_text_to_video_prompt(style, second_scene, 2)
                    second_video = await self._generate_text_to_video(second_prompt, ratio, duration=10)
                    additional_scenes.append({
                        'title': f"Sc√®ne 2: {second_scene[:50]}...",
                        'video_url': second_video,
                        'prompt': second_scene
                    })
            except Exception as e:
                print(f"‚ö†Ô∏è Sc√®ne suppl√©mentaire √©chou√©e (normal si quota atteint): {e}")
            
            # Retourner le vrai dessin anim√©
            return {
                "id": f"runway_story_{int(time.time())}",
                "title": story_data['title'],
                "description": f"Dessin anim√© {style} - {story_data['title']}",
                "video_url": main_video_url,
                "thumbnail_url": main_video_url,  # Runway g√©n√®re un thumbnail automatiquement
                "status": "completed",
                "created_at": datetime.now().isoformat(),
                "completed_at": datetime.now().isoformat(),
                "duration": 10 + (len(additional_scenes) * 10),
                "style": style,
                "theme": theme,
                "orientation": orientation,
                "prompt": custom_prompt,
                "story": story_data['story'],
                "story_scenes": story_data['scenes'],
                "additional_videos": additional_scenes,
                "narrative_type": "full_animated_story",
                "production_type": "text_to_video"
            }
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration du dessin anim√©: {e}")
            print(f"üìä Traceback complet: {traceback.format_exc()}")
            raise Exception(f"Impossible de g√©n√©rer le dessin anim√©: {str(e)}")

    async def _generate_text_to_video(self, prompt: str, ratio: str = "1280:720", duration: int = 15) -> str:
        """G√©n√®re une vid√©o narrative en utilisant text-to-image puis image-to-video avec des prompts tr√®s d√©taill√©s"""
        
        print(f"üé¨ G√©n√©ration de dessin anim√© narratif (text-to-image + image-to-video)...")
        
        # √âtape 1: Cr√©er une image tr√®s d√©taill√©e pour l'animation
        detailed_image_prompt = f"{prompt} High-quality animation keyframe, professional character design, cinematic composition."
        
        # G√©n√©rer l'image de base avec plus de d√©tails
        image_url = await self._generate_detailed_image(detailed_image_prompt.strip(), ratio)
        
        # √âtape 2: Cr√©er un prompt d'animation simplifi√©
        animation_prompt = f"Characters move naturally with gestures and expressions. Camera movement enhances storytelling. Smooth professional animation quality. Complete narrative sequence."
        
        # G√©n√©rer l'animation narrative
        video_url = await self._generate_narrative_video(image_url, animation_prompt.strip(), duration)
        
        return video_url

    async def _generate_detailed_image(self, prompt: str, ratio: str = "1280:720") -> str:
        """G√©n√®re une image tr√®s d√©taill√©e optimis√©e pour l'animation narrative"""
        
        print(f"üé® G√©n√©ration d'image narrative d√©taill√©e...")
        
        payload = {
            "model": "gen4_image",
            "promptText": prompt,
            "ratio": ratio
        }
        
        async with httpx.AsyncClient(timeout=300.0) as client:
            response = await client.post(
                f"{self.base_url}/v1/text_to_image",
                headers=self._get_headers(),
                json=payload
            )
            
            if response.status_code != 200:
                error_detail = response.text
                print(f"‚ùå Erreur text_to_image: {response.status_code} - {error_detail}")
                raise Exception(f"Erreur API Runway text_to_image: {response.status_code} - {error_detail}")
            
            task_data = response.json()
            task_id = task_data.get("id")
            
            if not task_id:
                raise Exception("ID de t√¢che manquant dans la r√©ponse text_to_image")
            
            print(f"‚è≥ T√¢che image narrative cr√©√©e: {task_id}")
            
            image_url = await self._wait_for_task_completion(task_id, "image")
            return image_url

    async def _generate_narrative_video(self, image_url: str, animation_prompt: str, duration: int = 15) -> str:
        """G√©n√®re une vid√©o narrative √† partir de l'image avec des instructions d'animation d√©taill√©es"""
        
        print(f"üé• G√©n√©ration de vid√©o narrative avec animation avanc√©e...")
        print(f"üñºÔ∏è Image source: {image_url}")
        
        payload = {
            "model": "gen4_turbo",
            "promptImage": image_url,
            "promptText": animation_prompt,
            "duration": duration,
            "ratio": "1280:720"
        }
        
        async with httpx.AsyncClient(timeout=300.0) as client:
            response = await client.post(
                f"{self.base_url}/v1/image_to_video",
                headers=self._get_headers(),
                json=payload
            )
            
            if response.status_code != 200:
                error_detail = response.text
                print(f"‚ùå Erreur image_to_video: {response.status_code} - {error_detail}")
                raise Exception(f"Erreur API Runway image_to_video: {response.status_code} - {error_detail}")
            
            task_data = response.json()
            task_id = task_data.get("id")
            
            if not task_id:
                raise Exception("ID de t√¢che manquant dans la r√©ponse image_to_video")
            
            print(f"‚è≥ T√¢che vid√©o narrative cr√©√©e: {task_id}")
            
            video_url = await self._wait_for_task_completion(task_id, "video")
            return video_url

    def _get_headers(self) -> Dict[str, str]:
        """Headers pour l'authentification Runway"""
        return {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "X-Runway-Version": "2024-11-06"
        }

    async def _wait_for_task_completion(self, task_id: str, task_type: str = "task") -> str:
        """Attend la fin d'une t√¢che Runway et retourne l'URL du r√©sultat"""
        
        max_attempts = 60  # 10 minutes max
        attempt = 0
        
        while attempt < max_attempts:
            try:
                async with httpx.AsyncClient(timeout=30.0) as client:
                    response = await client.get(
                        f"{self.base_url}/v1/tasks/{task_id}",
                        headers=self._get_headers()
                    )
                    
                    if response.status_code != 200:
                        print(f"‚ùå Erreur lors de la v√©rification du statut: {response.status_code}")
                        await asyncio.sleep(10)
                        attempt += 1
                        continue
                    
                    task_status = response.json()
                    status = task_status.get("status")
                    
                    print(f"üìä Statut {task_type}: {status} (tentative {attempt + 1}/{max_attempts})")
                    
                    if status in ["completed", "SUCCEEDED"]:
                        output = task_status.get("output")
                        if output and len(output) > 0:
                            result_url = output[0]
                            print(f"‚úÖ {task_type.capitalize()} termin√©: {result_url}")
                            return result_url
                        else:
                            raise Exception(f"Aucun output trouv√© pour la t√¢che {task_id}")
                    
                    elif status in ["failed", "FAILED"]:
                        error = task_status.get("error", "Erreur inconnue")
                        raise Exception(f"T√¢che {task_id} √©chou√©e: {error}")
                    
                    elif status in ["pending", "running", "PENDING", "RUNNING"]:
                        await asyncio.sleep(10)
                        attempt += 1
                    
                    else:
                        print(f"‚ö†Ô∏è Statut inattendu: {status}")
                        await asyncio.sleep(10)
                        attempt += 1
                        
            except Exception as e:
                print(f"‚ùå Erreur lors de la v√©rification: {e}")
                await asyncio.sleep(10)
                attempt += 1
        
        raise Exception(f"Timeout: La t√¢che {task_id} n'a pas termin√© dans les temps")

# Instance globale du service story
runway_story_service = RunwayStoryService()
