from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import Dict, Any
import json
import os
from datetime import datetime

# Fichier de stockage local pour les configurations
CONFIG_FILE = "features_config.json"

router = APIRouter(prefix="/api", tags=["admin"])

# Mod√®les Pydantic
class FeatureUpdate(BaseModel):
    enabled: bool

class FeaturesResponse(BaseModel):
    features: Dict[str, Any]

# Configuration par d√©faut des fonctionnalit√©s
DEFAULT_FEATURES = {
    "animation": {"enabled": True, "name": "Dessin anim√©", "icon": "üé¨", "description": "G√©n√©ration de dessins anim√©s personnalis√©s avec IA"},
    "comic": {"enabled": True, "name": "Bande dessin√©e", "icon": "üí¨", "description": "Cr√©ation de bandes dessin√©es avec bulles de dialogue"},
    "coloring": {"enabled": True, "name": "Coloriage", "icon": "üé®", "description": "Pages de coloriage √† imprimer pour les enfants"},
    "histoire": {"enabled": True, "name": "Histoire", "icon": "üìñ", "description": "Histoires avec possibilit√© d'ajouter une narration audio"},
    "rhyme": {"enabled": True, "name": "Comptine", "icon": "üéµ", "description": "Comptines musicales avec paroles et m√©lodies"}
}

def load_features_config():
    """Charger la configuration depuis le fichier JSON"""
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            # Cr√©er le fichier avec les valeurs par d√©faut
            save_features_config(DEFAULT_FEATURES)
            return DEFAULT_FEATURES
    except Exception as e:
        print(f"Erreur lors du chargement de la configuration: {e}")
        return DEFAULT_FEATURES

def save_features_config(features):
    """Sauvegarder la configuration dans le fichier JSON"""
    try:
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(features, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        print(f"Erreur lors de la sauvegarde de la configuration: {e}")
        return False

@router.get("/features")
async def get_features():
    """R√©cup√©rer toutes les fonctionnalit√©s"""
    try:
        features = load_features_config()
        return features
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration des fonctionnalit√©s: {e}")
        return DEFAULT_FEATURES

@router.put("/features/{feature_key}")
async def update_feature(feature_key: str, feature_update: FeatureUpdate):
    """Mettre √† jour une fonctionnalit√© sp√©cifique"""
    try:
        # Charger la configuration actuelle
        features = load_features_config()
        
        # V√©rifier que la fonctionnalit√© existe
        if feature_key not in features:
            raise HTTPException(status_code=404, detail="Fonctionnalit√© non trouv√©e")
        
        # Mettre √† jour la fonctionnalit√©
        features[feature_key]["enabled"] = feature_update.enabled
        features[feature_key]["updated_at"] = datetime.now().isoformat()
        
        # Sauvegarder la configuration
        if save_features_config(features):
            return {"features": features}
        else:
            raise HTTPException(status_code=500, detail="Erreur lors de la sauvegarde")
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"Erreur lors de la mise √† jour de la fonctionnalit√© {feature_key}: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

@router.post("/features/reset")
async def reset_features():
    """R√©initialiser toutes les fonctionnalit√©s √† leur √©tat par d√©faut"""
    try:
        # R√©initialiser toutes les fonctionnalit√©s √† True
        features = load_features_config()
        for feature_key in features:
            features[feature_key]["enabled"] = True
            features[feature_key]["updated_at"] = datetime.now().isoformat()
        
        # Sauvegarder la configuration
        if save_features_config(features):
            return {"features": features}
        else:
            raise HTTPException(status_code=500, detail="Erreur lors de la sauvegarde")
            
    except Exception as e:
        print(f"Erreur lors de la r√©initialisation des fonctionnalit√©s: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

@router.get("/features/{feature_key}")
async def get_feature(feature_key: str):
    """R√©cup√©rer une fonctionnalit√© sp√©cifique"""
    try:
        features = load_features_config()
        
        if feature_key in features:
            return features[feature_key]
        else:
            raise HTTPException(status_code=404, detail="Fonctionnalit√© non trouv√©e")
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration de la fonctionnalit√© {feature_key}: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")