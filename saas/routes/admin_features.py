from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import Dict, Any, List
import os
from supabase import create_client, Client
from datetime import datetime

# Configuration Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")

# Initialisation conditionnelle de Supabase
supabase = None
if SUPABASE_URL and SUPABASE_KEY:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
else:
    print("‚ö†Ô∏è Variables d'environnement Supabase non d√©finies - mode fallback activ√©")

router = APIRouter(prefix="/api", tags=["admin"])

# Mod√®les Pydantic
class FeatureUpdate(BaseModel):
    enabled: bool

class FeatureResponse(BaseModel):
    feature_key: str
    enabled: bool
    name: str
    icon: str
    description: str

class FeaturesResponse(BaseModel):
    features: Dict[str, Any]

# Configuration par d√©faut des fonctionnalit√©s
DEFAULT_FEATURES = {
    "animation": {"enabled": True, "name": "Dessin anim√©", "icon": "üé¨"},
    "comic": {"enabled": True, "name": "Bande dessin√©e", "icon": "üí¨"},
    "coloring": {"enabled": True, "name": "Coloriage", "icon": "üé®"},
    "audio": {"enabled": True, "name": "Histoire", "icon": "üìñ"},
    "rhyme": {"enabled": True, "name": "Comptine", "icon": "üéµ"}
}

@router.get("/features")
async def get_features():
    """R√©cup√©rer toutes les fonctionnalit√©s depuis la base de donn√©es"""
    try:
        # Si Supabase n'est pas disponible, retourner les valeurs par d√©faut
        if not supabase:
            print("Supabase non disponible - retour des valeurs par d√©faut")
            return DEFAULT_FEATURES
            
        # R√©cup√©rer les fonctionnalit√©s depuis Supabase
        response = supabase.table("feature_config").select("*").execute()
        
        if response.data:
            features = {}
            for feature in response.data:
                features[feature["feature_key"]] = {
                    "enabled": feature["enabled"],
                    "name": feature["name"],
                    "icon": feature["icon"],
                    "description": feature.get("description", "")
                }
            return features
        else:
            # Si aucune donn√©e, retourner les valeurs par d√©faut
            return DEFAULT_FEATURES
            
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration des fonctionnalit√©s: {e}")
        return DEFAULT_FEATURES

@router.put("/features/{feature_key}")
async def update_feature(feature_key: str, feature_update: FeatureUpdate):
    """Mettre √† jour une fonctionnalit√© sp√©cifique"""
    try:
        # Si Supabase n'est pas disponible, simuler la mise √† jour
        if not supabase:
            print(f"Supabase non disponible - simulation de mise √† jour pour {feature_key}")
            # Retourner les fonctionnalit√©s par d√©faut avec la modification simul√©e
            features = DEFAULT_FEATURES.copy()
            if feature_key in features:
                features[feature_key]["enabled"] = feature_update.enabled
            return {"features": features}
            
        # V√©rifier que la fonctionnalit√© existe
        response = supabase.table("feature_config").select("*").eq("feature_key", feature_key).execute()
        
        if not response.data:
            raise HTTPException(status_code=404, detail="Fonctionnalit√© non trouv√©e")
        
        # Mettre √† jour la fonctionnalit√©
        update_response = supabase.table("feature_config").update({
            "enabled": feature_update.enabled,
            "updated_at": datetime.now().isoformat()
        }).eq("feature_key", feature_key).execute()
        
        if update_response.data:
            # R√©cup√©rer toutes les fonctionnalit√©s mises √† jour
            all_features = await get_features()
            return {"features": all_features}
        else:
            raise HTTPException(status_code=500, detail="Erreur lors de la mise √† jour")
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"Erreur lors de la mise √† jour de la fonctionnalit√© {feature_key}: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

@router.post("/features/reset")
async def reset_features():
    """R√©initialiser toutes les fonctionnalit√©s √† leur √©tat par d√©faut"""
    try:
        # R√©initialiser toutes les fonctionnalit√©s √† True
        for feature_key in DEFAULT_FEATURES.keys():
            supabase.table("feature_config").update({
                "enabled": True,
                "updated_at": datetime.now().isoformat()
            }).eq("feature_key", feature_key).execute()
        
        # R√©cup√©rer toutes les fonctionnalit√©s mises √† jour
        all_features = await get_features()
        return {"features": all_features}
        
    except Exception as e:
        print(f"Erreur lors de la r√©initialisation des fonctionnalit√©s: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

@router.get("/features/{feature_key}")
async def get_feature(feature_key: str):
    """R√©cup√©rer une fonctionnalit√© sp√©cifique"""
    try:
        response = supabase.table("feature_config").select("*").eq("feature_key", feature_key).execute()
        
        if response.data:
            feature = response.data[0]
            return {
                "feature_key": feature["feature_key"],
                "enabled": feature["enabled"],
                "name": feature["name"],
                "icon": feature["icon"],
                "description": feature.get("description", "")
            }
        else:
            raise HTTPException(status_code=404, detail="Fonctionnalit√© non trouv√©e")
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration de la fonctionnalit√© {feature_key}: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")
