from fastapi import FastAPI, HTTPException, UploadFile, File, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import Optional
from unidecode import unidecode
import traceback
import os
import json
from fastapi import Form

from dotenv import load_dotenv
import openai
from openai import AsyncOpenAI

from schemas.animation import AnimationRequest, AnimationResponse, AnimationStatusResponse, AnimationStatus
from datetime import datetime
from services.tts import generate_speech
from services.stt import transcribe_audio
from services.veo3_fal import veo3_fal_service
from services.coloring_generator import ColoringGenerator
from utils.translate import translate_text

# --- Chargement .env ---
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
TEXT_MODEL = os.getenv("TEXT_MODEL", "gpt-4o-mini")

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://localhost:5174", "http://localhost:5175", "http://localhost:5177"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware pour afficher les erreurs
@app.middleware("http")
async def log_exceptions(request: Request, call_next):
    try:
        return await call_next(request)
    except Exception:
        print("üî• Exception occurred during request:")
        traceback.print_exc()
        raise

@app.post("/tts")
async def tts_endpoint(data: dict):
    try:
        text = data["text"]
        path = generate_speech(text)
        return {"audio_path": path}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/stt")
async def stt_endpoint(file: UploadFile = File(...)):
    try:
        temp_path = f"static/{file.filename}"
        with open(temp_path, "wb") as f:
            f.write(await file.read())
        transcription = transcribe_audio(temp_path)
        return {"transcription": transcription}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# --- Comptine ---
class RhymeRequest(BaseModel):
    rhyme_type: str
    custom_request: Optional[str] = None

@app.post("/generate_rhyme/")
async def generate_rhyme(request: RhymeRequest):
    try:
        prompt = f"√âcris une comptine courte, joyeuse et rythm√©e pour enfants sur le th√®me : {request.rhyme_type}.\n"
        if request.custom_request:
            prompt += f"D√©tails suppl√©mentaires : {request.custom_request}"

        client = AsyncOpenAI()

        response = await client.chat.completions.create(
            model=TEXT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8
        )
        content = response.choices[0].message.content.strip()

        # Extraire un titre nettoy√© depuis le contenu si possible
        final_title = "audio_story"
        if content.startswith("**") and "**" in content[2:]:
            final_title = content.split("**")[1].strip()        # Nettoyer pour un nom de fichier
        safe_filename = unidecode(final_title.lower().replace(" ", "_"))

        # Pas de g√©n√©ration audio pour les comptines dans cette version simplifi√©e
        # audio_path = generate_speech(content, voice=request.voice, filename=safe_filename)

        return {
            "title": final_title,
            "content": content,
            "audio_path": None  # Pas d'audio pour le moment
        }

    except Exception as e:
        import traceback
        print("‚ùå Erreur dans /generate_rhyme/ :", traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))

# --- Histoire / Conte ---
class AudioStoryRequest(BaseModel):
    story_type: str
    voice: Optional[str] = None
    custom_request: Optional[str] = None

# --- Coloriage ---
class ColoringRequest(BaseModel):
    theme: str

@app.post("/generate_audio_story/")
async def generate_audio_story(request: AudioStoryRequest):
    try:
        print("üì• Requ√™te re√ßue sur /generate_audio_story/")
        print("üßæ Donn√©es re√ßues :", request)

        prompt = f"Raconte un conte original pour enfant sur le th√®me : {request.story_type}. "
        prompt += "Utilise un ton bienveillant, imag√© et adapt√© √† un enfant de 4 √† 8 ans. "
        if request.custom_request:
            prompt += f"D√©tails suppl√©mentaires : {request.custom_request}"

        print("üí° Prompt g√©n√©r√© :", prompt)

        client = AsyncOpenAI()

        response = await client.chat.completions.create(
            model=TEXT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8
        )

        content = response.choices[0].message.content.strip()
        print("üìù Conte g√©n√©r√© :", content[:200], "...")  # Affiche un extrait

        audio_path = None
        if request.voice:
            print("üîä G√©n√©ration audio activ√©e avec la voix :", request.voice)
            audio_path = generate_speech(content, voice=request.voice)
            print("‚úÖ Audio g√©n√©r√© :", audio_path)
        else:
            print("‚ÑπÔ∏è Aucune voix sp√©cifi√©e, audio non g√©n√©r√©.")

        return {
            "title": f"L'histoire de {request.story_type.capitalize()}",
            "content": content,
            "audio_path": audio_path
        }

    except Exception as e:
        print("‚ùå Erreur lors de la g√©n√©ration du conte audio :")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

# --- Endpoint Coloriage ---
@app.post("/generate_coloring/")
async def generate_coloring(request: ColoringRequest):
    try:
        print("üì• Requ√™te re√ßue sur /generate_coloring/")
        print("üé® Donn√©es re√ßues :", request.dict())

        # Initialiser le g√©n√©rateur de coloriages
        coloring_generator = ColoringGenerator()        # G√©n√©rer les images de coloriage
        result = await coloring_generator.generate_coloring_pages(
            theme=request.theme
        )
        
        print("‚úÖ Coloriages g√©n√©r√©s avec succ√®s")
        return result

    except Exception as e:
        print("‚ùå Erreur lors de la g√©n√©ration des coloriages :")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

# === ENDPOINTS POUR LES ANIMATIONS ===

@app.post("/api/animations/generate", response_model=AnimationResponse)
async def generate_animation(request: AnimationRequest):
    """G√©n√®re une nouvelle animation avec Veo3 via fal-ai"""
    try:
        print(f"üé¨ G√©n√©ration d'animation demand√©e: {request.style} - {request.theme}")
        
        # Construction du prompt pour fal-ai
        style_map = {
            "cartoon": "style cartoon color√©",
            "fairy_tale": "style conte de f√©es magique",
            "anime": "style anime japonais",
            "realistic": "style r√©aliste cin√©matique",
            "paper_craft": "style papier d√©coup√© artisanal",
            "watercolor": "style aquarelle artistique"
        }
        
        theme_map = {
            "adventure": "aventure √©pique avec des h√©ros",
            "magic": "monde magique avec des sortil√®ges",
            "animals": "animaux mignons et amicaux",
            "friendship": "amiti√© et entraide",
            "space": "exploration spatiale futuriste",
            "underwater": "monde sous-marin color√©",
            "forest": "for√™t enchant√©e myst√©rieuse",
            "superhero": "super-h√©ros sauvant le monde"
        }
        
        prompt_parts = [
            f"Animation courte {style_map.get(request.style, request.style)}",
            f"sur le th√®me: {theme_map.get(request.theme, request.theme)}",
            "Adapt√© aux enfants, couleurs vives, mouvements fluides",
            "Qualit√© professionnelle haute d√©finition"
        ]
        
        if request.prompt:
            prompt_parts.append(f"Histoire: {request.prompt}")
        
        animation_prompt = ". ".join(prompt_parts)
        
        # D√©termination de l'aspect ratio
        aspect_ratio = "9:16" if request.orientation == "portrait" else "16:9"
        
        # G√©n√©ration avec le service fal-ai
        result = await veo3_fal_service.generate_video(
            prompt=animation_prompt,
            aspect_ratio=aspect_ratio,
            generate_audio=True
        )
        
        # Cr√©ation de la r√©ponse
        import uuid
        animation_id = str(uuid.uuid4())
        
        animation = AnimationResponse(
            id=animation_id,
            title=request.title or "Mon Dessin Anim√©",
            description=request.description or "Dessin anim√© cr√©√© avec Veo3",
            style=request.style,
            theme=request.theme,
            orientation=request.orientation,
            status=AnimationStatus.COMPLETED,
            video_url=result["video_url"],
            created_at=datetime.now(),
            completed_at=datetime.now()
        )
        
        print(f"‚úÖ Animation cr√©√©e avec l'ID: {animation.id}")
        print(f"üé• URL vid√©o: {animation.video_url}")
        
        return animation
        
    except Exception as e:
        print("‚ùå Erreur lors de la g√©n√©ration d'animation:")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/animations/{animation_id}/status", response_model=AnimationStatusResponse)
async def get_animation_status(animation_id: str):
    """R√©cup√®re le statut d'une animation (pour compatibilit√©)"""
    try:
        # Avec fal-ai, les animations sont synchrones donc toujours completed
        return AnimationStatusResponse(
            status=AnimationStatus.COMPLETED,
            progress=100
        )
        
    except Exception as e:
        print("‚ùå Erreur lors de la r√©cup√©ration du statut:")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/animations/{animation_id}", response_model=AnimationResponse)
async def get_animation(animation_id: str):
    """R√©cup√®re une animation compl√®te (pour compatibilit√©)"""
    try:
        # Dans cette version simplifi√©e, on ne stocke pas les animations
        # On retourne une animation d'exemple ou une erreur 404
        raise HTTPException(status_code=404, detail="Animation non trouv√©e")
        
    except HTTPException:
        raise
    except Exception as e:
        print("‚ùå Erreur lors de la r√©cup√©ration de l'animation:")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/animations")
async def get_user_animations(page: int = 1, limit: int = 10):
    """R√©cup√®re les animations d'un utilisateur (version simplifi√©e)"""
    try:
        # Version simplifi√©e - retourne une liste vide
        # Dans un vrai projet, on aurait une base de donn√©es
        return {
            "animations": [],
            "total": 0,
            "page": page,
            "limit": limit,
            "total_pages": 0
        }
        
    except Exception as e:
        print("‚ùå Erreur lors de la r√©cup√©ration des animations:")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

# Cleanup √† la fermeture
@app.on_event("shutdown")
async def shutdown_event():
    """Nettoie les ressources √† la fermeture"""
    if hasattr(veo3_fal_service, 'close'):
        await veo3_fal_service.close()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
