#!/usr/bin/env python3
"""
Test de l'affichage audio pour les comptines Udio
V√©rifie que l'URL audio compl√®te est bien retourn√©e et utilisable dans le frontend
"""

import asyncio
import aiohttp
import json

async def test_audio_display():
    """Test complet de g√©n√©ration de comptine et affichage audio"""
    
    print("üéµ TEST: Affichage audio des comptines Udio")
    print("=" * 50)
    
    # √âtape 1: G√©n√©rer une comptine musicale
    print("\n1Ô∏è‚É£ G√©n√©ration d'une comptine musicale...")
    payload = {
        "rhyme_type": "lullaby",
        "custom_request": "une berceuse sur les √©toiles",
        "generate_music": True,
        "music_style": "gentle",
        "custom_style": ""
    }
    
    async with aiohttp.ClientSession() as session:
        try:
            # Appel API pour g√©n√©rer la comptine
            async with session.post(
                "http://localhost:8000/generate_rhyme/",
                json=payload,
                headers={"Content-Type": "application/json"}
            ) as response:
                
                if response.status != 200:
                    text = await response.text()
                    print(f"‚ùå Erreur g√©n√©ration: {response.status} - {text}")
                    return
                
                result = await response.json()
                print(f"‚úÖ Comptine g√©n√©r√©e:")
                print(f"   Titre: {result.get('title')}")
                print(f"   Paroles: {result.get('lyrics', 'N/A')[:100]}...")
                print(f"   Task ID: {result.get('task_id')}")
                print(f"   Statut musique: {result.get('music_status')}")
                
                if not result.get('task_id'):
                    print("‚ùå Pas de task_id, impossible de continuer")
                    return
                
                task_id = result['task_id']
                
                # √âtape 2: Polling pour attendre la musique
                print(f"\n2Ô∏è‚É£ Polling pour la musique (task_id: {task_id})...")
                max_attempts = 10  # 100 secondes max pour le test
                
                for attempt in range(1, max_attempts + 1):
                    print(f"   Tentative {attempt}/{max_attempts}...")
                    
                    async with session.get(
                        f"http://localhost:8000/check_task_status/{task_id}"
                    ) as status_response:
                        
                        if status_response.status != 200:
                            print(f"   ‚ö†Ô∏è Erreur statut: {status_response.status}")
                            await asyncio.sleep(10)
                            continue
                        
                        status = await status_response.json()
                        
                        print(f"   Statut: {status.get('status')}")
                        print(f"   Task status: {status.get('task_status')}")
                        
                        # V√©rifier si termin√©
                        if status.get('status') == 'completed' or status.get('task_status') == 'completed':
                            audio_url = status.get('audio_url') or status.get('audio_path')
                            
                            if audio_url:
                                print(f"‚úÖ Audio pr√™t!")
                                print(f"   URL: {audio_url}")
                                
                                # √âtape 3: V√©rifier que l'URL est accessible
                                print(f"\n3Ô∏è‚É£ V√©rification de l'accessibilit√© de l'URL...")
                                
                                async with session.head(audio_url) as head_response:
                                    if head_response.status == 200:
                                        print(f"‚úÖ URL audio accessible (HTTP {head_response.status})")
                                        print(f"   Content-Type: {head_response.headers.get('content-type', 'N/A')}")
                                        print(f"   Content-Length: {head_response.headers.get('content-length', 'N/A')} bytes")
                                        
                                        # √âtape 4: Simulation de ce que ferait le frontend
                                        print(f"\n4Ô∏è‚É£ Simulation frontend...")
                                        
                                        # Avant (incorrect)
                                        old_way = f"http://localhost:8000/{audio_url}"
                                        print(f"‚ùå Ancienne m√©thode (incorrecte): {old_way}")
                                        
                                        # Apr√®s (correct)
                                        new_way = audio_url
                                        print(f"‚úÖ Nouvelle m√©thode (correcte): {new_way}")
                                        
                                        print(f"\nüéâ TEST R√âUSSI!")
                                        print(f"   - La comptine est g√©n√©r√©e ‚úÖ")
                                        print(f"   - L'URL audio est extraite ‚úÖ")
                                        print(f"   - L'URL est accessible ‚úÖ") 
                                        print(f"   - Le frontend utilisera l'URL directement ‚úÖ")
                                        
                                        return
                                    else:
                                        print(f"‚ùå URL audio non accessible: HTTP {head_response.status}")
                                        return
                            else:
                                print(f"‚ö†Ô∏è T√¢che termin√©e mais pas d'URL audio")
                                return
                        
                        elif status.get('status') == 'failed':
                            print(f"‚ùå G√©n√©ration musicale √©chou√©e: {status.get('error')}")
                            return
                        
                        # Continuer le polling
                        await asyncio.sleep(10)
                
                print(f"‚è±Ô∏è Timeout atteint apr√®s {max_attempts} tentatives")
                
        except Exception as e:
            print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    asyncio.run(test_audio_display())
