#!/usr/bin/env python3
"""
Service d'animation CrewAI simplifi√© pour diagnostiquer et corriger les probl√®mes
"""

import os
import json
import asyncio
import time
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv('saas/.env')
load_dotenv('saas/.env.crewai')

class SimpleAnimationService:
    """Service d'animation simplifi√© pour diagnostic"""
    
    def __init__(self):
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        self.cache_dir = Path("saas/cache/crewai_animations")
        self.cache_dir.mkdir(parents=True, exist_ok=True)
        
        # Configuration CrewAI avec chemin court
        import tempfile
        short_temp_dir = tempfile.mkdtemp(prefix="crew_", dir="C:/temp" if os.path.exists("C:/temp") else None)
        os.environ["CREWAI_STORAGE_DIR"] = short_temp_dir
        
        # LLM Configuration
        self.llm = None
        try:
            from langchain_openai import ChatOpenAI
            self.llm = ChatOpenAI(
                openai_api_key=self.openai_api_key,
                model="gpt-4o-mini",
                temperature=0.7
            )
            print("‚úÖ LLM configur√©: GPT-4o-mini")
        except Exception as e:
            print(f"‚ùå Erreur LLM: {e}")
    
    def create_simple_agent(self):
        """Cr√©er un agent simple pour test"""
        try:
            from crewai import Agent
            
            agent = Agent(
                role="Animation Creator",
                goal="Cr√©er une animation simple et rapide",
                backstory="Expert en cr√©ation d'animations courtes et captivantes",
                verbose=True,
                allow_delegation=False,
                llm=self.llm
            )
            return agent
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation agent: {e}")
            return None
    
    def create_simple_task(self, story: str, agent):
        """Cr√©er une t√¢che simple"""
        try:
            from crewai import Task
            
            task = Task(
                description=f"""
                Cr√©e une animation simple bas√©e sur cette histoire: {story}
                
                Retourne un JSON avec cette structure exacte:
                {{
                    "scenes": [
                        {{
                            "scene_number": 1,
                            "description": "Description de la sc√®ne",
                            "duration": 5,
                            "prompt": "Prompt pour g√©n√©ration vid√©o"
                        }}
                    ],
                    "total_scenes": 1,
                    "style": "cartoon color√©"
                }}
                
                IMPORTANT: Retourne UNIQUEMENT le JSON, rien d'autre.
                """,
                agent=agent,
                expected_output="JSON valide uniquement"
            )
            return task
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation t√¢che: {e}")
            return None
    
    async def generate_simple_animation(self, story: str) -> Dict[str, Any]:
        """G√©n√©ration d'animation simplifi√©e"""
        print(f"üé¨ === G√âN√âRATION ANIMATION SIMPLE ===")
        print(f"üìù Histoire: {story}")
        
        start_time = time.time()
        
        try:
            # 1. Cr√©er l'agent
            print("1Ô∏è‚É£ Cr√©ation de l'agent...")
            agent = self.create_simple_agent()
            if not agent:
                return {"status": "error", "error": "Impossible de cr√©er l'agent"}
            
            # 2. Cr√©er la t√¢che
            print("2Ô∏è‚É£ Cr√©ation de la t√¢che...")
            task = self.create_simple_task(story, agent)
            if not task:
                return {"status": "error", "error": "Impossible de cr√©er la t√¢che"}
            
            # 3. Cr√©er l'√©quipe
            print("3Ô∏è‚É£ Cr√©ation de l'√©quipe...")
            from crewai import Crew, Process
            crew = Crew(
                agents=[agent],
                tasks=[task],
                process=Process.sequential,
                verbose=True,
                memory=False
            )
            
            # 4. Ex√©cuter
            print("4Ô∏è‚É£ Ex√©cution...")
            result = crew.kickoff()
            
            # 5. Parser le r√©sultat
            print("5Ô∏è‚É£ Analyse du r√©sultat...")
            print(f"   Type de r√©sultat: {type(result)}")
            
            # Extraire le texte du r√©sultat
            result_text = ""
            if hasattr(result, 'tasks_output') and result.tasks_output:
                result_text = result.tasks_output[0].raw
                print(f"   R√©sultat brut: {result_text[:200]}...")
            else:
                result_text = str(result)
                print(f"   R√©sultat string: {result_text[:200]}...")
            
            # Parser JSON
            animation_data = self.parse_json_safely(result_text)
            
            if not animation_data or not animation_data.get("scenes"):
                print("‚ö†Ô∏è Pas de donn√©es d'animation valides - cr√©ation manuelle")
                animation_data = {
                    "scenes": [
                        {
                            "scene_number": 1,
                            "description": f"Animation bas√©e sur: {story[:50]}...",
                            "duration": 5,
                            "prompt": f"Cartoon color√© anim√©: {story[:100]}"
                        }
                    ],
                    "total_scenes": 1,
                    "style": "cartoon color√©"
                }
            
            # 6. G√©n√©rer les vid√©os (mock pour test)
            print("6Ô∏è‚É£ G√©n√©ration des vid√©os...")
            scenes_processed = []
            
            for scene_data in animation_data.get("scenes", []):
                scene_num = scene_data.get("scene_number", 1)
                prompt = scene_data.get("prompt", "Animation simple")
                duration = scene_data.get("duration", 5)
                
                print(f"   üé¨ Sc√®ne {scene_num}: {prompt[:50]}...")
                
                # G√©n√©rer vid√©o mock
                video_result = await self.generate_mock_video(prompt, duration)
                
                scene_processed = {
                    "scene_number": scene_num,
                    "description": scene_data.get("description", ""),
                    "duration": duration,
                    "prompt": prompt,
                    "video_url": video_result.get("video_url"),
                    "local_path": video_result.get("local_path"),
                    "status": "completed"
                }
                scenes_processed.append(scene_processed)
            
            # 7. Cr√©er la vid√©o finale
            print("7Ô∏è‚É£ Assemblage final...")
            final_video_path = await self.create_final_video(scenes_processed)
            
            # 8. Retourner le r√©sultat
            total_time = time.time() - start_time
            
            result_final = {
                "status": "success",
                "video_path": final_video_path,
                "video_url": f"/static/cache/crewai_animations/{Path(final_video_path).name}",
                "scenes_count": len(scenes_processed),
                "total_duration": sum(s.get("duration", 5) for s in scenes_processed),
                "generation_time": round(total_time, 2),
                "pipeline_type": "simple_crewai",
                "scenes_details": scenes_processed,
                "animation_data": animation_data,
                "raw_agent_output": result_text[:500],
                "timestamp": datetime.now().isoformat()
            }
            
            print(f"‚úÖ Animation g√©n√©r√©e avec succ√®s!")
            print(f"   ‚è±Ô∏è Temps: {total_time:.1f}s")
            print(f"   üé¨ Sc√®nes: {len(scenes_processed)}")
            print(f"   üìÅ Vid√©o: {final_video_path}")
            
            return result_final
            
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration: {e}")
            import traceback
            traceback.print_exc()
            
            return {
                "status": "error",
                "error": str(e),
                "generation_time": time.time() - start_time,
                "timestamp": datetime.now().isoformat()
            }
    
    def parse_json_safely(self, text: str) -> Dict[str, Any]:
        """Parser JSON de fa√ßon s√©curis√©e"""
        try:
            # Nettoyer le texte
            text = text.strip()
            
            # Chercher JSON dans des blocs de code
            if "```json" in text:
                start = text.find("```json") + 7
                end = text.find("```", start)
                if end != -1:
                    text = text[start:end].strip()
            
            # Chercher JSON entre accolades
            if "{" in text and "}" in text:
                start = text.find("{")
                end = text.rfind("}") + 1
                if start != -1 and end > start:
                    text = text[start:end]
            
            # Parser JSON
            data = json.loads(text)
            print(f"‚úÖ JSON pars√© avec succ√®s: {list(data.keys())}")
            return data
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur parsing JSON: {e}")
            print(f"   Texte √† parser: {text[:200]}...")
            return {}
    
    async def generate_mock_video(self, prompt: str, duration: int) -> Dict[str, Any]:
        """G√©n√©rer une vid√©o factice"""
        print(f"üé≠ G√©n√©ration vid√©o mock: {prompt[:30]}...")
        
        # Simuler un d√©lai
        await asyncio.sleep(1)
        
        # Cr√©er un fichier mock
        mock_filename = f"mock_{int(time.time())}.mp4"
        mock_path = self.cache_dir / mock_filename
        
        # Cr√©er un fichier minimal
        try:
            with open(mock_path, 'wb') as f:
                # En-t√™te MP4 minimal
                f.write(b'\x00\x00\x00\x20ftypmp41\x00\x00\x00\x00mp41\x00\x00\x00\x08free')
                f.write(b'\x00' * 1024 * 50)  # 50KB
            
            print(f"‚úÖ Vid√©o mock cr√©√©e: {mock_path}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur cr√©ation mock: {e}")
            mock_path.touch()
        
        return {
            "status": "success",
            "video_url": f"https://example.com/mock/{mock_filename}",
            "local_path": str(mock_path),
            "duration": duration,
            "prompt": prompt,
            "is_mock": True
        }
    
    async def create_final_video(self, scenes: List[Dict]) -> str:
        """Cr√©er la vid√©o finale"""
        timestamp = int(time.time())
        final_filename = f"animation_{timestamp}.mp4"
        final_path = self.cache_dir / final_filename
        
        # Pour l'instant, copier la premi√®re sc√®ne comme vid√©o finale
        try:
            if scenes and scenes[0].get("local_path"):
                import shutil
                shutil.copy2(scenes[0]["local_path"], final_path)
                print(f"‚úÖ Vid√©o finale cr√©√©e: {final_path}")
            else:
                # Cr√©er un fichier vide
                final_path.touch()
                print(f"‚ö†Ô∏è Vid√©o finale vide cr√©√©e: {final_path}")
                
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation vid√©o finale: {e}")
            final_path.touch()
        
        return str(final_path)

# Instance globale
simple_animation_service = SimpleAnimationService()

async def test_simple_service():
    """Tester le service simplifi√©"""
    print("üß™ === TEST SERVICE SIMPLIFI√â ===\n")
    
    story = "Un petit chat qui d√©couvre un jardin magique avec des fleurs qui chantent"
    
    result = await simple_animation_service.generate_simple_animation(story)
    
    print(f"\nüìä === R√âSULTAT FINAL ===")
    print(f"Status: {result.get('status')}")
    print(f"Sc√®nes: {result.get('scenes_count')}")
    print(f"Dur√©e: {result.get('generation_time')}s")
    print(f"Vid√©o: {result.get('video_path')}")
    
    if result.get('status') == 'success':
        print("üéâ SERVICE SIMPLIFI√â FONCTIONNE!")
        return True
    else:
        print(f"‚ùå Erreur: {result.get('error')}")
        return False

if __name__ == "__main__":
    import sys
    import os
    
    # Changer le r√©pertoire de travail
    os.chdir(Path(__file__).parent)
    sys.path.insert(0, str(Path(__file__).parent))
    
    asyncio.run(test_simple_service())
