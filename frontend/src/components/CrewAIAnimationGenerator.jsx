import React, { useState, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import './CrewAIAnimationGenerator.css';

const CrewAIAnimationGenerator = ({ onSelectionChange }) => {
  const [selectedStyle, setSelectedStyle] = useState('');
  const [selectedTheme, setSelectedTheme] = useState('');
  const [selectedDuration, setSelectedDuration] = useState('');

  // Notifier le parent quand les s√©lections changent
  const handleStyleChange = (style) => {
    // D√©selectionner si on clique sur le m√™me style
    const newStyle = selectedStyle === style ? '' : style;
    setSelectedStyle(newStyle);
    if (onSelectionChange) {
      onSelectionChange({ style: newStyle, theme: selectedTheme, duration: selectedDuration });
    }
  };

  const handleThemeChange = (theme) => {
    // D√©selectionner si on clique sur le m√™me th√®me
    const newTheme = selectedTheme === theme ? '' : theme;
    setSelectedTheme(newTheme);
    if (onSelectionChange) {
      onSelectionChange({ style: selectedStyle, theme: newTheme, duration: selectedDuration });
    }
  };

  const handleDurationChange = (duration) => {
    // D√©selectionner si on clique sur la m√™me dur√©e
    const newDuration = selectedDuration === duration ? '' : duration;
    setSelectedDuration(newDuration);
    if (onSelectionChange) {
      onSelectionChange({ style: selectedStyle, theme: selectedTheme, duration: newDuration });
    }
  };
  
  const storyStyles = [
    { 
      id: 'cartoon', 
      name: 'Cartoon 3D', 
      description: 'Style color√© et amusant en 3D',
      emoji: 'üé®',
      preview: 'linear-gradient(135deg, #ff6b6b, #4ecdc4)'
    },
    { 
      id: 'watercolor', 
      name: 'Aquarelle', 
      description: 'Style artistique aquarelle',
      emoji: 'üñåÔ∏è',
      preview: 'linear-gradient(135deg, #74b9ff, #0984e3)'
    },
    { 
      id: 'anime', 
      name: 'Anime', 
      description: 'Style anime japonais',
      emoji: 'üå∏',
      preview: 'linear-gradient(135deg, #fd79a8, #e84393)'
    },
    { 
      id: 'fairy_tale', 
      name: 'Conte Magique', 
      description: 'Style f√©erique et enchanteur',
      emoji: '‚ú®',
      preview: 'linear-gradient(135deg, #a29bfe, #6c5ce7)'
    }
  ];

  const storyThemes = [
    { 
      id: 'adventure', 
      name: 'Aventure', 
      description: 'Explorations et d√©couvertes',
      emoji: 'üó∫Ô∏è'
    },
    { 
      id: 'magic', 
      name: 'Magie', 
      description: 'Monde magique et sortil√®ges',
      emoji: '‚ú®'
    },
    { 
      id: 'animals', 
      name: 'Animaux', 
      description: 'Animaux et leurs aventures',
      emoji: 'ü¶Å'
    },
    { 
      id: 'friendship', 
      name: 'Amiti√©', 
      description: 'Histoires d\'amiti√©',
      emoji: 'üë´'
    },
    { 
      id: 'space', 
      name: 'Espace', 
      description: 'Voyages spatiaux',
      emoji: 'üöÄ'
    },
    { 
      id: 'ocean', 
      name: 'Oc√©an', 
      description: 'Aventures sous-marines',
      emoji: 'üåä'
    },
    { 
      id: 'forest', 
      name: 'For√™t', 
      description: 'Myst√®res de la for√™t',
      emoji: 'üå≤'
    },
    { 
      id: 'pirates', 
      name: 'Pirates', 
      description: 'Aventures de pirates',
      emoji: 'üè¥‚Äç‚ò†Ô∏è'
    },
    { 
      id: 'dinosaurs', 
      name: 'Dinosaures', 
      description: 'L\'√©poque des dinosaures',
      emoji: 'ü¶ï'
    },
    { 
      id: 'fairy_tale', 
      name: 'Conte de f√©es', 
      description: 'Contes classiques revisit√©s',
      emoji: 'üè∞'
    },
    { 
      id: 'superhero', 
      name: 'Super-h√©ros', 
      description: 'Aventures h√©ro√Øques',
      emoji: 'ü¶∏'
    },
    { 
      id: 'winter', 
      name: 'Hiver', 
      description: 'Magie de l\'hiver',
      emoji: '‚ùÑÔ∏è'
    },
    { 
      id: 'educational', 
      name: '√âducatif', 
      description: 'Apprentissage ludique',
      emoji: 'üìö'
    }
  ];

  return (
    <div className="crewai-animation-generator">
      {/* Section Histoire - SUPPRIM√âE */}
      {/* <motion.div 
        className="story-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
      >
        <h3>üìñ 1. √âcrivez votre histoire</h3>
        
        <div className="title-section">
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="Titre de votre animation (optionnel)"
            className="title-input"
          />
        </div>

        <textarea
          value={story}
          onChange={(e) => setStory(e.target.value)}
          placeholder="√âcrivez ici votre histoire pour enfants... 

Ex: Il √©tait une fois un petit lapin qui d√©couvrait un jardin magique. Les fleurs pouvaient chanter et les papillons racontaient des histoires merveilleuses. Un jour, une sombre mal√©diction menace le jardin et notre h√©ros doit trouver le courage de sauver son monde enchant√©..."
          className="story-textarea"
          rows={6}
        />
        {story.length < 20 && story.length > 0 && (
          <span style={{ color: '#ff6b6b', fontSize: '0.8rem' }}>‚ö†Ô∏è L'histoire doit contenir au moins 20 caract√®res</span>
        )}
      </motion.div> */}

      {/* Section Style */}
      <motion.div 
        className="style-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
      >
        <h3>2. Choisissez le style visuel</h3>
        <div className="style-grid">
          {storyStyles.map((style) => (
            <motion.div
              key={style.id}
              className={`style-option ${selectedStyle === style.id ? 'selected' : ''}`}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => handleStyleChange(style.id)}
            >
              <div className="style-icon">{style.emoji}</div>
              <div className="style-info">
                <h4 className="section-subtitle">{style.name}</h4>
                <p>{style.description}</p>
              </div>
            </motion.div>
          ))}
        </div>
      </motion.div>

      {/* Section Th√®me */}
      <motion.div 
        className="theme-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
      >
        <h3>3. Choisissez le th√®me</h3>
        <div className="theme-grid">
          {storyThemes.map((theme) => (
            <motion.div
              key={theme.id}
              className={`theme-card ${selectedTheme === theme.id ? 'selected' : ''}`}
              whileHover={{ y: -5 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => handleThemeChange(theme.id)}
            >
              <div className="theme-emoji">{theme.emoji}</div>
              <h4>{theme.name}</h4>
              <p>{theme.description}</p>
            </motion.div>
          ))}
        </div>
      </motion.div>

      {/* Section Dur√©e */}
      <motion.div 
        className="duration-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.4 }}
      >
        <h3>4. Choisissez la dur√©e</h3>
        <div className="duration-grid">
          {[
            { id: '10', label: '10 secondes', description: 'Animation courte et rythm√©e', emoji: '‚ö°' },
            { id: '30', label: '30 secondes', description: 'Animation √©quilibr√©e', emoji: '‚è±Ô∏è' },
            { id: '60', label: '1 minute', description: 'Animation d√©velopp√©e', emoji: 'üé¨' },
            { id: '120', label: '2 minutes', description: 'Histoire compl√®te', emoji: 'üìΩÔ∏è' },
            { id: '180', label: '3 minutes', description: 'Animation riche', emoji: 'üé≠' },
            { id: '240', label: '4 minutes', description: 'R√©cit d√©taill√©', emoji: 'üìö' },
            { id: '300', label: '5 minutes', description: 'Animation compl√®te', emoji: 'üé™' }
          ].map((duration) => (
            <motion.div
              key={duration.id}
              className={`duration-card ${selectedDuration === duration.id ? 'selected' : ''}`}
              whileHover={{ y: -5 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => handleDurationChange(duration.id)}
            >
              <div className="duration-emoji">{duration.emoji}</div>
              <h4>{duration.label}</h4>
              <p>{duration.description}</p>
            </motion.div>
          ))}
        </div>
      </motion.div>

      {/* Section Mode de g√©n√©ration - SUPPRIM√âE */}
      {/* <motion.div 
        className="mode-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.4 }}
      >
        <h3>üöÄ 4. Mode de g√©n√©ration</h3>
        <div className="mode-grid">
          {generationModes.map((modeOption) => (
            <motion.div
              key={modeOption.id}
              className={`mode-option ${mode === modeOption.id ? 'selected' : ''}`}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => setMode(modeOption.id)}
            >
              <span className="mode-emoji">{modeOption.emoji}</span>
              <div className="mode-info">
                <h4>{modeOption.name}</h4>
                <p>{modeOption.description}</p>
                <span className="mode-time">‚è±Ô∏è {modeOption.time}</span>
              </div>
            </motion.div>
          ))}
        </div>
      </motion.div> */}

      {/* Section Options - SUPPRIM√âE */}
      {/* <motion.div 
        className="options-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.5 }}
      >
        <h3>‚öôÔ∏è 5. Options avanc√©es</h3>
        <div className="options-grid">
          <div className="option-group">
            <label>‚è±Ô∏è Dur√©e de l'animation</label>
            <select
              value={duration}
              onChange={(e) => setDuration(parseInt(e.target.value))}
            >
              <option value={30}>30 secondes (3-4 sc√®nes)</option>
              <option value={60}>1 minute (5-6 sc√®nes)</option>
              <option value={120}>2 minutes (8-10 sc√®nes)</option>
              <option value={180}>3 minutes (12-15 sc√®nes)</option>
            </select>
          </div>
          
          <div className="option-group">
            <label>üíé Qualit√© de g√©n√©ration</label>
            <select
              value={quality}
              onChange={(e) => setQuality(e.target.value)}
            >
              <option value="fast">Rapide (moins de d√©tails)</option>
              <option value="medium">Standard (√©quilibr√©)</option>
              <option value="high">Haute qualit√© (plus de temps)</option>
            </select>
          </div>
        </div>
      </motion.div> */}
    </div>
  );
};

export default CrewAIAnimationGenerator;
