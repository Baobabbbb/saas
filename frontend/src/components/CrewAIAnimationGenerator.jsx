import React, { useState, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import './CrewAIAnimationGenerator.css';

const CrewAIAnimationGenerator = ({ onGenerate, isGenerating }) => {
  const [story, setStory] = useState('');
  const [selectedStyle, setSelectedStyle] = useState('cartoon');
  const [selectedTheme, setSelectedTheme] = useState('adventure');
  const [duration, setDuration] = useState(60); // en secondes
  const [quality, setQuality] = useState('medium');
  const [title, setTitle] = useState('');
  const [mode, setMode] = useState('complete'); // complete, fast, cohesive
  
  const storyStyles = [
    { 
      id: 'cartoon', 
      name: 'Cartoon 3D', 
      description: 'Style color√© et amusant en 3D',
      emoji: 'üé®',
      preview: 'linear-gradient(135deg, #ff6b6b, #4ecdc4)'
    },
    { 
      id: 'watercolor', 
      name: 'Aquarelle', 
      description: 'Style artistique aquarelle',
      emoji: 'üñåÔ∏è',
      preview: 'linear-gradient(135deg, #74b9ff, #0984e3)'
    },
    { 
      id: 'anime', 
      name: 'Anime', 
      description: 'Style anime japonais',
      emoji: 'üå∏',
      preview: 'linear-gradient(135deg, #fd79a8, #e84393)'
    },
    { 
      id: 'fairy_tale', 
      name: 'Conte Magique', 
      description: 'Style f√©erique et enchanteur',
      emoji: '‚ú®',
      preview: 'linear-gradient(135deg, #a29bfe, #6c5ce7)'
    }
  ];

  const storyThemes = [
    { 
      id: 'adventure', 
      name: 'Aventure', 
      description: 'Explorations et d√©couvertes',
      emoji: 'üó∫Ô∏è'
    },
    { 
      id: 'magic', 
      name: 'Magie', 
      description: 'Monde magique et sortil√®ges',
      emoji: '‚ú®'
    },
    { 
      id: 'animals', 
      name: 'Animaux', 
      description: 'Animaux et leurs aventures',
      emoji: 'ü¶Å'
    },
    { 
      id: 'friendship', 
      name: 'Amiti√©', 
      description: 'Histoires d\'amiti√©',
      emoji: 'üë´'
    },
    { 
      id: 'space', 
      name: 'Espace', 
      description: 'Voyages spatiaux',
      emoji: 'üöÄ'
    },
    { 
      id: 'educational', 
      name: '√âducatif', 
      description: 'Apprentissage ludique',
      emoji: 'üìö'
    }
  ];

  const generationModes = [
    {
      id: 'complete',
      name: 'Complet',
      description: 'Analyse narrative compl√®te avec 5 agents CrewAI',
      time: '5-10 min',
      emoji: 'üé¨'
    },
    {
      id: 'fast',
      name: 'Rapide',
      description: 'G√©n√©ration optimis√©e (3-4 sc√®nes)',
      time: '2-5 min',
      emoji: '‚ö°'
    },
    {
      id: 'cohesive',
      name: 'Coh√©rent',
      description: 'Focus sur la continuit√© visuelle',
      time: '7-12 min',
      emoji: 'üé≠'
    }
  ];

  const handleGenerate = () => {
    if (!story.trim()) {
      alert('Veuillez entrer une histoire');
      return;
    }

    if (story.length < 20) {
      alert('L\'histoire doit contenir au moins 20 caract√®res');
      return;
    }

    const generationData = {
      story: story.trim(),
      style_preferences: {
        style: selectedStyle,
        theme: selectedTheme,
        quality: quality,
        target_age: '3-8 ans',
        mode: mode
      },
      duration: duration,
      title: title.trim() || undefined,
      generation_mode: mode
    };

    onGenerate(generationData);
  };

  const exampleStories = [
    {
      title: "Le Petit Dragon Courageux",
      story: "Il √©tait une fois un petit dragon qui avait peur de voler. Un jour, il d√©couvre qu'un village est en danger et qu'il est le seul √† pouvoir aider. Gr√¢ce √† l'encouragement de ses amis, il trouve le courage de d√©ployer ses ailes et devient le h√©ros du village."
    },
    {
      title: "Luna et l'√âtoile Perdue",
      story: "Luna, une petite fille curieuse, remarque qu'une √©toile a disparu du ciel. Elle entreprend un voyage magique √† travers les nuages pour la retrouver. En chemin, elle rencontre des cr√©atures fantastiques qui l'aident dans sa qu√™te et apprend l'importance de l'entraide."
    },
    {
      title: "Le Jardin Secret de Grand-m√®re",
      story: "Maxime d√©couvre le jardin secret de sa grand-m√®re o√π les fleurs peuvent parler et les papillons racontent des histoires. Quand les plantes commencent √† faner, Maxime doit r√©soudre le myst√®re et sauver ce monde merveilleux avec l'aide de ses nouveaux amis magiques."
    }
  ];

  const loadExampleStory = (example) => {
    setStory(example.story);
    setTitle(example.title);
  };

  return (
    <div className="crewai-animation-generator">
      {/* Section Histoire */}
      <motion.div 
        className="story-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
      >
        <h3>üìñ 1. √âcrivez votre histoire</h3>
        
        {/* Titre */}
        <div className="title-section">
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="Titre de votre animation (optionnel)"
            className="title-input"
          />
        </div>

        {/* Histoire */}
        <textarea
          value={story}
          onChange={(e) => setStory(e.target.value)}
          placeholder="√âcrivez ici votre histoire pour enfants... 

Ex: Il √©tait une fois un petit lapin qui d√©couvrait un jardin magique. Les fleurs pouvaient chanter et les papillons racontaient des histoires merveilleuses. Un jour, une sombre mal√©diction menace le jardin et notre h√©ros doit trouver le courage de sauver son monde enchant√©..."
          className="story-textarea"
          rows={6}
        />
        {story.length < 20 && story.length > 0 && (
          <span style={{ color: '#ff6b6b', fontSize: '0.8rem' }}>‚ö†Ô∏è L'histoire doit contenir au moins 20 caract√®res</span>
        )}
      </motion.div>

      {/* Section Style */}
      <motion.div 
        className="style-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
      >
        <h3>üé® 2. Choisissez le style visuel</h3>
        <div className="style-grid">
          {storyStyles.map((style) => (
            <motion.div
              key={style.id}
              className={`style-option ${selectedStyle === style.id ? 'selected' : ''}`}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => setSelectedStyle(style.id)}
            >
              <div className="style-icon">{style.emoji}</div>
              <div className="style-info">
                <h4>{style.name}</h4>
                <p>{style.description}</p>
              </div>
            </motion.div>
          ))}
        </div>
      </motion.div>

      {/* Section Th√®me */}
      <motion.div 
        className="theme-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
      >
        <h3>üåü 3. Choisissez le th√®me</h3>
        <div className="theme-grid">
          {storyThemes.map((theme) => (
            <motion.div
              key={theme.id}
              className={`theme-option ${selectedTheme === theme.id ? 'selected' : ''}`}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => setSelectedTheme(theme.id)}
            >
              <div className="theme-icon">{theme.emoji}</div>
              <div className="theme-info">
                <h4>{theme.name}</h4>
                <p>{theme.description}</p>
              </div>
            </motion.div>
          ))}
        </div>
      </motion.div>

      {/* Section Mode de g√©n√©ration */}
      <motion.div 
        className="mode-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.4 }}
      >
        <h3>üöÄ 4. Mode de g√©n√©ration</h3>
        <div className="mode-grid">
          {generationModes.map((modeOption) => (
            <motion.div
              key={modeOption.id}
              className={`mode-option ${mode === modeOption.id ? 'selected' : ''}`}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => setMode(modeOption.id)}
            >
              <span className="mode-emoji">{modeOption.emoji}</span>
              <div className="mode-info">
                <h4>{modeOption.name}</h4>
                <p>{modeOption.description}</p>
                <span className="mode-time">‚è±Ô∏è {modeOption.time}</span>
              </div>
            </motion.div>
          ))}
        </div>
      </motion.div>

      {/* Section Options */}
      <motion.div 
        className="options-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.5 }}
      >
        <h3>‚öôÔ∏è 5. Options avanc√©es</h3>
        <div className="options-grid">
          <div className="option-group">
            <label>‚è±Ô∏è Dur√©e de l'animation</label>
            <select
              value={duration}
              onChange={(e) => setDuration(parseInt(e.target.value))}
            >
              <option value={30}>30 secondes (3-4 sc√®nes)</option>
              <option value={60}>1 minute (5-6 sc√®nes)</option>
              <option value={120}>2 minutes (8-10 sc√®nes)</option>
              <option value={180}>3 minutes (12-15 sc√®nes)</option>
            </select>
          </div>
          
          <div className="option-group">
            <label>üíé Qualit√© de g√©n√©ration</label>
            <select
              value={quality}
              onChange={(e) => setQuality(e.target.value)}
            >
              <option value="fast">Rapide (moins de d√©tails)</option>
              <option value="medium">Standard (√©quilibr√©)</option>
              <option value="high">Haute qualit√© (plus de temps)</option>
            </select>
          </div>
        </div>
      </motion.div>

      {/* Bouton de g√©n√©ration */}
      <motion.div 
        className="generate-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.6 }}
      >
        <motion.button
          className={`generate-btn ${isGenerating ? 'generating' : ''}`}
          onClick={handleGenerate}
          disabled={isGenerating || !story.trim() || story.length < 20}
          whileHover={{ scale: isGenerating ? 1 : 1.05 }}
          whileTap={{ scale: isGenerating ? 1 : 0.98 }}
        >
          {isGenerating ? (
            <>
              <div className="loading-spinner"></div>
              G√©n√©ration en cours...
            </>
          ) : (
            <>
              üé¨ Cr√©er l'Animation
            </>
          )}
        </motion.button>

        {mode === 'complete' && (
          <div className="generation-info">
            <p>ü§ñ <strong>Pipeline CrewAI complet :</strong></p>
            <ul>
              <li>üß© Sc√©nariste : D√©coupage en sc√®nes</li>
              <li>üé® Directeur Artistique : Style et coh√©rence</li>
              <li>üß† Prompt Engineer : Optimisation IA</li>
              <li>üì° Op√©rateur Technique : G√©n√©ration vid√©o</li>
              <li>üé¨ Monteur : Assemblage final</li>
            </ul>
          </div>
        )}
      </motion.div>
    </div>
  );
};

export default CrewAIAnimationGenerator;
