import React from 'react';
import { motion } from 'framer-motion';
import './AnimationSelector.css';

const AnimationSelector = ({ 
  selectedTheme, 
  setSelectedTheme, 
  selectedDuration, 
  setSelectedDuration,
  selectedStyle,
  setSelectedStyle,
  customStory,
  setCustomStory
}) => {
  
  const animationThemes = [
    { id: 'custom', name: 'Dessin anim√© personnalis√©', description: '√âcrivez votre propre histoire', emoji: '‚úèÔ∏è' },
    { id: 'espace', name: 'Espace', description: 'Voyages spatiaux', emoji: 'üöÄ' },
    { id: 'ocean', name: 'Oc√©an', description: 'Aventures sous-marines', emoji: 'üåä' },
    { id: 'aventure', name: 'Aventure', description: 'Voyages et explorations', emoji: 'üó∫Ô∏è' },
    { id: 'animaux', name: 'Animaux', description: 'Histoires d\'animaux mignons', emoji: 'ü¶Å' },
    { id: 'magie', name: 'Magie', description: 'Monde magique et sortil√®ges', emoji: '‚ú®' },
    { id: 'amitie', name: 'Amiti√©', description: 'Histoires d\'amiti√©', emoji: 'üë´' },
    { id: 'foret', name: 'For√™t', description: 'Myst√®res de la for√™t', emoji: 'üå≤' },
    { id: 'pirates', name: 'Pirates', description: 'Aventures de pirates', emoji: 'üè¥‚Äç‚ò†Ô∏è' },
    { id: 'dinosaures', name: 'Dinosaures', description: 'L\'√©poque des dinosaures', emoji: 'ü¶ï' },
    { id: 'conte_fees', name: 'Conte de f√©es', description: 'Contes classiques revisit√©s', emoji: 'üè∞' },
    { id: 'superheros', name: 'Super-h√©ros', description: 'Aventures h√©ro√Øques', emoji: 'ü¶∏' }
  ];

  const durations = [
    { value: 10, label: '10 secondes' },
    { value: 30, label: '30 secondes' },
    { value: 60, label: '1 minute' },
    { value: 120, label: '2 minutes' },
    { value: 180, label: '3 minutes' },
    { value: 300, label: '5 minutes' }
  ];

  const visualStyles = [
    { id: 'cartoon', name: 'Cartoon', description: 'Style dessin anim√© color√©', emoji: 'üé®' },
    { id: 'anime', name: 'Anime', description: 'Style manga japonais', emoji: 'üáØüáµ', useImage: true, imagePath: '/assets/japan-flag.png' },
    { id: 'realistic', name: 'R√©aliste', description: 'Style cin√©matographique', emoji: 'üé¨' },
    { id: 'pastel', name: 'Pastel', description: 'Couleurs douces et tendres', emoji: 'üå∏' }
  ];

  // Fonctions de toggle pour d√©s√©lectionner en recliquant
  const handleThemeSelect = (themeId) => {
    if (selectedTheme === themeId) {
      setSelectedTheme(null); // D√©s√©lectionner si d√©j√† s√©lectionn√©
    } else {
      setSelectedTheme(themeId); // S√©lectionner si pas encore s√©lectionn√©
    }
  };

  const handleDurationSelect = (durationValue) => {
    if (selectedDuration === durationValue) {
      setSelectedDuration(null); // D√©s√©lectionner si d√©j√† s√©lectionn√©
    } else {
      setSelectedDuration(durationValue); // S√©lectionner si pas encore s√©lectionn√©
    }
  };

  const handleStyleSelect = (styleId) => {
    if (selectedStyle === styleId) {
      setSelectedStyle(null); // D√©s√©lectionner si d√©j√† s√©lectionn√©
    } else {
      setSelectedStyle(styleId); // S√©lectionner si pas encore s√©lectionn√©
    }
  };

  return (
    <div className="animation-selector">
      {/* Section 2: S√©lection du th√®me */}
      <div className="selector-section">
        <h4>2. Choisissez un th√®me pour votre dessin anim√©</h4>
        <div className="themes-grid">
          {animationThemes.map((theme) => (
            <motion.div
              key={theme.id}
              className={`theme-card ${selectedTheme === theme.id ? 'selected' : ''} ${theme.id === 'custom' ? 'custom-animation' : ''}`}
              onClick={() => handleThemeSelect(theme.id)}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <div className="theme-emoji">{theme.emoji}</div>
              <div className="theme-content">
                <h5>{theme.name}</h5>
                <p>{theme.description}</p>
              </div>
            </motion.div>
          ))}
        </div>

        {selectedTheme === 'custom' && (
          <motion.div 
            className="custom-story-section"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
          >
            <h4>√âcrivez votre histoire</h4>
            <textarea
              className="custom-story-textarea"
              value={customStory}
              onChange={(e) => setCustomStory(e.target.value)}
              placeholder="Il √©tait une fois... Racontez votre histoire ici. Plus elle est d√©taill√©e, plus l'animation sera riche et personnalis√©e !"
              rows={4}
            />
            <div className="character-count">
              {customStory.length}/500 caract√®res
            </div>
          </motion.div>
        )}
      </div>

      {/* Section 3: Dur√©e */}
      <div className="selector-section">
        <h4>3. Choisissez la dur√©e de l'animation</h4>
        <div className="duration-options">
          {durations.map((duration) => (
            <motion.div
              key={duration.value}
              className={`duration-option ${selectedDuration === duration.value ? 'selected' : ''}`}
              onClick={() => handleDurationSelect(duration.value)}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <div className="duration-label">{duration.label}</div>
            </motion.div>
          ))}
        </div>
      </div>

      {/* Section 4: Style visuel */}
      <div className="selector-section">
        <h4>4. Choisissez un style visuel</h4>
        <div className="style-options">
          {visualStyles.map((style) => (
            <motion.div
              key={style.id}
              className={`style-option ${selectedStyle === style.id ? 'selected' : ''}`}
              onClick={() => handleStyleSelect(style.id)}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <div className="style-emoji">
                {style.useImage ? (
                  <img 
                    src={style.imagePath} 
                    alt={style.name} 
                    className="style-flag-image"
                    onError={(e) => {
                      e.target.style.display = 'none';
                      e.target.nextSibling.style.display = 'block';
                    }}
                  />
                ) : null}
                <span style={{ display: style.useImage ? 'none' : 'block' }}>
                  {style.emoji}
                </span>
              </div>
              <div className="style-content">
                <h5>{style.name}</h5>
                <p>{style.description}</p>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default AnimationSelector;
