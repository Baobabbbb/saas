import React, { useState } const characters = [
  { id: 'custom', name: 'Personnalis√©', description: 'D√©crivez votre personnage', emoji: '‚ú®' },
  { id: 'boy', name: 'Gar√ßon', description: 'Personnage principal gar√ßon', emoji: 'üë¶' },
  { id: 'girl', name: 'Fille', description: 'Personnage principal fille', emoji: 'üëß' }
];'react';
import { motion } from 'framer-motion';
import './ComicSelector.css';

const comicThemes = [
  { id: 'custom', name: 'Personnalis√©e', description: 'Cr√©ez votre propre th√®me', emoji: 'üé®' },
  { id: 'adventure', name: 'Aventure', description: 'Exploration et d√©couvertes', emoji: 'üó∫Ô∏è' },
  { id: 'animals', name: 'Animaux', description: 'Animaux et leurs aventures', emoji: 'ü¶Å' },
  { id: 'space', name: 'Espace', description: 'Voyages spatiaux', emoji: 'üöÄ' },
  { id: 'magic', name: 'Magie', description: 'Monde magique et sortil√®ges', emoji: '‚ú®' },
  { id: 'friendship', name: 'Amiti√©', description: 'Histoires d\'amiti√©', emoji: 'üë´' },
  { id: 'ocean', name: 'Oc√©an', description: 'Aventures sous-marines', emoji: 'üåä' },
  { id: 'forest', name: 'For√™t', description: 'Myst√®res de la for√™t', emoji: 'üå≤' },
  { id: 'pirates', name: 'Pirates', description: 'Aventures de pirates', emoji: 'üè¥‚Äç‚ò†Ô∏è' },
  { id: 'dinosaurs', name: 'Dinosaures', description: 'L\'√©poque des dinosaures', emoji: 'ü¶ï' },
  { id: 'fairy_tale', name: 'Conte de f√©es', description: 'Contes classiques revisit√©s', emoji: 'üè∞' },
  { id: 'superhero', name: 'Super-h√©ros', description: 'Aventures h√©ro√Øques', emoji: 'ü¶∏' }
];

const artStyles = [
  { id: 'cartoon', name: 'Cartoon', description: 'Style cartoon color√© et amusant', emoji: 'üé®' },
  { id: 'realistic', name: 'R√©aliste', description: 'Style r√©aliste et d√©taill√©', emoji: 'üì∏' },
  { id: 'manga', name: 'Manga', description: 'Style manga japonais', emoji: 'üå∏' },
  { id: 'comics', name: 'Comics', description: 'Style comics am√©ricain', emoji: 'üí•' },
  { id: 'watercolor', name: 'Aquarelle', description: 'Style aquarelle artistique', emoji: 'üñåÔ∏è' }
];

const characters = [
  { id: 'custom', name: 'Personnalis√©', description: 'D√©crivez votre personnage', emoji: '‚ú®' },
  { id: 'boy', name: 'Gar√ßon', description: 'Personnage principal gar√ßon', emoji: 'ÔøΩ' },
  { id: 'girl', name: 'Fille', description: 'Personnage principal fille', emoji: 'üëß' }
];

const storyLengths = [
  { id: 4, name: '4 images', description: 'Histoire tr√®s courte', pages: 4 },
  { id: 8, name: '8 images', description: 'Histoire courte', pages: 8 },
  { id: 12, name: '12 images', description: 'Histoire moyenne', pages: 12 },
  { id: 16, name: '16 images', description: 'Histoire d√©velopp√©e', pages: 16 },
  { id: 20, name: '20 images', description: 'Histoire longue', pages: 20 },
  { id: 22, name: '22 images', description: 'Histoire tr√®s longue', pages: 22 }
];



const ComicSelector = ({
  selectedTheme,
  setSelectedTheme,
  selectedArtStyle,
  setSelectedArtStyle,
  selectedCharacter,
  setSelectedCharacter,
  selectedStoryLength,
  setSelectedStoryLength,
  customRequest,
  setCustomRequest,
  customCharacter,
  setCustomCharacter
}) => {
  const [showCustomTheme, setShowCustomTheme] = useState(false);
  const [showCustomCharacter, setShowCustomCharacter] = useState(false);

  const handleThemeSelect = (themeId) => {
    setSelectedTheme(themeId);
    setShowCustomTheme(themeId === 'custom');
  };

  const handleCharacterSelect = (characterId) => {
    setSelectedCharacter(characterId);
    setShowCustomCharacter(characterId === 'custom');
  };

  return (
    <div className="comic-selector">
      {/* Section Th√®me */}
      <motion.div 
        className="selector-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
      >
        <h3>2. Choisissez un th√®me pour votre BD</h3>
        <div className="options-grid">
          {comicThemes.map((theme) => (
            <motion.div
              key={theme.id}
              className={`option-card ${selectedTheme === theme.id ? 'selected' : ''}`}
              whileHover={{ scale: 1.02, y: -2 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => handleThemeSelect(theme.id)}
            >
              <div className="option-emoji">{theme.emoji}</div>
              <div className="option-content">
                <h4>{theme.name}</h4>
                <p>{theme.description}</p>
              </div>
            </motion.div>
          ))}
        </div>

        {/* Champ personnalis√© pour th√®me custom */}
        {showCustomTheme && (
          <motion.div
            className="custom-theme-input"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            transition={{ duration: 0.3 }}
          >
            <input
              type="text"
              placeholder="D√©crivez votre th√®me personnalis√©..."
              value={customRequest}
              onChange={(e) => setCustomRequest(e.target.value)}
              className="custom-input"
            />
          </motion.div>
        )}
      </motion.div>

      {/* Section Style Artistique */}
      <motion.div 
        className="selector-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
      >
        <h3>3. Choisissez un style artistique</h3>
        <div className="options-grid">
          {artStyles.map((style) => (
            <motion.div
              key={style.id}
              className={`option-card ${selectedArtStyle === style.id ? 'selected' : ''}`}
              whileHover={{ scale: 1.02, y: -2 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => setSelectedArtStyle(style.id)}
            >
              <div className="option-emoji">{style.emoji}</div>
              <div className="option-content">
                <h4>{style.name}</h4>
                <p>{style.description}</p>
              </div>
            </motion.div>
          ))}
        </div>
      </motion.div>

      {/* Section Personnage Principal */}
      <motion.div 
        className="selector-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
      >
        <h3>4. Choisissez un personnage principal</h3>
        <div className="length-buttons-container">
          {characters.map((character) => (
            <motion.button
              key={character.id}
              className={`length-button ${selectedCharacter === character.id ? 'selected' : ''}`}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => handleCharacterSelect(character.id)}
            >
              <span className="length-number">
                {character.id === 'custom' ? '+' : character.emoji}
              </span>
            </motion.button>
          ))}
        </div>

        {/* Champ personnalis√© pour personnage custom */}
        {showCustomCharacter && (
          <motion.div
            className="custom-theme-input"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            transition={{ duration: 0.3 }}
          >
            <input
              type="text"
              placeholder="D√©crivez votre personnage (√¢ge, apparence, traits)..."
              value={customCharacter}
              onChange={(e) => setCustomCharacter(e.target.value)}
              className="custom-input"
            />
          </motion.div>
        )}
      </motion.div>

      {/* Section Longueur de l'histoire */}
      <motion.div 
        className="selector-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.4 }}
      >
        <h3>5. Choisissez le nombre d'images</h3>
        <div className="length-buttons-container">
          {storyLengths.map((length) => (
            <motion.button
              key={length.id}
              className={`length-button ${selectedStoryLength === length.id ? 'selected' : ''}`}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setSelectedStoryLength(length.id)}
            >
              <span className="length-number">{length.pages}</span>
              <span className="length-label">images</span>
            </motion.button>
          ))}
        </div>
      </motion.div>
    </div>
  );
};

export default ComicSelector;
