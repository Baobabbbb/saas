import { supabase } from '../supabaseClient'

// ID utilisateur fictif pour forcer l'utilisation de Supabase
const FORCE_SUPABASE_USER_ID = 'friday-user-' + Date.now().toString();

// Service pour g√©rer les cr√©ations AVEC SUPABASE OBLIGATOIRE
// PATCH TEMPORAIRE : Force l'utilisation de Supabase au lieu du localStorage

// Ajouter une cr√©ation - VERSION SUPABASE ONLY
export async function addCreation({ type, title, data }) {
  try {
    console.log('üîÑ SUPABASE: Tentative de cr√©ation...', { type, title });

    // FORCER l'utilisation de Supabase - PAS de fallback localStorage
    const { data: newCreation, error } = await supabase
      .from('creations')
      .insert([{
        user_id: FORCE_SUPABASE_USER_ID, // ID fictif pour contourner l'auth
        type,
        title,
        data: {
          ...data,
          created_via: 'web_version',
          timestamp: new Date().toISOString()
        }
      }])
      .select()
      .single();

    if (error) {
      console.error('‚ùå SUPABASE ERROR:', error);
      throw new Error(`Supabase error: ${error.message}`);
    }

    console.log('‚úÖ SUPABASE SUCCESS: Cr√©ation sauvegard√©e', newCreation);
    return { data: newCreation };

  } catch (error) {
    console.error('üí• ERREUR SUPABASE:', error);
    // PAS de fallback - on veut voir les vraies erreurs Supabase
    throw error;
  }
}

// R√©cup√©rer l'historique des cr√©ations - VERSION SUPABASE ONLY
export async function getUserCreations() {
  try {
    console.log('üîÑ SUPABASE: R√©cup√©ration des cr√©ations...');

    // FORCER l'utilisation de Supabase
    const { data, error } = await supabase
      .from('creations')
      .select('*')
      .eq('user_id', FORCE_SUPABASE_USER_ID)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå SUPABASE ERROR r√©cup√©ration:', error);
      throw new Error(`Supabase error: ${error.message}`);
    }

    console.log('‚úÖ SUPABASE SUCCESS: R√©cup√©r√©', data?.length || 0, 'cr√©ations');
    return data || [];

  } catch (error) {
    console.error('üí• ERREUR SUPABASE r√©cup√©ration:', error);
    // PAS de fallback - on veut voir les vraies erreurs Supabase
    throw error;
  }
}

// Supprimer une cr√©ation - VERSION SUPABASE ONLY
export async function deleteCreation(id) {
  try {
    console.log('üîÑ SUPABASE: Suppression de la cr√©ation...', id);

    // FORCER l'utilisation de Supabase
    const { error } = await supabase
      .from('creations')
      .delete()
      .eq('id', id)
      .eq('user_id', FORCE_SUPABASE_USER_ID);

    if (error) {
      console.error('‚ùå SUPABASE ERROR suppression:', error);
      throw new Error(`Supabase error: ${error.message}`);
    }

    console.log('‚úÖ SUPABASE SUCCESS: Cr√©ation supprim√©e');
    return { error: null };

  } catch (error) {
    console.error('üí• ERREUR SUPABASE suppression:', error);
    throw error;
  }
}

// Fonction de diagnostic Supabase
export async function diagnoseSupabase() {
  try {
    console.log('üîç DIAGNOSTIC SUPABASE...');

    // Test 1: Variables d'environnement
    console.log('üìã Variables:');
    console.log('- URL:', import.meta.env.VITE_SUPABASE_URL);
    console.log('- KEY pr√©sente:', !!import.meta.env.VITE_SUPABASE_ANON_KEY);

    // Test 2: Connexion de base
    const { data: connectionTest, error: connectionError } = await supabase
      .from('creations')
      .select('count', { count: 'exact', head: true });

    if (connectionError) {
      console.log('‚ùå Connexion √©chou√©e:', connectionError.message);
      return { status: 'error', error: connectionError.message };
    }

    console.log('‚úÖ Connexion r√©ussie');

    // Test 3: Test d'insertion
    const testData = {
      user_id: FORCE_SUPABASE_USER_ID,
      type: 'diagnostic',
      title: 'Test de connexion',
      data: { timestamp: new Date().toISOString(), test: true }
    };

    const { data: testResult, error: testError } = await supabase
      .from('creations')
      .insert([testData])
      .select()
      .single();

    if (testError) {
      console.log('‚ùå Test d\'insertion √©chou√©:', testError.message);
      return { status: 'error', error: testError.message };
    }

    console.log('‚úÖ Test d\'insertion r√©ussi:', testResult.id);

    // Nettoyer le test
    await supabase.from('creations').delete().eq('id', testResult.id);

    return {
      status: 'success',
      message: 'Supabase fonctionne parfaitement !',
      variables: {
        url: !!import.meta.env.VITE_SUPABASE_URL,
        key: !!import.meta.env.VITE_SUPABASE_ANON_KEY
      }
    };

  } catch (error) {
    console.log('üí• Erreur diagnostic:', error);
    return { status: 'error', error: error.message };
  }
}