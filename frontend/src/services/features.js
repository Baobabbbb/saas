// Service pour g√©rer les fonctionnalit√©s disponibles dans Herbbie
const API_BASE_URL = 'https://saas-production.up.railway.app/api';

// Configuration par d√©faut des fonctionnalit√©s
const DEFAULT_FEATURES = {
  animation: { enabled: true, name: 'Dessin anim√©', icon: 'üé¨' },
  comic: { enabled: true, name: 'Bande dessin√©e', icon: 'üí¨' },
  coloring: { enabled: true, name: 'Coloriage', icon: 'üé®' },
  audio: { enabled: true, name: 'Histoire', icon: 'üìñ' },
  rhyme: { enabled: true, name: 'Comptine', icon: 'üéµ' }
};

// Cache pour √©viter les appels r√©p√©t√©s
let featuresCache = null;
let cacheTimestamp = null;
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

// Fonction pour r√©cup√©rer les fonctionnalit√©s depuis l'API
export const getFeatures = async () => {
  try {
    // V√©rifier le cache
    if (featuresCache && cacheTimestamp && (Date.now() - cacheTimestamp) < CACHE_DURATION) {
      return featuresCache;
    }

    const response = await fetch(`${API_BASE_URL}/features`);
    if (response.ok) {
      const features = await response.json();
      featuresCache = features;
      cacheTimestamp = Date.now();
      return features;
    } else {
      console.warn('Impossible de r√©cup√©rer les fonctionnalit√©s, utilisation des valeurs par d√©faut');
      return DEFAULT_FEATURES;
    }
  } catch (error) {
    console.warn('Erreur lors de la r√©cup√©ration des fonctionnalit√©s:', error);
    return DEFAULT_FEATURES;
  }
};

// Fonction pour v√©rifier si une fonctionnalit√© est activ√©e
export const isFeatureEnabled = async (featureKey) => {
  try {
    const features = await getFeatures();
    return features[featureKey]?.enabled || false;
  } catch (error) {
    console.warn(`Erreur lors de la v√©rification de la fonctionnalit√© ${featureKey}:`, error);
    return false;
  }
};

// Fonction pour r√©cup√©rer les fonctionnalit√©s activ√©es
export const getEnabledFeatures = async () => {
  try {
    const features = await getFeatures();
    return Object.entries(features)
      .filter(([key, feature]) => feature.enabled)
      .reduce((enabled, [key, feature]) => {
        enabled[key] = feature;
        return enabled;
      }, {});
  } catch (error) {
    console.warn('Erreur lors de la r√©cup√©ration des fonctionnalit√©s activ√©es:', error);
    return {};
  }
};

// Fonction pour r√©cup√©rer toutes les fonctionnalit√©s
export const getAllFeatures = () => {
  return { ...DEFAULT_FEATURES };
};

// Fonction utilitaire pour v√©rifier si toutes les fonctionnalit√©s requises sont activ√©es
export const areRequiredFeaturesEnabled = async (requiredFeatures = []) => {
  try {
    const enabledFeatures = await getEnabledFeatures();
    return requiredFeatures.every(feature => enabledFeatures[feature]);
  } catch (error) {
    console.warn('Erreur lors de la v√©rification des fonctionnalit√©s requises:', error);
    return false;
  }
};

// Fonction pour forcer le rechargement du cache
export const refreshFeatures = async () => {
  featuresCache = null;
  cacheTimestamp = null;
  return await getFeatures();
};

// Export par d√©faut pour compatibilit√©
export default {
  getFeatures,
  isFeatureEnabled,
  getEnabledFeatures,
  getAllFeatures,
  areRequiredFeaturesEnabled,
  refreshFeatures
};