// Service pour g√©rer les fonctionnalit√©s disponibles dans Herbbie (version localStorage uniquement)
const STORAGE_KEY = 'herbbie_features_config';

// Configuration par d√©faut des fonctionnalit√©s
const DEFAULT_FEATURES = {
  animation: { enabled: true, name: 'Dessin anim√©', icon: 'üé¨', description: 'G√©n√©ration de dessins anim√©s personnalis√©s avec IA' },
  comic: { enabled: true, name: 'Bande dessin√©e', icon: 'üí¨', description: 'Cr√©ation de bandes dessin√©es avec bulles de dialogue' },
  coloring: { enabled: true, name: 'Coloriage', icon: 'üé®', description: 'Pages de coloriage √† imprimer pour les enfants' },
  audio: { enabled: true, name: 'Histoire', icon: 'üìñ', description: 'Histoires audio avec narration automatique' },
  rhyme: { enabled: true, name: 'Comptine', icon: 'üéµ', description: 'Comptines musicales avec paroles et m√©lodies' }
};

// Cache pour √©viter les appels r√©p√©t√©s
let featuresCache = null;
let cacheTimestamp = null;
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

// Fonction pour charger les fonctionnalit√©s depuis le localStorage
const loadFeaturesFromStorage = () => {
  try {
    const stored = localStorage.getItem(STORAGE_KEY);
    if (stored) {
      const parsed = JSON.parse(stored);
      console.log('üìã Fonctionnalit√©s charg√©es depuis le localStorage:', parsed);
      return parsed;
    }
  } catch (error) {
    console.warn('Erreur lors du chargement des fonctionnalit√©s depuis le localStorage:', error);
  }
  return null;
};

// Fonction pour r√©cup√©rer les fonctionnalit√©s (UNIQUEMENT depuis localStorage)
export const getFeatures = async () => {
  try {
    // V√©rifier le cache
    if (featuresCache && cacheTimestamp && (Date.now() - cacheTimestamp) < CACHE_DURATION) {
      return featuresCache;
    }

    // Charger depuis le localStorage
    const storedFeatures = loadFeaturesFromStorage();
    if (storedFeatures) {
      featuresCache = storedFeatures;
      cacheTimestamp = Date.now();
      return storedFeatures;
    }

    // Fallback vers les valeurs par d√©faut
    console.log('üìã Aucune configuration trouv√©e, utilisation des valeurs par d√©faut');
    featuresCache = DEFAULT_FEATURES;
    cacheTimestamp = Date.now();
    return DEFAULT_FEATURES;
  } catch (error) {
    console.warn('Erreur lors de la r√©cup√©ration des fonctionnalit√©s:', error);
    return DEFAULT_FEATURES;
  }
};

// Fonction pour v√©rifier si une fonctionnalit√© est activ√©e
export const isFeatureEnabled = async (featureKey) => {
  try {
    const features = await getFeatures();
    return features[featureKey]?.enabled || false;
  } catch (error) {
    console.warn(`Erreur lors de la v√©rification de la fonctionnalit√© ${featureKey}:`, error);
    return false;
  }
};

// Fonction pour r√©cup√©rer les fonctionnalit√©s activ√©es
export const getEnabledFeatures = async () => {
  try {
    const features = await getFeatures();
    return Object.entries(features)
      .filter(([key, feature]) => feature.enabled)
      .reduce((enabled, [key, feature]) => {
        enabled[key] = feature;
        return enabled;
      }, {});
  } catch (error) {
    console.warn('Erreur lors de la r√©cup√©ration des fonctionnalit√©s activ√©es:', error);
    return {};
  }
};

// Fonction pour r√©cup√©rer toutes les fonctionnalit√©s
export const getAllFeatures = async () => {
  return await getFeatures();
};

// Fonction utilitaire pour v√©rifier si toutes les fonctionnalit√©s requises sont activ√©es
export const areRequiredFeaturesEnabled = async (requiredFeatures = []) => {
  try {
    const enabledFeatures = await getEnabledFeatures();
    return requiredFeatures.every(feature => enabledFeatures[feature]);
  } catch (error) {
    console.warn('Erreur lors de la v√©rification des fonctionnalit√©s requises:', error);
    return false;
  }
};

// Fonction pour forcer le rechargement du cache
export const refreshFeatures = async () => {
  featuresCache = null;
  cacheTimestamp = null;
  return await getFeatures();
};

// Fonction pour √©couter les changements de fonctionnalit√©s depuis le panneau
export const listenForFeatureChanges = (callback) => {
  const handleStorageChange = (event) => {
    if (event.key === STORAGE_KEY && event.newValue) {
      try {
        const newFeatures = JSON.parse(event.newValue);
        console.log('üîÑ Fonctionnalit√©s mises √† jour depuis le panneau (storage):', newFeatures);
        
        // Invalider le cache
        featuresCache = null;
        cacheTimestamp = null;
        
        if (callback && typeof callback === 'function') {
          callback(newFeatures);
        }
      } catch (error) {
        console.error('Erreur lors du parsing des nouvelles fonctionnalit√©s:', error);
      }
    }
  };
  
  const handleCustomEvent = (event) => {
    if (event.detail) {
      console.log('üîÑ Fonctionnalit√©s mises √† jour via √©v√©nement personnalis√©:', event.detail);
      
      // Invalider le cache
      featuresCache = null;
      cacheTimestamp = null;
      
      if (callback && typeof callback === 'function') {
        callback(event.detail);
      }
    }
  };
  
  // V√©rifier p√©riodiquement les changements (fallback)
  const checkForChanges = () => {
    const storedFeatures = loadFeaturesFromStorage();
    if (storedFeatures && (!featuresCache || JSON.stringify(storedFeatures) !== JSON.stringify(featuresCache))) {
      console.log('üîÑ Changements d√©tect√©s via v√©rification p√©riodique:', storedFeatures);
      featuresCache = null;
      cacheTimestamp = null;
      if (callback && typeof callback === 'function') {
        callback(storedFeatures);
      }
    }
  };
  
  // √âcouter les changements de localStorage
  window.addEventListener('storage', handleStorageChange);
  
  // √âcouter les √©v√©nements personnalis√©s
  window.addEventListener('herbbieFeaturesUpdate', handleCustomEvent);
  window.addEventListener('featuresUpdated', handleCustomEvent);
  
  // V√©rification p√©riodique toutes les 2 secondes
  const intervalId = setInterval(checkForChanges, 2000);
  
  // Retourner une fonction pour nettoyer les √©couteurs
  return () => {
    window.removeEventListener('storage', handleStorageChange);
    window.removeEventListener('herbbieFeaturesUpdate', handleCustomEvent);
    window.removeEventListener('featuresUpdated', handleCustomEvent);
    clearInterval(intervalId);
  };
};

// Export par d√©faut pour compatibilit√©
export default {
  getFeatures,
  isFeatureEnabled,
  getEnabledFeatures,
  getAllFeatures,
  areRequiredFeaturesEnabled,
  refreshFeatures,
  listenForFeatureChanges
};