// Service pour g√©rer les fonctionnalit√©s disponibles dans Herbbie
const API_URL = '/api/features';

// Cache en m√©moire pour √©viter les appels API multiples
let cachedFeatures = null;
let lastFetchTime = 0;
const CACHE_DURATION = 3000; // 3 secondes

// Configuration par d√©faut des fonctionnalit√©s (utilis√©e uniquement si l'API √©choue)
const DEFAULT_FEATURES = {
  animation: { enabled: true, name: 'Dessin anim√©', icon: 'üé¨', description: 'G√©n√©ration de dessins anim√©s personnalis√©s avec IA' },
  comic: { enabled: true, name: 'Bande dessin√©e', icon: 'üí¨', description: 'Cr√©ation de bandes dessin√©es avec bulles de dialogue' },
  coloring: { enabled: true, name: 'Coloriage', icon: 'üé®', description: 'Pages de coloriage √† imprimer pour les enfants' },
  audio: { enabled: true, name: 'Histoire', icon: 'üìñ', description: 'Histoires audio avec narration automatique' },
  rhyme: { enabled: true, name: 'Comptine', icon: 'üéµ', description: 'Comptines musicales avec paroles et m√©lodies' }
};

// Fonction pour charger les fonctionnalit√©s depuis l'API
const loadFeaturesFromAPI = async () => {
  try {
    const response = await fetch(API_URL, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (response.ok) {
      const features = await response.json();
      // Mettre √† jour le cache
      cachedFeatures = features;
      lastFetchTime = Date.now();
      return features;
    } else {
      console.error('Erreur API lors du chargement des fonctionnalit√©s:', response.status);
      throw new Error(`Erreur API: ${response.status}`);
    }
  } catch (error) {
    console.error('Erreur lors du chargement depuis l\'API:', error);
    throw error;
  }
};

// Fonction pour r√©cup√©rer les fonctionnalit√©s (SOURCE UNIQUE: API)
export const getFeatures = async () => {
  try {
    // Utiliser le cache si disponible et r√©cent
    const now = Date.now();
    if (cachedFeatures && (now - lastFetchTime) < CACHE_DURATION) {
      return cachedFeatures;
    }

    // Charger depuis l'API
    const apiFeatures = await loadFeaturesFromAPI();
    return apiFeatures;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des fonctionnalit√©s:', error);
    // En cas d'erreur, utiliser les valeurs par d√©faut
    return DEFAULT_FEATURES;
  }
};

// Fonction pour v√©rifier si une fonctionnalit√© est activ√©e
export const isFeatureEnabled = async (featureKey) => {
  try {
    const features = await getFeatures();
    return features[featureKey]?.enabled || false;
  } catch (error) {
    console.warn(`Erreur lors de la v√©rification de la fonctionnalit√© ${featureKey}:`, error);
    return false;
  }
};

// Fonction pour r√©cup√©rer les fonctionnalit√©s activ√©es
export const getEnabledFeatures = async () => {
  try {
    const features = await getFeatures();
    return Object.entries(features)
      .filter(([key, feature]) => feature.enabled)
      .reduce((enabled, [key, feature]) => {
        enabled[key] = feature;
        return enabled;
      }, {});
  } catch (error) {
    console.warn('Erreur lors de la r√©cup√©ration des fonctionnalit√©s activ√©es:', error);
    return {};
  }
};

// Fonction pour r√©cup√©rer toutes les fonctionnalit√©s (y compris d√©sactiv√©es)
export const getAllFeatures = async () => {
  return await getFeatures();
};

// Fonction pour forcer le rafra√Æchissement du cache
export const invalidateCache = () => {
  cachedFeatures = null;
  lastFetchTime = 0;
};

// Fonction pour rafra√Æchir les fonctionnalit√©s
export const refreshFeatures = async () => {
  return await getFeatures();
};

// Fonction pour synchroniser manuellement les fonctionnalit√©s
export const syncFeatures = async () => {
  return await getFeatures();
};

// Fonction pour √©couter les changements de fonctionnalit√©s depuis l'API
export const listenForFeatureChanges = (callback) => {
  let previousFeatures = null;

  // Fonction pour v√©rifier les changements via l'API
  const checkForChanges = async () => {
    try {
      // Invalider le cache pour forcer un appel API frais
      invalidateCache();
      const currentFeatures = await loadFeaturesFromAPI();
      
      // Comparer avec la version pr√©c√©dente
      const featuresChanged = JSON.stringify(currentFeatures) !== JSON.stringify(previousFeatures);
      
      if (featuresChanged && callback && typeof callback === 'function') {
        previousFeatures = currentFeatures;
        callback(currentFeatures);
      }
    } catch (error) {
      console.error('Erreur lors de la v√©rification des changements:', error);
    }
  };

  // Polling de l'API toutes les 5 secondes pour d√©tecter les changements
  const pollIntervalId = setInterval(checkForChanges, 5000);
  
  // Effectuer une premi√®re v√©rification imm√©diate
  checkForChanges();

  // Retourner une fonction pour nettoyer l'√©couteur
  return () => {
    clearInterval(pollIntervalId);
  };
};

// Export par d√©faut pour compatibilit√©
export default {
  getFeatures,
  isFeatureEnabled,
  getEnabledFeatures,
  getAllFeatures,
  refreshFeatures,
  listenForFeatureChanges,
  invalidateCache
};